// Package castai provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package castai

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for SubscriptionBillingPeriod.
const (
	Month SubscriptionBillingPeriod = "month"
	Year  SubscriptionBillingPeriod = "year"
)

// Defines values for SubscriptionStatus.
const (
	SubscriptionStatusActive      SubscriptionStatus = "active"
	SubscriptionStatusCancelled   SubscriptionStatus = "cancelled"
	SubscriptionStatusFuture      SubscriptionStatus = "future"
	SubscriptionStatusInTrial     SubscriptionStatus = "in_trial"
	SubscriptionStatusNonRenewing SubscriptionStatus = "non_renewing"
	SubscriptionStatusPaused      SubscriptionStatus = "paused"
)

// Defines values for CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle.
const (
	CastaiAlgorithmstatsV1beta1NodeStatsLifeCycleONDEMAND     CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle = "ON_DEMAND"
	CastaiAlgorithmstatsV1beta1NodeStatsLifeCycleSPOT         CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle = "SPOT"
	CastaiAlgorithmstatsV1beta1NodeStatsLifeCycleSPOTFALLBACK CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle = "SPOT_FALLBACK"
	CastaiAlgorithmstatsV1beta1NodeStatsLifeCycleUNKNOWN      CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle = "UNKNOWN"
)

// Defines values for CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason.
const (
	CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReasonAlreadyRebalancing         CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason = "AlreadyRebalancing"
	CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReasonInvalid                    CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason = "Invalid"
	CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReasonProblematicWorkloads       CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason = "ProblematicWorkloads"
	CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReasonRebalancingNodeDrainFailed CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason = "RebalancingNodeDrainFailed"
)

// Defines values for CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator.
const (
	CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperatorDoesNotExist CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator = "DoesNotExist"
	CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperatorExists       CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator = "Exists"
	CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperatorIn           CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator = "In"
	CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperatorInvalid      CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator = "Invalid"
	CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperatorNotIn        CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator = "NotIn"
)

// Defines values for CastaiAutoscalerV1beta1Os.
const (
	CastaiAutoscalerV1beta1OsLinux   CastaiAutoscalerV1beta1Os = "linux"
	CastaiAutoscalerV1beta1OsUnknown CastaiAutoscalerV1beta1Os = "unknown"
	CastaiAutoscalerV1beta1OsWindows CastaiAutoscalerV1beta1Os = "windows"
)

// Defines values for CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType.
const (
	CastaiAutoscalerV1beta1RebalancingPlanResponseOperationTypeCreateNode  CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType = "create_node"
	CastaiAutoscalerV1beta1RebalancingPlanResponseOperationTypeDeleteNode  CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType = "delete_node"
	CastaiAutoscalerV1beta1RebalancingPlanResponseOperationTypeDrainNode   CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType = "drain_node"
	CastaiAutoscalerV1beta1RebalancingPlanResponseOperationTypeInvalid     CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType = "invalid"
	CastaiAutoscalerV1beta1RebalancingPlanResponseOperationTypePrepareNode CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType = "prepare_node"
)

// Defines values for CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason.
const (
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonAchievedSavingsBelowThreshold   CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "achievedSavingsBelowThreshold"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonInvalid                         CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "invalid"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonNodeCreateFailed                CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "nodeCreateFailed"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonNodeDeleteFailed                CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "nodeDeleteFailed"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonNodeDrainFailed                 CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "nodeDrainFailed"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonNodePrepareFailed               CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "nodePrepareFailed"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonRebalancingPlanGenerationFailed CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "rebalancingPlanGenerationFailed"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonRebalancingPlanTimeout          CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "rebalancingPlanTimeout"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonUnknown                         CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "unknown"
	CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReasonUpscalingFailed                 CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason = "upscalingFailed"
)

// Defines values for CastaiAutoscalerV1beta1Status.
const (
	CastaiAutoscalerV1beta1StatusCreatingNodes     CastaiAutoscalerV1beta1Status = "creating_nodes"
	CastaiAutoscalerV1beta1StatusDeletingNodes     CastaiAutoscalerV1beta1Status = "deleting_nodes"
	CastaiAutoscalerV1beta1StatusDrainingNodes     CastaiAutoscalerV1beta1Status = "draining_nodes"
	CastaiAutoscalerV1beta1StatusError             CastaiAutoscalerV1beta1Status = "error"
	CastaiAutoscalerV1beta1StatusFinished          CastaiAutoscalerV1beta1Status = "finished"
	CastaiAutoscalerV1beta1StatusGenerated         CastaiAutoscalerV1beta1Status = "generated"
	CastaiAutoscalerV1beta1StatusGenerating        CastaiAutoscalerV1beta1Status = "generating"
	CastaiAutoscalerV1beta1StatusInvalid           CastaiAutoscalerV1beta1Status = "invalid"
	CastaiAutoscalerV1beta1StatusPartiallyFinished CastaiAutoscalerV1beta1Status = "partially_finished"
	CastaiAutoscalerV1beta1StatusPreparingNodes    CastaiAutoscalerV1beta1Status = "preparing_nodes"
)

// Defines values for CastaiEvictorV1LabelSelectorExpressionOperator.
const (
	CastaiEvictorV1LabelSelectorExpressionOperatorDoesNotExist CastaiEvictorV1LabelSelectorExpressionOperator = "DoesNotExist"
	CastaiEvictorV1LabelSelectorExpressionOperatorExists       CastaiEvictorV1LabelSelectorExpressionOperator = "Exists"
	CastaiEvictorV1LabelSelectorExpressionOperatorIn           CastaiEvictorV1LabelSelectorExpressionOperator = "In"
	CastaiEvictorV1LabelSelectorExpressionOperatorInvalid      CastaiEvictorV1LabelSelectorExpressionOperator = "Invalid"
	CastaiEvictorV1LabelSelectorExpressionOperatorNotIn        CastaiEvictorV1LabelSelectorExpressionOperator = "NotIn"
)

// Defines values for CastaiInventoryV1beta1AttachableGPUDeviceManufacturer.
const (
	CastaiInventoryV1beta1AttachableGPUDeviceManufacturerAMD     CastaiInventoryV1beta1AttachableGPUDeviceManufacturer = "AMD"
	CastaiInventoryV1beta1AttachableGPUDeviceManufacturerNVIDIA  CastaiInventoryV1beta1AttachableGPUDeviceManufacturer = "NVIDIA"
	CastaiInventoryV1beta1AttachableGPUDeviceManufacturerUNKNOWN CastaiInventoryV1beta1AttachableGPUDeviceManufacturer = "UNKNOWN"
)

// Defines values for CastaiInventoryV1beta1AzureReservationReservationPlan.
const (
	ONEYEAR   CastaiInventoryV1beta1AzureReservationReservationPlan = "ONE_YEAR"
	THREEYEAR CastaiInventoryV1beta1AzureReservationReservationPlan = "THREE_YEAR"
)

// Defines values for CastaiInventoryV1beta1CommitmentStatus.
const (
	CastaiInventoryV1beta1CommitmentStatusActive   CastaiInventoryV1beta1CommitmentStatus = "Active"
	CastaiInventoryV1beta1CommitmentStatusInactive CastaiInventoryV1beta1CommitmentStatus = "Inactive"
)

// Defines values for CastaiInventoryV1beta1ExtensionType.
const (
	GPU              CastaiInventoryV1beta1ExtensionType = "GPU"
	LOCALSSD         CastaiInventoryV1beta1ExtensionType = "LOCAL_SSD"
	UNKNOWNEXTENSION CastaiInventoryV1beta1ExtensionType = "UNKNOWN_EXTENSION"
)

// Defines values for CastaiInventoryV1beta1GCPResourceCUDCUDPlan.
const (
	THIRTYSIXMONTH CastaiInventoryV1beta1GCPResourceCUDCUDPlan = "THIRTY_SIX_MONTH"
	TWELVEMONTH    CastaiInventoryV1beta1GCPResourceCUDCUDPlan = "TWELVE_MONTH"
)

// Defines values for CastaiInventoryV1beta1GPUDeviceManufacturer.
const (
	CastaiInventoryV1beta1GPUDeviceManufacturerAMD     CastaiInventoryV1beta1GPUDeviceManufacturer = "AMD"
	CastaiInventoryV1beta1GPUDeviceManufacturerNVIDIA  CastaiInventoryV1beta1GPUDeviceManufacturer = "NVIDIA"
	CastaiInventoryV1beta1GPUDeviceManufacturerUNKNOWN CastaiInventoryV1beta1GPUDeviceManufacturer = "UNKNOWN"
)

// Defines values for CastaiInventoryV1beta1StorageDriver.
const (
	CastaiInventoryV1beta1StorageDriverInvalid CastaiInventoryV1beta1StorageDriver = "invalid"
	CastaiInventoryV1beta1StorageDriverNvme    CastaiInventoryV1beta1StorageDriver = "nvme"
	CastaiInventoryV1beta1StorageDriverSata    CastaiInventoryV1beta1StorageDriver = "sata"
)

// Defines values for CastaiInventoryV1beta1StorageInfoDeviceType.
const (
	CastaiInventoryV1beta1StorageInfoDeviceTypeHdd     CastaiInventoryV1beta1StorageInfoDeviceType = "hdd"
	CastaiInventoryV1beta1StorageInfoDeviceTypeInvalid CastaiInventoryV1beta1StorageInfoDeviceType = "invalid"
	CastaiInventoryV1beta1StorageInfoDeviceTypeSsd     CastaiInventoryV1beta1StorageInfoDeviceType = "ssd"
)

// Defines values for CastaiNotificationsV1beta1Severity.
const (
	CastaiNotificationsV1beta1SeverityCRITICAL    CastaiNotificationsV1beta1Severity = "CRITICAL"
	CastaiNotificationsV1beta1SeverityERROR       CastaiNotificationsV1beta1Severity = "ERROR"
	CastaiNotificationsV1beta1SeverityINFO        CastaiNotificationsV1beta1Severity = "INFO"
	CastaiNotificationsV1beta1SeveritySUCCESS     CastaiNotificationsV1beta1Severity = "SUCCESS"
	CastaiNotificationsV1beta1SeverityUNSPECIFIED CastaiNotificationsV1beta1Severity = "UNSPECIFIED"
	CastaiNotificationsV1beta1SeverityWARNING     CastaiNotificationsV1beta1Severity = "WARNING"
)

// Defines values for CastaiPaginationV1beta1SortOrder.
const (
	CastaiPaginationV1beta1SortOrderASC  CastaiPaginationV1beta1SortOrder = "ASC"
	CastaiPaginationV1beta1SortOrderAsc  CastaiPaginationV1beta1SortOrder = "asc"
	CastaiPaginationV1beta1SortOrderDESC CastaiPaginationV1beta1SortOrder = "DESC"
	CastaiPaginationV1beta1SortOrderDesc CastaiPaginationV1beta1SortOrder = "desc"
)

// Defines values for CastaiSsoV1beta1OIDCType.
const (
	TYPEBACKCHANNEL  CastaiSsoV1beta1OIDCType = "TYPE_BACK_CHANNEL"
	TYPEFRONTCHANNEL CastaiSsoV1beta1OIDCType = "TYPE_FRONT_CHANNEL"
	TYPEUNKNOWN      CastaiSsoV1beta1OIDCType = "TYPE_UNKNOWN"
)

// Defines values for CastaiSsoV1beta1SSOConnectionStatus.
const (
	STATUSACTIVE   CastaiSsoV1beta1SSOConnectionStatus = "STATUS_ACTIVE"
	STATUSFAILED   CastaiSsoV1beta1SSOConnectionStatus = "STATUS_FAILED"
	STATUSINACTIVE CastaiSsoV1beta1SSOConnectionStatus = "STATUS_INACTIVE"
	STATUSUNKNOWN  CastaiSsoV1beta1SSOConnectionStatus = "STATUS_UNKNOWN"
)

// Defines values for ClusteractionsV1NodeStatus.
const (
	NodeStatusDELETED     ClusteractionsV1NodeStatus = "NodeStatus_DELETED"
	NodeStatusREADY       ClusteractionsV1NodeStatus = "NodeStatus_READY"
	NodeStatusUNSPECIFIED ClusteractionsV1NodeStatus = "NodeStatus_UNSPECIFIED"
)

// Defines values for ComponentsV1LogLevel.
const (
	LOGLEVELDEBUG   ComponentsV1LogLevel = "LOG_LEVEL_DEBUG"
	LOGLEVELERROR   ComponentsV1LogLevel = "LOG_LEVEL_ERROR"
	LOGLEVELFATAL   ComponentsV1LogLevel = "LOG_LEVEL_FATAL"
	LOGLEVELINFO    ComponentsV1LogLevel = "LOG_LEVEL_INFO"
	LOGLEVELUNKNOWN ComponentsV1LogLevel = "LOG_LEVEL_UNKNOWN"
	LOGLEVELWARNING ComponentsV1LogLevel = "LOG_LEVEL_WARNING"
)

// Defines values for CostreportV1beta1EgressdStatus.
const (
	CostreportV1beta1EgressdStatusActive        CostreportV1beta1EgressdStatus = "Active"
	CostreportV1beta1EgressdStatusInactive      CostreportV1beta1EgressdStatus = "Inactive"
	CostreportV1beta1EgressdStatusNotInstalled  CostreportV1beta1EgressdStatus = "NotInstalled"
	CostreportV1beta1EgressdStatusStatusUnknown CostreportV1beta1EgressdStatus = "StatusUnknown"
)

// Defines values for CostreportV1beta1FilterOperator.
const (
	CostreportV1beta1FilterOperatorAND CostreportV1beta1FilterOperator = "AND"
	CostreportV1beta1FilterOperatorOR  CostreportV1beta1FilterOperator = "OR"
)

// Defines values for CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy.
const (
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByAKS       CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "AKS"
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByCASTAI    CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "CASTAI"
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByEKS       CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "EKS"
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByGKE       CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "GKE"
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByKARPENTER CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "KARPENTER"
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByKOPS      CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "KOPS"
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByOPENSHIFT CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "OPENSHIFT"
	CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedByUNKNOWN   CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy = "UNKNOWN"
)

// Defines values for CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator.
const (
	CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperatorDoesNotExist CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator = "DoesNotExist"
	CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperatorExists       CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator = "Exists"
	CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperatorIn           CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator = "In"
	CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperatorNotIn        CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator = "NotIn"
	CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperatorUnknown      CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator = "Unknown"
)

// Defines values for CostreportV1beta1NoDataReason.
const (
	CostreportV1beta1NoDataReasonAgentOutdated    CostreportV1beta1NoDataReason = "AgentOutdated"
	CostreportV1beta1NoDataReasonClusterIsBlocked CostreportV1beta1NoDataReason = "ClusterIsBlocked"
	CostreportV1beta1NoDataReasonNoMetricsServer  CostreportV1beta1NoDataReason = "NoMetricsServer"
	CostreportV1beta1NoDataReasonUnknown          CostreportV1beta1NoDataReason = "Unknown"
)

// Defines values for ExternalclusterV1NodeType.
const (
	Master          ExternalclusterV1NodeType = "master"
	NODETYPEINVALID ExternalclusterV1NodeType = "NODE_TYPE_INVALID"
	NODETYPEMASTER  ExternalclusterV1NodeType = "NODE_TYPE_MASTER"
	NODETYPEWORKER  ExternalclusterV1NodeType = "NODE_TYPE_WORKER"
	Worker          ExternalclusterV1NodeType = "worker"
)

// Defines values for InsightsV1BestPracticesStandard.
const (
	InsightsV1BestPracticesStandardCast     InsightsV1BestPracticesStandard = "cast"
	InsightsV1BestPracticesStandardCisAks12 InsightsV1BestPracticesStandard = "cisAks12"
	InsightsV1BestPracticesStandardCisAks13 InsightsV1BestPracticesStandard = "cisAks13"
	InsightsV1BestPracticesStandardCisAks14 InsightsV1BestPracticesStandard = "cisAks14"
	InsightsV1BestPracticesStandardCisEks12 InsightsV1BestPracticesStandard = "cisEks12"
	InsightsV1BestPracticesStandardCisEks13 InsightsV1BestPracticesStandard = "cisEks13"
	InsightsV1BestPracticesStandardCisGke13 InsightsV1BestPracticesStandard = "cisGke13"
	InsightsV1BestPracticesStandardCisGke14 InsightsV1BestPracticesStandard = "cisGke14"
)

// Defines values for InsightsV1CheckClusterResourceStatus.
const (
	ResourceAffected   InsightsV1CheckClusterResourceStatus = "resource_affected"
	ResourceExcepted   InsightsV1CheckClusterResourceStatus = "resource_excepted"
	ResourceUnaffected InsightsV1CheckClusterResourceStatus = "resource_unaffected"
)

// Defines values for InsightsV1CreateTicketRequestType.
const (
	InsightsV1CreateTicketRequestTypeCheck         InsightsV1CreateTicketRequestType = "Check"
	InsightsV1CreateTicketRequestTypeImage         InsightsV1CreateTicketRequestType = "Image"
	InsightsV1CreateTicketRequestTypePackage       InsightsV1CreateTicketRequestType = "Package"
	InsightsV1CreateTicketRequestTypeUnknown       InsightsV1CreateTicketRequestType = "Unknown"
	InsightsV1CreateTicketRequestTypeVulnerability InsightsV1CreateTicketRequestType = "Vulnerability"
)

// Defines values for InsightsV1ImageScanStatus.
const (
	InsightsV1ImageScanStatusCompleted InsightsV1ImageScanStatus = "Completed"
	InsightsV1ImageScanStatusFailed    InsightsV1ImageScanStatus = "Failed"
	InsightsV1ImageScanStatusPending   InsightsV1ImageScanStatus = "Pending"
	InsightsV1ImageScanStatusUnknown   InsightsV1ImageScanStatus = "Unknown"
)

// Defines values for InsightsV1ImageStatus.
const (
	NotRunning InsightsV1ImageStatus = "NotRunning"
	Running    InsightsV1ImageStatus = "Running"
)

// Defines values for InsightsV1IntegrationType.
const (
	InsightsV1IntegrationTypeJIRA    InsightsV1IntegrationType = "JIRA"
	InsightsV1IntegrationTypeUNKNOWN InsightsV1IntegrationType = "UNKNOWN"
)

// Defines values for InsightsV1SecurityFeature.
const (
	IMAGESCANNING          InsightsV1SecurityFeature = "IMAGE_SCANNING"
	KUBEBENCH              InsightsV1SecurityFeature = "KUBE_BENCH"
	RUNTIMESECURITY        InsightsV1SecurityFeature = "RUNTIME_SECURITY"
	SECURITYFEATUREUNKNOWN InsightsV1SecurityFeature = "SECURITY_FEATURE_UNKNOWN"
)

// Defines values for InsightsV1VulnerabilitySeverity.
const (
	InsightsV1VulnerabilitySeverityAny          InsightsV1VulnerabilitySeverity = "any"
	InsightsV1VulnerabilitySeverityCritical     InsightsV1VulnerabilitySeverity = "critical"
	InsightsV1VulnerabilitySeverityHigh         InsightsV1VulnerabilitySeverity = "high"
	InsightsV1VulnerabilitySeverityLow          InsightsV1VulnerabilitySeverity = "low"
	InsightsV1VulnerabilitySeverityMedium       InsightsV1VulnerabilitySeverity = "medium"
	InsightsV1VulnerabilitySeverityNone         InsightsV1VulnerabilitySeverity = "none"
	InsightsV1VulnerabilitySeverityNotAvailable InsightsV1VulnerabilitySeverity = "notAvailable"
)

// Defines values for InventoryblacklistV1InventoryBlacklistLifecycle.
const (
	InventoryblacklistV1InventoryBlacklistLifecycleAll      InventoryblacklistV1InventoryBlacklistLifecycle = "all"
	InventoryblacklistV1InventoryBlacklistLifecycleOnDemand InventoryblacklistV1InventoryBlacklistLifecycle = "on_demand"
	InventoryblacklistV1InventoryBlacklistLifecycleSpot     InventoryblacklistV1InventoryBlacklistLifecycle = "spot"
)

// Defines values for K8sSelectorV1Operator.
const (
	DoesNotExist  K8sSelectorV1Operator = "DoesNotExist"
	DoesNotExist1 K8sSelectorV1Operator = "doesNotExist"
	Exists        K8sSelectorV1Operator = "Exists"
	Exists1       K8sSelectorV1Operator = "exists"
	Gt            K8sSelectorV1Operator = "Gt"
	Gt1           K8sSelectorV1Operator = "gt"
	IN            K8sSelectorV1Operator = "IN"
	In            K8sSelectorV1Operator = "in"
	Lt            K8sSelectorV1Operator = "Lt"
	Lt1           K8sSelectorV1Operator = "lt"
	NotIn         K8sSelectorV1Operator = "notIn"
	NotInt        K8sSelectorV1Operator = "NotInt"
)

// Defines values for NodeconfigV1AKSConfigOsDiskType.
const (
	OSDISKTYPEPREMIUMSSD  NodeconfigV1AKSConfigOsDiskType = "OS_DISK_TYPE_PREMIUM_SSD"
	OSDISKTYPESTANDARD    NodeconfigV1AKSConfigOsDiskType = "OS_DISK_TYPE_STANDARD"
	OSDISKTYPESTANDARDSSD NodeconfigV1AKSConfigOsDiskType = "OS_DISK_TYPE_STANDARD_SSD"
	OSDISKTYPEUNSPECIFIED NodeconfigV1AKSConfigOsDiskType = "OS_DISK_TYPE_UNSPECIFIED"
)

// Defines values for NodeconfigV1ContainerRuntime.
const (
	NodeconfigV1ContainerRuntimeCONTAINERD  NodeconfigV1ContainerRuntime = "CONTAINERD"
	NodeconfigV1ContainerRuntimeContainerd  NodeconfigV1ContainerRuntime = "containerd"
	NodeconfigV1ContainerRuntimeDOCKERD     NodeconfigV1ContainerRuntime = "DOCKERD"
	NodeconfigV1ContainerRuntimeDockerd     NodeconfigV1ContainerRuntime = "dockerd"
	NodeconfigV1ContainerRuntimeUNSPECIFIED NodeconfigV1ContainerRuntime = "UNSPECIFIED"
	NodeconfigV1ContainerRuntimeUnspecified NodeconfigV1ContainerRuntime = "unspecified"
)

// Defines values for NodetemplatesV1AvailableInstanceTypeOs.
const (
	NodetemplatesV1AvailableInstanceTypeOsLinux   NodetemplatesV1AvailableInstanceTypeOs = "linux"
	NodetemplatesV1AvailableInstanceTypeOsUnknown NodetemplatesV1AvailableInstanceTypeOs = "unknown"
	NodetemplatesV1AvailableInstanceTypeOsWindows NodetemplatesV1AvailableInstanceTypeOs = "windows"
)

// Defines values for NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption.
const (
	NodetemplatesV1AvailableInstanceTypeStorageOptimizedOptionAlways   NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption = "Always"
	NodetemplatesV1AvailableInstanceTypeStorageOptimizedOptionNever    NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption = "Never"
	NodetemplatesV1AvailableInstanceTypeStorageOptimizedOptionOnDemand NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption = "OnDemand"
)

// Defines values for NodetemplatesV1TaintEffect.
const (
	NoExecute  NodetemplatesV1TaintEffect = "NoExecute"
	NoSchedule NodetemplatesV1TaintEffect = "NoSchedule"
)

// Defines values for PoliciesV1EvictorStatus.
const (
	PoliciesV1EvictorStatusCompatible   PoliciesV1EvictorStatus = "Compatible"
	PoliciesV1EvictorStatusIncompatible PoliciesV1EvictorStatus = "Incompatible"
	PoliciesV1EvictorStatusMissing      PoliciesV1EvictorStatus = "Missing"
	PoliciesV1EvictorStatusUnknown      PoliciesV1EvictorStatus = "Unknown"
)

// Defines values for PoliciesV1SpotInterruptionPredictionsType.
const (
	AWSRebalanceRecommendations   PoliciesV1SpotInterruptionPredictionsType = "AWSRebalanceRecommendations"
	CASTAIInterruptionPredictions PoliciesV1SpotInterruptionPredictionsType = "CASTAIInterruptionPredictions"
)

// Defines values for RuntimeV1AnomalyStatus.
const (
	ANOMALYSTATUSACKED       RuntimeV1AnomalyStatus = "ANOMALY_STATUS_ACKED"
	ANOMALYSTATUSCLOSED      RuntimeV1AnomalyStatus = "ANOMALY_STATUS_CLOSED"
	ANOMALYSTATUSOPEN        RuntimeV1AnomalyStatus = "ANOMALY_STATUS_OPEN"
	ANOMALYSTATUSUNSPECIFIED RuntimeV1AnomalyStatus = "ANOMALY_STATUS_UNSPECIFIED"
)

// Defines values for RuntimeV1CloseReason.
const (
	RuntimeV1CloseReasonCLOSEREASONFALSEPOSITIVE RuntimeV1CloseReason = "CLOSE_REASON_FALSE_POSITIVE"
	RuntimeV1CloseReasonCLOSEREASONOTHER         RuntimeV1CloseReason = "CLOSE_REASON_OTHER"
	RuntimeV1CloseReasonCLOSEREASONRESOLVED      RuntimeV1CloseReason = "CLOSE_REASON_RESOLVED"
	RuntimeV1CloseReasonCLOSEREASONUNSPECIFIED   RuntimeV1CloseReason = "CLOSE_REASON_UNSPECIFIED"
)

// Defines values for ScheduledrebalancingV1JobStatus.
const (
	JobStatusFailed     ScheduledrebalancingV1JobStatus = "JobStatusFailed"
	JobStatusFinished   ScheduledrebalancingV1JobStatus = "JobStatusFinished"
	JobStatusInProgress ScheduledrebalancingV1JobStatus = "JobStatusInProgress"
	JobStatusPending    ScheduledrebalancingV1JobStatus = "JobStatusPending"
	JobStatusSkipped    ScheduledrebalancingV1JobStatus = "JobStatusSkipped"
)

// Defines values for WorkloadoptimizationV1ApplyType.
const (
	WorkloadoptimizationV1ApplyTypeDEFERRED  WorkloadoptimizationV1ApplyType = "DEFERRED"
	WorkloadoptimizationV1ApplyTypeIMMEDIATE WorkloadoptimizationV1ApplyType = "IMMEDIATE"
	WorkloadoptimizationV1ApplyTypeUNKNOWN   WorkloadoptimizationV1ApplyType = "UNKNOWN"
)

// Defines values for WorkloadoptimizationV1EventType.
const (
	WorkloadoptimizationV1EventTypeEVENTTYPECONFIGURATIONCHANGED  WorkloadoptimizationV1EventType = "EVENT_TYPE_CONFIGURATION_CHANGED"
	WorkloadoptimizationV1EventTypeEVENTTYPEINVALID               WorkloadoptimizationV1EventType = "EVENT_TYPE_INVALID"
	WorkloadoptimizationV1EventTypeEVENTTYPEOOMKILL               WorkloadoptimizationV1EventType = "EVENT_TYPE_OOM_KILL"
	WorkloadoptimizationV1EventTypeEVENTTYPERECOMMENDATIONAPPLIED WorkloadoptimizationV1EventType = "EVENT_TYPE_RECOMMENDATION_APPLIED"
	WorkloadoptimizationV1EventTypeEVENTTYPESURGE                 WorkloadoptimizationV1EventType = "EVENT_TYPE_SURGE"
)

// Defines values for WorkloadoptimizationV1GetAgentStatusResponseAgentStatus.
const (
	AGENTSTATUSINVALID WorkloadoptimizationV1GetAgentStatusResponseAgentStatus = "AGENT_STATUS_INVALID"
	AGENTSTATUSRUNNING WorkloadoptimizationV1GetAgentStatusResponseAgentStatus = "AGENT_STATUS_RUNNING"
	AGENTSTATUSUNKNOWN WorkloadoptimizationV1GetAgentStatusResponseAgentStatus = "AGENT_STATUS_UNKNOWN"
)

// Defines values for WorkloadoptimizationV1ManagementOption.
const (
	MANAGED   WorkloadoptimizationV1ManagementOption = "MANAGED"
	READONLY  WorkloadoptimizationV1ManagementOption = "READ_ONLY"
	UNDEFINED WorkloadoptimizationV1ManagementOption = "UNDEFINED"
)

// Defines values for WorkloadoptimizationV1ResourceConfigFunction.
const (
	WorkloadoptimizationV1ResourceConfigFunctionMAX      WorkloadoptimizationV1ResourceConfigFunction = "MAX"
	WorkloadoptimizationV1ResourceConfigFunctionQUANTILE WorkloadoptimizationV1ResourceConfigFunction = "QUANTILE"
)

// Defines values for WorkloadoptimizationV1ResourcePoliciesFunction.
const (
	WorkloadoptimizationV1ResourcePoliciesFunctionMAX      WorkloadoptimizationV1ResourcePoliciesFunction = "MAX"
	WorkloadoptimizationV1ResourcePoliciesFunctionQUANTILE WorkloadoptimizationV1ResourcePoliciesFunction = "QUANTILE"
)

// Defines values for AutoscalerAPIGetAgentScriptParamsProvider.
const (
	Aks             AutoscalerAPIGetAgentScriptParamsProvider = "aks"
	Eks             AutoscalerAPIGetAgentScriptParamsProvider = "eks"
	Gke             AutoscalerAPIGetAgentScriptParamsProvider = "gke"
	InvalidProvider AutoscalerAPIGetAgentScriptParamsProvider = "invalid_provider"
	Kops            AutoscalerAPIGetAgentScriptParamsProvider = "kops"
	Openshift       AutoscalerAPIGetAgentScriptParamsProvider = "openshift"
)

// Defines values for AutoscalerAPIGetAgentScriptParamsKopsCsp.
const (
	AutoscalerAPIGetAgentScriptParamsKopsCspAWS     AutoscalerAPIGetAgentScriptParamsKopsCsp = "AWS"
	AutoscalerAPIGetAgentScriptParamsKopsCspAZURE   AutoscalerAPIGetAgentScriptParamsKopsCsp = "AZURE"
	AutoscalerAPIGetAgentScriptParamsKopsCspAws     AutoscalerAPIGetAgentScriptParamsKopsCsp = "aws"
	AutoscalerAPIGetAgentScriptParamsKopsCspAzure   AutoscalerAPIGetAgentScriptParamsKopsCsp = "azure"
	AutoscalerAPIGetAgentScriptParamsKopsCspGCP     AutoscalerAPIGetAgentScriptParamsKopsCsp = "GCP"
	AutoscalerAPIGetAgentScriptParamsKopsCspGcp     AutoscalerAPIGetAgentScriptParamsKopsCsp = "gcp"
	AutoscalerAPIGetAgentScriptParamsKopsCspINVALID AutoscalerAPIGetAgentScriptParamsKopsCsp = "INVALID"
	AutoscalerAPIGetAgentScriptParamsKopsCspInvalid AutoscalerAPIGetAgentScriptParamsKopsCsp = "invalid"
)

// Defines values for AutoscalerAPIGetAgentScriptParamsOpenshiftCsp.
const (
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspAWS     AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "AWS"
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspAZURE   AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "AZURE"
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspAws     AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "aws"
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspAzure   AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "azure"
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspGCP     AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "GCP"
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspGcp     AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "gcp"
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspINVALID AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "INVALID"
	AutoscalerAPIGetAgentScriptParamsOpenshiftCspInvalid AutoscalerAPIGetAgentScriptParamsOpenshiftCsp = "invalid"
)

// Defines values for WorkloadOptimizationAPIListWorkloadEventsParamsType.
const (
	WorkloadOptimizationAPIListWorkloadEventsParamsTypeEVENTTYPECONFIGURATIONCHANGED  WorkloadOptimizationAPIListWorkloadEventsParamsType = "EVENT_TYPE_CONFIGURATION_CHANGED"
	WorkloadOptimizationAPIListWorkloadEventsParamsTypeEVENTTYPEINVALID               WorkloadOptimizationAPIListWorkloadEventsParamsType = "EVENT_TYPE_INVALID"
	WorkloadOptimizationAPIListWorkloadEventsParamsTypeEVENTTYPEOOMKILL               WorkloadOptimizationAPIListWorkloadEventsParamsType = "EVENT_TYPE_OOM_KILL"
	WorkloadOptimizationAPIListWorkloadEventsParamsTypeEVENTTYPERECOMMENDATIONAPPLIED WorkloadOptimizationAPIListWorkloadEventsParamsType = "EVENT_TYPE_RECOMMENDATION_APPLIED"
	WorkloadOptimizationAPIListWorkloadEventsParamsTypeEVENTTYPESURGE                 WorkloadOptimizationAPIListWorkloadEventsParamsType = "EVENT_TYPE_SURGE"
)

// Defines values for WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperator.
const (
	WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperatorAND WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperator = "AND"
	WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperatorOR  WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperator = "OR"
)

// Defines values for WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder.
const (
	WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrderASC  WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder = "ASC"
	WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrderAsc  WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder = "asc"
	WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrderDESC WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder = "DESC"
	WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrderDesc WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder = "desc"
)

// Defines values for WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder.
const (
	WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrderASC  WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder = "ASC"
	WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrderAsc  WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder = "asc"
	WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrderDESC WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder = "DESC"
	WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrderDesc WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder = "desc"
)

// Defines values for NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder.
const (
	NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrderASC  NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder = "ASC"
	NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrderAsc  NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder = "asc"
	NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrderDESC NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder = "DESC"
	NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrderDesc NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder = "desc"
)

// Defines values for NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder.
const (
	NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrderASC  NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder = "ASC"
	NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrderAsc  NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder = "asc"
	NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrderDESC NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder = "DESC"
	NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrderDesc NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder = "desc"
)

// Defines values for WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder.
const (
	WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrderASC  WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder = "ASC"
	WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrderAsc  WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder = "asc"
	WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrderDESC WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder = "DESC"
	WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrderDesc WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder = "desc"
)

// Defines values for WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperator.
const (
	WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperatorAND WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperator = "AND"
	WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperatorOR  WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperator = "OR"
)

// Defines values for WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperator.
const (
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperatorAND WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperator = "AND"
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperatorOR  WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperator = "OR"
)

// Defines values for WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder.
const (
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrderASC  WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder = "ASC"
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrderAsc  WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder = "asc"
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrderDESC WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder = "DESC"
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrderDesc WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder = "desc"
)

// Defines values for WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder.
const (
	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrderASC  WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder = "ASC"
	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrderAsc  WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder = "asc"
	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrderDESC WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder = "DESC"
	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrderDesc WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder = "desc"
)

// Defines values for AutoscalerAPIListRebalancingPlansParamsFilterStatuses.
const (
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesCreatingNodes     AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "creating_nodes"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesDeletingNodes     AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "deleting_nodes"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesDrainingNodes     AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "draining_nodes"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesError             AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "error"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesFinished          AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "finished"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesGenerated         AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "generated"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesGenerating        AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "generating"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesInvalid           AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "invalid"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesPartiallyFinished AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "partially_finished"
	AutoscalerAPIListRebalancingPlansParamsFilterStatusesPreparingNodes    AutoscalerAPIListRebalancingPlansParamsFilterStatuses = "preparing_nodes"
)

// Defines values for NotificationAPIListNotificationsParamsFilterSeverities.
const (
	NotificationAPIListNotificationsParamsFilterSeveritiesCRITICAL    NotificationAPIListNotificationsParamsFilterSeverities = "CRITICAL"
	NotificationAPIListNotificationsParamsFilterSeveritiesERROR       NotificationAPIListNotificationsParamsFilterSeverities = "ERROR"
	NotificationAPIListNotificationsParamsFilterSeveritiesINFO        NotificationAPIListNotificationsParamsFilterSeverities = "INFO"
	NotificationAPIListNotificationsParamsFilterSeveritiesSUCCESS     NotificationAPIListNotificationsParamsFilterSeverities = "SUCCESS"
	NotificationAPIListNotificationsParamsFilterSeveritiesUNSPECIFIED NotificationAPIListNotificationsParamsFilterSeverities = "UNSPECIFIED"
	NotificationAPIListNotificationsParamsFilterSeveritiesWARNING     NotificationAPIListNotificationsParamsFilterSeverities = "WARNING"
)

// Defines values for NotificationAPIListNotificationsParamsSortOrder.
const (
	NotificationAPIListNotificationsParamsSortOrderASC  NotificationAPIListNotificationsParamsSortOrder = "ASC"
	NotificationAPIListNotificationsParamsSortOrderAsc  NotificationAPIListNotificationsParamsSortOrder = "asc"
	NotificationAPIListNotificationsParamsSortOrderDESC NotificationAPIListNotificationsParamsSortOrder = "DESC"
	NotificationAPIListNotificationsParamsSortOrderDesc NotificationAPIListNotificationsParamsSortOrder = "desc"
)

// Defines values for NotificationAPIListWebhookConfigsParamsFilterSeverities.
const (
	NotificationAPIListWebhookConfigsParamsFilterSeveritiesCRITICAL    NotificationAPIListWebhookConfigsParamsFilterSeverities = "CRITICAL"
	NotificationAPIListWebhookConfigsParamsFilterSeveritiesERROR       NotificationAPIListWebhookConfigsParamsFilterSeverities = "ERROR"
	NotificationAPIListWebhookConfigsParamsFilterSeveritiesINFO        NotificationAPIListWebhookConfigsParamsFilterSeverities = "INFO"
	NotificationAPIListWebhookConfigsParamsFilterSeveritiesSUCCESS     NotificationAPIListWebhookConfigsParamsFilterSeverities = "SUCCESS"
	NotificationAPIListWebhookConfigsParamsFilterSeveritiesUNSPECIFIED NotificationAPIListWebhookConfigsParamsFilterSeverities = "UNSPECIFIED"
	NotificationAPIListWebhookConfigsParamsFilterSeveritiesWARNING     NotificationAPIListWebhookConfigsParamsFilterSeverities = "WARNING"
)

// Defines values for NotificationAPIListWebhookConfigsParamsSortOrder.
const (
	NotificationAPIListWebhookConfigsParamsSortOrderASC  NotificationAPIListWebhookConfigsParamsSortOrder = "ASC"
	NotificationAPIListWebhookConfigsParamsSortOrderAsc  NotificationAPIListWebhookConfigsParamsSortOrder = "asc"
	NotificationAPIListWebhookConfigsParamsSortOrderDESC NotificationAPIListWebhookConfigsParamsSortOrder = "DESC"
	NotificationAPIListWebhookConfigsParamsSortOrderDesc NotificationAPIListWebhookConfigsParamsSortOrder = "desc"
)

// Defines values for CommitmentsAPIImportAzureReservationsParamsBehaviour.
const (
	CommitmentsAPIImportAzureReservationsParamsBehaviourOVERWRITE CommitmentsAPIImportAzureReservationsParamsBehaviour = "OVERWRITE"
)

// Defines values for CommitmentsAPIImportGCPCommitmentsParamsBehaviour.
const (
	CommitmentsAPIImportGCPCommitmentsParamsBehaviourOVERWRITE CommitmentsAPIImportGCPCommitmentsParamsBehaviour = "OVERWRITE"
)

// Defines values for InsightsAPIGetBestPracticesReportParamsSeverityLevels.
const (
	InsightsAPIGetBestPracticesReportParamsSeverityLevelsAny          InsightsAPIGetBestPracticesReportParamsSeverityLevels = "any"
	InsightsAPIGetBestPracticesReportParamsSeverityLevelsCritical     InsightsAPIGetBestPracticesReportParamsSeverityLevels = "critical"
	InsightsAPIGetBestPracticesReportParamsSeverityLevelsHigh         InsightsAPIGetBestPracticesReportParamsSeverityLevels = "high"
	InsightsAPIGetBestPracticesReportParamsSeverityLevelsLow          InsightsAPIGetBestPracticesReportParamsSeverityLevels = "low"
	InsightsAPIGetBestPracticesReportParamsSeverityLevelsMedium       InsightsAPIGetBestPracticesReportParamsSeverityLevels = "medium"
	InsightsAPIGetBestPracticesReportParamsSeverityLevelsNone         InsightsAPIGetBestPracticesReportParamsSeverityLevels = "none"
	InsightsAPIGetBestPracticesReportParamsSeverityLevelsNotAvailable InsightsAPIGetBestPracticesReportParamsSeverityLevels = "notAvailable"
)

// Defines values for InsightsAPIGetBestPracticesReportParamsStandard.
const (
	InsightsAPIGetBestPracticesReportParamsStandardCast     InsightsAPIGetBestPracticesReportParamsStandard = "cast"
	InsightsAPIGetBestPracticesReportParamsStandardCisAks12 InsightsAPIGetBestPracticesReportParamsStandard = "cisAks12"
	InsightsAPIGetBestPracticesReportParamsStandardCisAks13 InsightsAPIGetBestPracticesReportParamsStandard = "cisAks13"
	InsightsAPIGetBestPracticesReportParamsStandardCisAks14 InsightsAPIGetBestPracticesReportParamsStandard = "cisAks14"
	InsightsAPIGetBestPracticesReportParamsStandardCisEks12 InsightsAPIGetBestPracticesReportParamsStandard = "cisEks12"
	InsightsAPIGetBestPracticesReportParamsStandardCisEks13 InsightsAPIGetBestPracticesReportParamsStandard = "cisEks13"
	InsightsAPIGetBestPracticesReportParamsStandardCisGke13 InsightsAPIGetBestPracticesReportParamsStandard = "cisGke13"
	InsightsAPIGetBestPracticesReportParamsStandardCisGke14 InsightsAPIGetBestPracticesReportParamsStandard = "cisGke14"
)

// Defines values for InsightsAPIGetBestPracticesCheckDetailsParamsStandard.
const (
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCast     InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cast"
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCisAks12 InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cisAks12"
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCisAks13 InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cisAks13"
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCisAks14 InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cisAks14"
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCisEks12 InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cisEks12"
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCisEks13 InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cisEks13"
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCisGke13 InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cisGke13"
	InsightsAPIGetBestPracticesCheckDetailsParamsStandardCisGke14 InsightsAPIGetBestPracticesCheckDetailsParamsStandard = "cisGke14"
)

// Defines values for InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel.
const (
	InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevelAny          InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel = "any"
	InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevelCritical     InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel = "critical"
	InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevelHigh         InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel = "high"
	InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevelLow          InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel = "low"
	InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevelMedium       InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel = "medium"
	InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevelNone         InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel = "none"
	InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevelNotAvailable InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel = "notAvailable"
)

// Defines values for InsightsAPIGetBestPracticesReportSummaryParamsStandard.
const (
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCast     InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cast"
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCisAks12 InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cisAks12"
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCisAks13 InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cisAks13"
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCisAks14 InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cisAks14"
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCisEks12 InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cisEks12"
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCisEks13 InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cisEks13"
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCisGke13 InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cisGke13"
	InsightsAPIGetBestPracticesReportSummaryParamsStandardCisGke14 InsightsAPIGetBestPracticesReportSummaryParamsStandard = "cisGke14"
)

// Defines values for InsightsAPIGetExceptedChecksParamsSeverityLevels.
const (
	InsightsAPIGetExceptedChecksParamsSeverityLevelsAny          InsightsAPIGetExceptedChecksParamsSeverityLevels = "any"
	InsightsAPIGetExceptedChecksParamsSeverityLevelsCritical     InsightsAPIGetExceptedChecksParamsSeverityLevels = "critical"
	InsightsAPIGetExceptedChecksParamsSeverityLevelsHigh         InsightsAPIGetExceptedChecksParamsSeverityLevels = "high"
	InsightsAPIGetExceptedChecksParamsSeverityLevelsLow          InsightsAPIGetExceptedChecksParamsSeverityLevels = "low"
	InsightsAPIGetExceptedChecksParamsSeverityLevelsMedium       InsightsAPIGetExceptedChecksParamsSeverityLevels = "medium"
	InsightsAPIGetExceptedChecksParamsSeverityLevelsNone         InsightsAPIGetExceptedChecksParamsSeverityLevels = "none"
	InsightsAPIGetExceptedChecksParamsSeverityLevelsNotAvailable InsightsAPIGetExceptedChecksParamsSeverityLevels = "notAvailable"
)

// Defines values for InsightsAPIGetExceptedChecksParamsStandard.
const (
	InsightsAPIGetExceptedChecksParamsStandardCast     InsightsAPIGetExceptedChecksParamsStandard = "cast"
	InsightsAPIGetExceptedChecksParamsStandardCisAks12 InsightsAPIGetExceptedChecksParamsStandard = "cisAks12"
	InsightsAPIGetExceptedChecksParamsStandardCisAks13 InsightsAPIGetExceptedChecksParamsStandard = "cisAks13"
	InsightsAPIGetExceptedChecksParamsStandardCisAks14 InsightsAPIGetExceptedChecksParamsStandard = "cisAks14"
	InsightsAPIGetExceptedChecksParamsStandardCisEks12 InsightsAPIGetExceptedChecksParamsStandard = "cisEks12"
	InsightsAPIGetExceptedChecksParamsStandardCisEks13 InsightsAPIGetExceptedChecksParamsStandard = "cisEks13"
	InsightsAPIGetExceptedChecksParamsStandardCisGke13 InsightsAPIGetExceptedChecksParamsStandard = "cisGke13"
	InsightsAPIGetExceptedChecksParamsStandardCisGke14 InsightsAPIGetExceptedChecksParamsStandard = "cisGke14"
)

// Defines values for InsightsAPIGetContainerImagesParamsExceptionFilter.
const (
	InsightsAPIGetContainerImagesParamsExceptionFilterActive   InsightsAPIGetContainerImagesParamsExceptionFilter = "active"
	InsightsAPIGetContainerImagesParamsExceptionFilterAll      InsightsAPIGetContainerImagesParamsExceptionFilter = "all"
	InsightsAPIGetContainerImagesParamsExceptionFilterExcepted InsightsAPIGetContainerImagesParamsExceptionFilter = "excepted"
)

// Defines values for InsightsAPIGetContainerImagePackagesParamsExceptionFilter.
const (
	InsightsAPIGetContainerImagePackagesParamsExceptionFilterActive   InsightsAPIGetContainerImagePackagesParamsExceptionFilter = "active"
	InsightsAPIGetContainerImagePackagesParamsExceptionFilterAll      InsightsAPIGetContainerImagePackagesParamsExceptionFilter = "all"
	InsightsAPIGetContainerImagePackagesParamsExceptionFilterExcepted InsightsAPIGetContainerImagePackagesParamsExceptionFilter = "excepted"
)

// Defines values for InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilter.
const (
	InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilterActive   InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilter = "active"
	InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilterAll      InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilter = "all"
	InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilterExcepted InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilter = "excepted"
)

// Defines values for InsightsAPIGetBestPracticesOverviewParamsStandard.
const (
	InsightsAPIGetBestPracticesOverviewParamsStandardCast     InsightsAPIGetBestPracticesOverviewParamsStandard = "cast"
	InsightsAPIGetBestPracticesOverviewParamsStandardCisAks12 InsightsAPIGetBestPracticesOverviewParamsStandard = "cisAks12"
	InsightsAPIGetBestPracticesOverviewParamsStandardCisAks13 InsightsAPIGetBestPracticesOverviewParamsStandard = "cisAks13"
	InsightsAPIGetBestPracticesOverviewParamsStandardCisAks14 InsightsAPIGetBestPracticesOverviewParamsStandard = "cisAks14"
	InsightsAPIGetBestPracticesOverviewParamsStandardCisEks12 InsightsAPIGetBestPracticesOverviewParamsStandard = "cisEks12"
	InsightsAPIGetBestPracticesOverviewParamsStandardCisEks13 InsightsAPIGetBestPracticesOverviewParamsStandard = "cisEks13"
	InsightsAPIGetBestPracticesOverviewParamsStandardCisGke13 InsightsAPIGetBestPracticesOverviewParamsStandard = "cisGke13"
	InsightsAPIGetBestPracticesOverviewParamsStandardCisGke14 InsightsAPIGetBestPracticesOverviewParamsStandard = "cisGke14"
)

// Defines values for InsightsAPIGetResourceDetailsParamsStandard.
const (
	Cast     InsightsAPIGetResourceDetailsParamsStandard = "cast"
	CisAks12 InsightsAPIGetResourceDetailsParamsStandard = "cisAks12"
	CisAks13 InsightsAPIGetResourceDetailsParamsStandard = "cisAks13"
	CisAks14 InsightsAPIGetResourceDetailsParamsStandard = "cisAks14"
	CisEks12 InsightsAPIGetResourceDetailsParamsStandard = "cisEks12"
	CisEks13 InsightsAPIGetResourceDetailsParamsStandard = "cisEks13"
	CisGke13 InsightsAPIGetResourceDetailsParamsStandard = "cisGke13"
	CisGke14 InsightsAPIGetResourceDetailsParamsStandard = "cisGke14"
)

// Defines values for RuntimeSecurityAPIGetAnomaliesParamsStatus.
const (
	ANOMALYSTATUSFILTERCLOSED      RuntimeSecurityAPIGetAnomaliesParamsStatus = "ANOMALY_STATUS_FILTER_CLOSED"
	ANOMALYSTATUSFILTEROPEN        RuntimeSecurityAPIGetAnomaliesParamsStatus = "ANOMALY_STATUS_FILTER_OPEN"
	ANOMALYSTATUSFILTERUNACKED     RuntimeSecurityAPIGetAnomaliesParamsStatus = "ANOMALY_STATUS_FILTER_UNACKED"
	ANOMALYSTATUSFILTERUNSPECIFIED RuntimeSecurityAPIGetAnomaliesParamsStatus = "ANOMALY_STATUS_FILTER_UNSPECIFIED"
)

// Defines values for RuntimeSecurityAPIGetAnomaliesParamsSortOrder.
const (
	ASC  RuntimeSecurityAPIGetAnomaliesParamsSortOrder = "ASC"
	Asc  RuntimeSecurityAPIGetAnomaliesParamsSortOrder = "asc"
	DESC RuntimeSecurityAPIGetAnomaliesParamsSortOrder = "DESC"
	Desc RuntimeSecurityAPIGetAnomaliesParamsSortOrder = "desc"
)

// Defines values for RuntimeSecurityAPICloseAnomaliesParamsReason.
const (
	RuntimeSecurityAPICloseAnomaliesParamsReasonCLOSEREASONFALSEPOSITIVE RuntimeSecurityAPICloseAnomaliesParamsReason = "CLOSE_REASON_FALSE_POSITIVE"
	RuntimeSecurityAPICloseAnomaliesParamsReasonCLOSEREASONOTHER         RuntimeSecurityAPICloseAnomaliesParamsReason = "CLOSE_REASON_OTHER"
	RuntimeSecurityAPICloseAnomaliesParamsReasonCLOSEREASONRESOLVED      RuntimeSecurityAPICloseAnomaliesParamsReason = "CLOSE_REASON_RESOLVED"
	RuntimeSecurityAPICloseAnomaliesParamsReasonCLOSEREASONUNSPECIFIED   RuntimeSecurityAPICloseAnomaliesParamsReason = "CLOSE_REASON_UNSPECIFIED"
)

// Defines values for WorkloadOptimizationAPIListWorkloadEvents2ParamsType.
const (
	EVENTTYPECONFIGURATIONCHANGED  WorkloadOptimizationAPIListWorkloadEvents2ParamsType = "EVENT_TYPE_CONFIGURATION_CHANGED"
	EVENTTYPEINVALID               WorkloadOptimizationAPIListWorkloadEvents2ParamsType = "EVENT_TYPE_INVALID"
	EVENTTYPEOOMKILL               WorkloadOptimizationAPIListWorkloadEvents2ParamsType = "EVENT_TYPE_OOM_KILL"
	EVENTTYPERECOMMENDATIONAPPLIED WorkloadOptimizationAPIListWorkloadEvents2ParamsType = "EVENT_TYPE_RECOMMENDATION_APPLIED"
	EVENTTYPESURGE                 WorkloadOptimizationAPIListWorkloadEvents2ParamsType = "EVENT_TYPE_SURGE"
)

// AutoscalerAPIGenerateRebalancingPlanRequest Defines the cluster rebalance request.
type AutoscalerAPIGenerateRebalancingPlanRequest struct {
	// EvictGracefully Defines whether the nodes that failed to get drained until a predefined timeout, will be kept with a
	// rebalancing.cast.ai/status=drain-failed annotation instead of forcefully drained.
	EvictGracefully *bool `json:"evictGracefully"`

	// ExecutionConditions Defines the conditions which must be met in order to fully execute the plan.
	ExecutionConditions   *CastaiAutoscalerV1beta1ExecutionConditions `json:"executionConditions,omitempty"`
	KeepDrainTimeoutNodes *bool                                       `json:"keepDrainTimeoutNodes"`

	// MinNodes Minimum number of nodes that the cluster should have after rebalancing is done.
	MinNodes *int32 `json:"minNodes,omitempty"`

	// RebalancingNodes Subset of nodes to rebalance. If empty, it is considered to include all nodes (full rebalancing).
	RebalancingNodes *[]CastaiAutoscalerV1beta1RebalancingNode `json:"rebalancingNodes,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// FieldViolations in case the error is related to specific field, this list will contain
	FieldViolations []FieldViolation `json:"fieldViolations"`
	Message         string           `json:"message"`
}

// FieldViolation defines model for FieldViolation.
type FieldViolation struct {
	Description string `json:"description"`
	Field       string `json:"field"`
}

// HostedPage chargeBee hosted page object.
type HostedPage struct {
	// CreatedAt Indicates when this hosted page url is generated.
	CreatedAt int `json:"created_at"`

	// Embed If true then hosted page formatted to be shown in iframe. If false, it is formatted to be shown as a separate page.
	Embed bool `json:"embed"`

	// ExpiresAt Indicates when this hosted page url will expire. After this, the hosted page cannot be accessed.
	ExpiresAt int `json:"expires_at"`

	// Id Unique identifier generated for each hosted page requested.
	Id string `json:"id"`

	// State Indicating the current state of the hosted page resource.
	State string `json:"state"`

	// Type Type of the requested hosted page.
	Type string `json:"type"`

	// Url Unique URL for the hosted page that will be included in your website.
	Url string `json:"url"`
}

// InsightsAPIConfigureClusterSecuritySettingsRequest defines model for InsightsAPI_ConfigureClusterSecuritySettings_request.
type InsightsAPIConfigureClusterSecuritySettingsRequest struct {
	Features *[]InsightsV1SecurityFeature `json:"features,omitempty"`
}

// InsightsAPICreateTicketRequest defines model for InsightsAPI_CreateTicket_request.
type InsightsAPICreateTicketRequest struct {
	ConsoleUrl  string `json:"consoleUrl"`
	Description string `json:"description"`
	Summary     string `json:"summary"`

	// Type Type of the item in the Cast console.
	Type    InsightsV1CreateTicketRequestType `json:"type"`
	TypeIds []string                          `json:"typeIds"`
}

// InsightsAPIEnforceCheckPolicyRequest defines model for InsightsAPI_EnforceCheckPolicy_request.
type InsightsAPIEnforceCheckPolicyRequest struct {
	ClusterIds *[]string `json:"clusterIds,omitempty"`
}

// InsightsAPIGetCheckResourcesRequest defines model for InsightsAPI_GetCheckResources_request.
type InsightsAPIGetCheckResourcesRequest struct {
	ClusterIds *[]string `json:"clusterIds,omitempty"`
	Namespaces *[]string `json:"namespaces,omitempty"`

	// Page Page defines how many and which fields should be returned.
	Page          *CastaiPaginationV1beta1Page `json:"page,omitempty"`
	ResourceKinds *[]string                    `json:"resourceKinds,omitempty"`
	ResourceName  *string                      `json:"resourceName"`
	Sort          *CastaiPaginationV1beta1Sort `json:"sort,omitempty"`

	// Standard Standard in which check should be returned.
	//
	//  - cast: default standard
	//  - cisAks12: cis aks 12
	//  - cisEks12: cis eks 12
	//  - cisGke13: cis gke 13
	//  - cisAks13: cis aks 13
	//  - cisEks13: cis eks 13
	//  - cisGke14: cis gke 14
	//  - cisAks14: cis aks 14
	Standard *InsightsV1BestPracticesStandard `json:"standard,omitempty"`

	// Status - resource_affected: Resource is affected. It fails this check.
	//  - resource_excepted: Resource is excepted. It failed this check, but there is a matching exception.
	//  - resource_unaffected: Resource is unaffected. It passes this check.
	Status *InsightsV1CheckClusterResourceStatus `json:"status,omitempty"`
}

// InsightsAPIPostAgentTelemetryRequest defines model for InsightsAPI_PostAgentTelemetry_request.
type InsightsAPIPostAgentTelemetryRequest struct {
	InitialSync       *bool `json:"initialSync,omitempty"`
	PolicyEnforcement *bool `json:"policyEnforcement,omitempty"`
}

// Plan Specifies details of a subscription plan.
type Plan struct {
	// Id plan id.
	Id string `json:"id"`

	// Name plan name.
	Name string `json:"name"`
}

// PortalSession chargeBee portal session object.
type PortalSession struct {
	// AccessUrl Unique URL for accessing the customer portal. Once accessed, this cannot be reused.
	AccessUrl string `json:"access_url"`

	// CreatedAt Timestamp indicating when this portal session was generated.
	CreatedAt int `json:"created_at"`

	// CustomerId Identifier of the customer.
	CustomerId string `json:"customer_id"`

	// ExpiresAt Timestamp indicating when the access URL will expire. Once expired, the URL cannot be used to login into the portal.
	ExpiresAt int `json:"expires_at"`

	// Id Unique identifier for the portal session.
	Id string `json:"id"`

	// Object Response object type.
	Object string `json:"object"`

	// Status Indicates the current status of the portal session.
	Status string `json:"status"`

	// Token Unique pre-authenticated portal session token to access customer portal directly.
	Token string `json:"token"`
}

// RequestToSubmitAlgorithmStats defines model for Request_to_submit_algorithm_stats.
type RequestToSubmitAlgorithmStats struct {
	AlgorithmStats *[]CastaiAlgorithmstatsV1beta1AlgorithmStats `json:"algorithmStats,omitempty"`
	CreatedAt      *time.Time                                   `json:"createdAt,omitempty"`
	NodeStats      *[]CastaiAlgorithmstatsV1beta1NodeStats      `json:"nodeStats,omitempty"`
	PricingModel   *CastaiAlgorithmstatsV1beta1PricingModel     `json:"pricingModel,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	// BillingPeriod Defines billing frequency.
	BillingPeriod *SubscriptionBillingPeriod `json:"billingPeriod,omitempty"`

	// CurrentTermEnd End of the current billing period of the subscription. Subscription is renewed immediately after this. UTC time in RFC3339 format.
	CurrentTermEnd *time.Time `json:"currentTermEnd,omitempty"`

	// CurrentTermStart Start of the current billing period of the subscription. UTC time in RFC3339 format.
	CurrentTermStart *time.Time `json:"currentTermStart,omitempty"`

	// Id Subscription id.
	Id string `json:"id"`

	// PaymentSourceAvailable is payment source setup for the subscription.
	PaymentSourceAvailable bool `json:"paymentSourceAvailable"`

	// Plan Specifies details of a subscription plan.
	Plan Plan `json:"plan"`

	// Status Current state of the subscription.
	Status SubscriptionStatus `json:"status"`

	// TrialEnd End of the trial period for the subscription. UTC time in RFC3339 format.
	TrialEnd *time.Time `json:"trialEnd,omitempty"`
}

// SubscriptionBillingPeriod Defines billing frequency.
type SubscriptionBillingPeriod string

// SubscriptionStatus Current state of the subscription.
type SubscriptionStatus string

// UserSession defines model for UserSession.
type UserSession struct {
	// Email corresponds to Auth0 JWT claim
	Email string `json:"email"`

	// Name full name of logged-in user, e.g. "John Doe". Managed by Auth0 and directly taken from login JWT claim "name".
	Name string `json:"name"`

	// Nickname corresponds to Auth0 JWT claim
	Nickname string `json:"nickname"`

	// Picture corresponds to Auth0 JWT claim
	Picture string `json:"picture"`

	// UserHash user identity verification - salted SHA256 hash of user ID. For use with Intercom identity verification (see https://www.intercom.com/help/en/articles/183-enable-identity-verification-for-web-and-mobile)
	UserHash string `json:"userHash"`

	// UserId user id of logged in user.
	UserId string `json:"userId"`
}

// UsersAPIUpdateOrganizationUserRequest defines model for UsersAPI_UpdateOrganizationUser_request.
type UsersAPIUpdateOrganizationUserRequest struct {
	Role *string `json:"role,omitempty"`
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest defines model for WorkloadOptimizationAPI_AssignScalingPolicyWorkloads_request.
type WorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest struct {
	WorkloadIds *[]string `json:"workloadIds,omitempty"`
}

// BillingV1ClusterMetadata defines model for billing.v1.ClusterMetadata.
type BillingV1ClusterMetadata struct {
	// Id The cluster id.
	Id *string `json:"id,omitempty"`

	// Name The cluster name.
	Name *string `json:"name,omitempty"`

	// ProviderNamespaceId The project the cluster belongs to.
	ProviderNamespaceId *string `json:"providerNamespaceId,omitempty"`

	// ProviderType The cloud provider.
	ProviderType *string `json:"providerType,omitempty"`
}

// BillingV1ClusterUsage ClusterUsage represents the usage of a cluster.
type BillingV1ClusterUsage struct {
	Cluster *BillingV1ClusterMetadata `json:"cluster,omitempty"`

	// CumulativeBillableCpus Cumulative billable cpu usage.
	CumulativeBillableCpus *float64 `json:"cumulativeBillableCpus,omitempty"`

	// CumulativeCpuHours Cumulative cpu hours usage.
	CumulativeCpuHours *float64 `json:"cumulativeCpuHours,omitempty"`

	// DailyUsages The usage of the cluster.
	DailyUsages *[]BillingV1DailyUsage `json:"dailyUsages,omitempty"`

	// ForecastedCumulativeBillableCpus Forecasted cumulative billable cpu usage.
	ForecastedCumulativeBillableCpus *float64 `json:"forecastedCumulativeBillableCpus,omitempty"`

	// ForecastedCumulativeCpuHours Forecasted cumulative cpu hours usage.
	ForecastedCumulativeCpuHours *float64 `json:"forecastedCumulativeCpuHours,omitempty"`
}

// BillingV1DailyUsage DailyUsage defines resources usage for a given day.
type BillingV1DailyUsage struct {
	// BillableCpus Average count of CPU used in the given day.
	BillableCpus *float64 `json:"billableCpus,omitempty"`

	// CpuHours Average hour usage in the given day.
	CpuHours *float64 `json:"cpuHours,omitempty"`

	// Day The day of usage.
	Day *time.Time `json:"day,omitempty"`

	// MovingAverageBillableCpus TODO maybe we can drop this fields because we now have 10 min interval data.
	// Last 7 days moving average of billable CPU usage.
	MovingAverageBillableCpus *float64 `json:"movingAverageBillableCpus,omitempty"`

	// MovingAverageCpuHours TODO maybe we can drop this fields because we now have 10 min interval data.
	// Last 7 days moving average of CPU hours usage.
	MovingAverageCpuHours *float64 `json:"movingAverageCpuHours,omitempty"`
}

// BillingV1GetUsageReportResponse GetUsageReportResponse is the response for GetUsageReport.
type BillingV1GetUsageReportResponse struct {
	// Clusters UsageDetails is the details of the usage for the period aggregated per cluster.
	Clusters *[]BillingV1ClusterUsage `json:"clusters,omitempty"`

	// Summary UsageSummary represents the summary of the usage for the given period.
	Summary *BillingV1UsageSummary `json:"summary,omitempty"`
}

// BillingV1UsageSummary UsageSummary represents the summary of the usage for the given period.
type BillingV1UsageSummary struct {
	// AverageBillableCpus Last 3 months average billable CPU usage.
	AverageBillableCpus *float64 `json:"averageBillableCpus,omitempty"`

	// BillableCpus billable CPU usage.
	BillableCpus *float64 `json:"billableCpus,omitempty"`

	// ForecastedBillableCpus Forecasted billable CPU usage.
	ForecastedBillableCpus *float64 `json:"forecastedBillableCpus,omitempty"`
}

// CastaiAlgorithmstatsV1beta1AlgorithmStats defines model for castai.algorithmstats.v1beta1.AlgorithmStats.
type CastaiAlgorithmstatsV1beta1AlgorithmStats struct {
	AlgorithmId *string   `json:"algorithmId,omitempty"`
	IsActive    *bool     `json:"isActive,omitempty"`
	PickedNodes *[]string `json:"pickedNodes,omitempty"`
	SortedNodes *[]string `json:"sortedNodes,omitempty"`
}

// CastaiAlgorithmstatsV1beta1NodeStats defines model for castai.algorithmstats.v1beta1.NodeStats.
type CastaiAlgorithmstatsV1beta1NodeStats struct {
	CpuUtilization       *float32                                       `json:"cpuUtilization,omitempty"`
	DistributedPodsCount *int32                                         `json:"distributedPodsCount,omitempty"`
	InstanceType         *string                                        `json:"instanceType,omitempty"`
	LifeCycle            *CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle `json:"lifeCycle,omitempty"`
	MemoryUtilization    *float32                                       `json:"memoryUtilization,omitempty"`
	NodeId               *string                                        `json:"nodeId"`
	NodeName             *string                                        `json:"nodeName,omitempty"`
	Os                   *string                                        `json:"os,omitempty"`
}

// CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle defines model for castai.algorithmstats.v1beta1.NodeStats.LifeCycle.
type CastaiAlgorithmstatsV1beta1NodeStatsLifeCycle string

// CastaiAlgorithmstatsV1beta1PricingModel defines model for castai.algorithmstats.v1beta1.PricingModel.
type CastaiAlgorithmstatsV1beta1PricingModel struct {
	BaseCpuCost  *float32 `json:"baseCpuCost,omitempty"`
	BaseMemCost  *float32 `json:"baseMemCost,omitempty"`
	SpotDiscount *float32 `json:"spotDiscount,omitempty"`
}

// CastaiAlgorithmstatsV1beta1SubmitResponse defines model for castai.algorithmstats.v1beta1.SubmitResponse.
type CastaiAlgorithmstatsV1beta1SubmitResponse = map[string]interface{}

// CastaiAuditV1beta1AuditEntry AuditEntry is audit entry.
type CastaiAuditV1beta1AuditEntry struct {
	Event     *map[string]interface{} `json:"event,omitempty"`
	EventType *string                 `json:"eventType,omitempty"`
	Id        *string                 `json:"id,omitempty"`

	// InitiatedBy InitiatedBy describes change initiator.
	InitiatedBy *CastaiAuditV1beta1InitiatedBy `json:"initiatedBy,omitempty"`
	Labels      *map[string]string             `json:"labels,omitempty"`
	Time        *time.Time                     `json:"time,omitempty"`
}

// CastaiAuditV1beta1InitiatedBy InitiatedBy describes change initiator.
type CastaiAuditV1beta1InitiatedBy struct {
	Email *string `json:"email,omitempty"`
	Id    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// CastaiAuditV1beta1ListAuditEntriesResponse ListAuditEntriesResponse defines audit entries response.
type CastaiAuditV1beta1ListAuditEntriesResponse struct {
	Count *int32                          `json:"count,omitempty"`
	Items *[]CastaiAuditV1beta1AuditEntry `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// PreviousCursor previous_cursor is a token that may be used to retrieve items from the previous logical page. If empty - there were no previous page provided.
	PreviousCursor *string `json:"previousCursor,omitempty"`
}

// CastaiAuthtokenV1beta1AuthToken Auth token used to authenticate via api.
type CastaiAuthtokenV1beta1AuthToken struct {
	// Active (read only) Indicates whether the token is active.
	Active *bool `json:"active,omitempty"`

	// CreatedAt (read only) Time when the token was created (unix timestamp in nanoseconds).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CreatedBy created_by is used to link this token to a user who created it.
	CreatedBy *string `json:"createdBy"`

	// Id (read only) ID of the token.
	Id *string `json:"id,omitempty"`

	// LastUsedAt (read only) Time when this token was last used (unix timestamp in nanoseconds).
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// Name (required) User provided name of the token.
	Name string `json:"name"`

	// Readonly whether token has readonly permissions.
	Readonly bool `json:"readonly"`

	// ServiceAccountId service_account_id is used to link this token to a service account.
	ServiceAccountId *string `json:"serviceAccountId"`

	// Token (read only, visible once on creation) actual token used to authenticate via api.
	Token *string `json:"token"`
}

// CastaiAuthtokenV1beta1AuthTokenUpdate AuthTokenUpdate is used to update an existing auth token.
type CastaiAuthtokenV1beta1AuthTokenUpdate struct {
	Active *bool `json:"active,omitempty"`
}

// CastaiAuthtokenV1beta1DeleteAuthTokenResponse defines model for castai.authtoken.v1beta1.DeleteAuthTokenResponse.
type CastaiAuthtokenV1beta1DeleteAuthTokenResponse = map[string]interface{}

// CastaiAuthtokenV1beta1ListAuthTokensResponse defines model for castai.authtoken.v1beta1.ListAuthTokensResponse.
type CastaiAuthtokenV1beta1ListAuthTokensResponse struct {
	Items *[]CastaiAuthtokenV1beta1AuthToken `json:"items,omitempty"`
}

// CastaiAutoscalerV1beta1AWSNodeTemplateMigrationIntent defines model for castai.autoscaler.v1beta1.AWSNodeTemplateMigrationIntent.
type CastaiAutoscalerV1beta1AWSNodeTemplateMigrationIntent struct {
	// CanMigrate Indicates whether the AWSNodeTemplate can be migrated.
	CanMigrate *bool `json:"canMigrate,omitempty"`

	// CastaiNodeConfigurationName The name given to the CAST AI Node Configuration after migration.
	CastaiNodeConfigurationName *string `json:"castaiNodeConfigurationName,omitempty"`

	// Error Error describing why AWSNodeTemplate migration cannot be performed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why AWSNodeTemplate migration cannot be performed or won't be performed fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter AWSNodeTemplate name.
	Name *string `json:"name,omitempty"`

	// Valid Indicates whether AWSNodeTemplate migration intent can be executed.
	// Deprecated: Use can_migrate instead.
	Valid *bool `json:"valid,omitempty"`
}

// CastaiAutoscalerV1beta1AWSNodeTemplateMigrationResult defines model for castai.autoscaler.v1beta1.AWSNodeTemplateMigrationResult.
type CastaiAutoscalerV1beta1AWSNodeTemplateMigrationResult struct {
	// CastaiNodeConfigurationId The id of the CAST AI Node Configuration.
	CastaiNodeConfigurationId *string `json:"castaiNodeConfigurationId,omitempty"`

	// CastaiNodeConfigurationName The name of the CAST AI Node Configuration.
	CastaiNodeConfigurationName *string `json:"castaiNodeConfigurationName,omitempty"`

	// Error Error describing why AWSNodeTemplate migration failed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why AWSNodeTemplate migration failed or couldn't complete fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter AWSNodeTemplate name.
	Name *string `json:"name,omitempty"`

	// Success Indicates whether AWSNodeTemplate migration was successful.
	Success *bool `json:"success,omitempty"`
}

// CastaiAutoscalerV1beta1EC2NodeClassMigrationIntent defines model for castai.autoscaler.v1beta1.EC2NodeClassMigrationIntent.
type CastaiAutoscalerV1beta1EC2NodeClassMigrationIntent struct {
	// CanMigrate Indicates whether the EC2NodeClass can be migrated.
	CanMigrate *bool `json:"canMigrate,omitempty"`

	// CastaiNodeConfigurationName The name given to the CAST AI Node Configuration after migration.
	CastaiNodeConfigurationName *string `json:"castaiNodeConfigurationName,omitempty"`

	// Error Error describing why EC2NodeClass migration cannot be performed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why EC2NodeClass migration cannot be performed or won't be performed fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter EC2NodeClass name.
	Name *string `json:"name,omitempty"`

	// Valid Indicates whether EC2NodeClass migration intent can be executed.
	// Deprecated: Use can_migrate instead.
	Valid *bool `json:"valid,omitempty"`
}

// CastaiAutoscalerV1beta1EC2NodeClassMigrationResult defines model for castai.autoscaler.v1beta1.EC2NodeClassMigrationResult.
type CastaiAutoscalerV1beta1EC2NodeClassMigrationResult struct {
	// CastaiNodeConfigurationId The id of the CAST AI Node Configuration.
	CastaiNodeConfigurationId *string `json:"castaiNodeConfigurationId,omitempty"`

	// CastaiNodeConfigurationName The name of the CAST AI Node Configuration.
	CastaiNodeConfigurationName *string `json:"castaiNodeConfigurationName,omitempty"`

	// Error Error describing why EC2NodeClass migration failed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why EC2NodeClass migration failed or couldn't complete fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter EC2NodeClass name.
	Name *string `json:"name,omitempty"`

	// Success Indicates whether EC2NodeClass migration was successful.
	Success *bool `json:"success,omitempty"`
}

// CastaiAutoscalerV1beta1ExecutionConditions Defines the conditions which must be met in order to fully execute the plan.
type CastaiAutoscalerV1beta1ExecutionConditions struct {
	// AchievedSavingsPercentage Identifies the minimum percentage of predicted savings that should be achieved.
	// The rebalancing plan will not proceed after creating the nodes if the achieved savings percentage
	// is not achieved.
	// This field's value will not be considered if the initially predicted savings are negative.
	AchievedSavingsPercentage *int32 `json:"achievedSavingsPercentage,omitempty"`
	Enabled                   *bool  `json:"enabled,omitempty"`
}

// CastaiAutoscalerV1beta1GenerateRebalancingPlanResponse Defines the cluster rebalance response.
type CastaiAutoscalerV1beta1GenerateRebalancingPlanResponse struct {
	// RebalancingPlanId ID of the rebalancing plan.
	RebalancingPlanId *string `json:"rebalancingPlanId,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterSettingsResponse Defines the cluster settings response.
type CastaiAutoscalerV1beta1GetClusterSettingsResponse struct {
	// AgentVersion Return cluster agent version.
	AgentVersion *string `json:"agentVersion,omitempty"`

	// Arm64Supported Is ARM64 supported.
	Arm64Supported bool `json:"arm64Supported"`

	// EnableDefaultNodeTemplate Is default node template enabled.
	EnableDefaultNodeTemplate bool `json:"enableDefaultNodeTemplate"`

	// EvictorMaxTargetNodes Evictor maximum target nodes.
	EvictorMaxTargetNodes *int32 `json:"evictorMaxTargetNodes"`

	// EvictorVersion Desired cluster evictor version.
	EvictorVersion string `json:"evictorVersion"`

	// IpThresholdSubnetSpread The threshold for minimal number of available IPs in a subnet to be considered for subnet spread.
	IpThresholdSubnetSpread *int32 `json:"ipThresholdSubnetSpread"`

	// KarpenterInstalled Indicates whether Karpenter is installed in the cluster.
	KarpenterInstalled bool `json:"karpenterInstalled"`

	// KarpenterVersion The version of Karpenter installed in the cluster. May be empty if Karpenter is not installed.
	KarpenterVersion *string `json:"karpenterVersion"`

	// PriceThresholdZoneSpread Price threshold zone spread.
	PriceThresholdZoneSpread *float64 `json:"priceThresholdZoneSpread"`

	// ReservationsEnabled Is reservations support enabled.
	ReservationsEnabled bool `json:"reservationsEnabled"`

	// WindowsAutoscalingEnabled Is autoscaling of Windows nodes enabled.
	WindowsAutoscalingEnabled *bool `json:"windowsAutoscalingEnabled,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponse Defines the cluster workloads response.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponse struct {
	// ClusterId ID of the cluster that is being rebalanced.
	ClusterId *string `json:"clusterId,omitempty"`

	// Workloads A list of workloads.
	Workloads *[]CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkload `json:"workloads,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkload Defines a cluster workload.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkload struct {
	// CostImpact Defines the cost impact of rebalancing a workload.
	CostImpact *CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadCostImpact `json:"costImpact,omitempty"`

	// Issues A list of workload issues.
	Issues *[]CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadIssue `json:"issues,omitempty"`

	// MemoryMib Total memory capacity of this workload in MiBs.
	MemoryMib *int32 `json:"memoryMib,omitempty"`

	// MilliCpu Total milli CPU capacity of this workload.
	MilliCpu *int32 `json:"milliCpu,omitempty"`

	// Name Workload name.
	Name *string `json:"name,omitempty"`

	// Namespace Workload namespace.
	Namespace *string `json:"namespace,omitempty"`

	// Nodes Nodes used by this workload.
	Nodes *[]CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNode `json:"nodes,omitempty"`

	// Replicas Replicas count.
	Replicas *int32 `json:"replicas,omitempty"`

	// Resource Kubernetes resource name.
	Resource *string                                                                   `json:"resource,omitempty"`
	Status   *CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadWorkloadStatus `json:"status,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadCostImpact Defines the cost impact of rebalancing a workload.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadCostImpact struct {
	// Level Cost impact level.
	//
	// * `low` - low cost impact.
	// * `medium` - medium cost impact.
	// * `high` - high cost impact.
	Level *string `json:"level,omitempty"`

	// Value Numeric cost impact value.
	Value *int32 `json:"value,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadIssue Defines the workload rebalancing issue.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadIssue struct {
	Description *string `json:"description,omitempty"`

	// Kind Issue kind.
	Kind *string `json:"kind,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNode Defines a workload node.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNode struct {
	// Id Node id.
	Id *string `json:"id,omitempty"`

	// Name Node name.
	Name *string `json:"name,omitempty"`

	// Specs Defines node specifications.
	Specs *CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeSpecifications `json:"specs,omitempty"`

	// Status Defines the migration status.
	Status *CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNodeStatus `json:"status,omitempty"`

	// TotalPods Pods count in node.
	TotalPods *int32 `json:"totalPods,omitempty"`

	// TotalProblematicPods Problematic pods count in node.
	TotalProblematicPods *int32 `json:"totalProblematicPods,omitempty"`

	// WorkloadReplicas How many of this workload replicas exist on this particular node.
	WorkloadReplicas *int32 `json:"workloadReplicas,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNodeStatus Defines the migration status.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNodeStatus struct {
	// MigrationStatus Migration status.
	//
	// * `ready` - node is ready to be rebalanced.
	// * `not-ready` - node is not ready to be rebalanced.
	MigrationStatus *string `json:"migrationStatus,omitempty"`

	// Reason Defines the reason for the node to be considered as not ready.
	Reason *CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason `json:"reason,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason Defines the reason for the node to be considered as not ready.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeNotReadyStatusReason string

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeSpecifications Defines node specifications.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadNodeSpecifications struct {
	// InstanceType Instance type of this node.
	InstanceType *string `json:"instanceType,omitempty"`

	// MemoryMib Total memory capacity of this node in MiBs.
	MemoryMib *int32 `json:"memoryMib,omitempty"`

	// MilliCpu Total milli CPU capacity of this node.
	MilliCpu *int32 `json:"milliCpu,omitempty"`
}

// CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadWorkloadStatus defines model for castai.autoscaler.v1beta1.GetClusterWorkloadsResponse.Workload.WorkloadStatus.
type CastaiAutoscalerV1beta1GetClusterWorkloadsResponseWorkloadWorkloadStatus struct {
	// MigrationStatus * `ready` - the workload can be rebalanced.
	// * `not-ready` - the workload cannot be rebalanced.
	MigrationStatus *string `json:"migrationStatus,omitempty"`
}

// CastaiAutoscalerV1beta1GetKarpenterMigrationIntentResponse defines model for castai.autoscaler.v1beta1.GetKarpenterMigrationIntentResponse.
type CastaiAutoscalerV1beta1GetKarpenterMigrationIntentResponse struct {
	AwsNodeTemplates *[]CastaiAutoscalerV1beta1AWSNodeTemplateMigrationIntent `json:"awsNodeTemplates,omitempty"`
	Ec2NodeClasses   *[]CastaiAutoscalerV1beta1EC2NodeClassMigrationIntent    `json:"ec2NodeClasses,omitempty"`
	NodePools        *[]CastaiAutoscalerV1beta1NodePoolMigrationIntent        `json:"nodePools,omitempty"`
	Provisioners     *[]CastaiAutoscalerV1beta1ProvisionerMigrationIntent     `json:"provisioners,omitempty"`
}

// CastaiAutoscalerV1beta1GetProblematicNodesResponse Defines the requests for getting problematic nodes for a specific cluster.
type CastaiAutoscalerV1beta1GetProblematicNodesResponse struct {
	// ClusterId The id of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// HasProblems Identifies whether cluster contains any problems.
	HasProblems *bool `json:"hasProblems,omitempty"`

	// Nodes Problematic nodes.
	Nodes *[]CastaiAutoscalerV1beta1GetProblematicNodesResponseNode `json:"nodes,omitempty"`
}

// CastaiAutoscalerV1beta1GetProblematicNodesResponseNode Defines a problematic node.
type CastaiAutoscalerV1beta1GetProblematicNodesResponseNode struct {
	// Name Name of the node.
	Name *string `json:"name,omitempty"`

	// NodeId ID of the node.
	NodeId *string `json:"nodeId,omitempty"`

	// Problems List of controller problems.
	Problems *[]string `json:"problems,omitempty"`
}

// CastaiAutoscalerV1beta1GetProblematicWorkloadsResponse Defines the requests for getting problematic workloads for a specific cluster.
type CastaiAutoscalerV1beta1GetProblematicWorkloadsResponse struct {
	// ClusterId The id of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Controllers Problematic workload controllers.
	Controllers *[]CastaiAutoscalerV1beta1GetProblematicWorkloadsResponseController `json:"controllers,omitempty"`

	// HasProblems Identifies whether cluster contains any problems.
	HasProblems *bool `json:"hasProblems,omitempty"`

	// StandalonePods Problematic standalone pods.
	StandalonePods *[]CastaiAutoscalerV1beta1GetProblematicWorkloadsResponseStandalonePod `json:"standalonePods,omitempty"`
}

// CastaiAutoscalerV1beta1GetProblematicWorkloadsResponseController Defines a problematic workloads controller.
type CastaiAutoscalerV1beta1GetProblematicWorkloadsResponseController struct {
	// Kind Kind of the controller.
	Kind *string `json:"kind,omitempty"`

	// Name Name of the controller.
	Name *string `json:"name,omitempty"`

	// Problems List of controller problems.
	Problems *[]string `json:"problems,omitempty"`
}

// CastaiAutoscalerV1beta1GetProblematicWorkloadsResponseStandalonePod Defines a problematic standalone pod.
type CastaiAutoscalerV1beta1GetProblematicWorkloadsResponseStandalonePod struct {
	// Name Name of the pod.
	Name *string `json:"name,omitempty"`

	// Problems List of pod problems.
	Problems *[]string `json:"problems,omitempty"`
}

// CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponse Defines the rebalanced workloads response.
type CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponse struct {
	// IsActive Whether rebalancing is active or not.
	IsActive *bool `json:"isActive,omitempty"`

	// Selectors Label selectors matching workloads which are being rebalanced.
	Selectors *[]CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelector `json:"selectors,omitempty"`
}

// CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelector Selector is a proto mirror of the metav1.LabelSelector K8s API object. Properties `match_labels` and
// `match_expressions` are ANDed.
type CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelector struct {
	// MatchExpressions A more advanced label query with operators. Multiple expressions are ANDed.
	MatchExpressions *[]CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpression `json:"matchExpressions,omitempty"`

	// MatchLabels Used to query resource labels.
	MatchLabels *map[string]string `json:"matchLabels,omitempty"`
}

// CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpression Expression is a proto mirror of the metav1.LabelSelectorRequirement K8s API object.
type CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpression struct {
	// Key Key is a label.
	Key *string `json:"key,omitempty"`

	// Operator A set of operators which can be used in the label selector expressions.
	Operator *CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator `json:"operator,omitempty"`

	// Values Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the
	// operator is Exists or DoesNotExist, the values array must be empty.
	Values *[]string `json:"values,omitempty"`
}

// CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator A set of operators which can be used in the label selector expressions.
type CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponseLabelSelectorExpressionOperator string

// CastaiAutoscalerV1beta1ListRebalancingPlansResponse Defines list cluster rebalancing plans response.
type CastaiAutoscalerV1beta1ListRebalancingPlansResponse struct {
	Items      *[]CastaiAutoscalerV1beta1RebalancingPlanResponse `json:"items,omitempty"`
	NextCursor *string                                           `json:"nextCursor,omitempty"`
}

// CastaiAutoscalerV1beta1MigrateKarpenterDefinitionsResponse defines model for castai.autoscaler.v1beta1.MigrateKarpenterDefinitionsResponse.
type CastaiAutoscalerV1beta1MigrateKarpenterDefinitionsResponse struct {
	AwsNodeTemplates *[]CastaiAutoscalerV1beta1AWSNodeTemplateMigrationResult `json:"awsNodeTemplates,omitempty"`
	Ec2NodeClasses   *[]CastaiAutoscalerV1beta1EC2NodeClassMigrationResult    `json:"ec2NodeClasses,omitempty"`
	NodePools        *[]CastaiAutoscalerV1beta1NodePoolMigrationResult        `json:"nodePools,omitempty"`
	Provisioners     *[]CastaiAutoscalerV1beta1ProvisionerMigrationResult     `json:"provisioners,omitempty"`
}

// CastaiAutoscalerV1beta1NodePoolMigrationIntent defines model for castai.autoscaler.v1beta1.NodePoolMigrationIntent.
type CastaiAutoscalerV1beta1NodePoolMigrationIntent struct {
	// CanMigrate Indicates whether the NodePool can be migrated.
	CanMigrate *bool `json:"canMigrate,omitempty"`

	// CastaiNodeTemplateName The name given to the CAST AI Node Template after migration.
	CastaiNodeTemplateName *string `json:"castaiNodeTemplateName,omitempty"`

	// Ec2NodeClassName Karpenter's EC2NodeClass name that this NodePool is referencing.
	Ec2NodeClassName *string `json:"ec2NodeClassName,omitempty"`

	// Error Error describing why NodePool migration cannot be performed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why NodePool migration cannot be performed or won't be performed fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter NodePool name.
	Name *string `json:"name,omitempty"`

	// Valid Indicates whether NodePool migration intent can be executed.
	// Deprecated: Use can_migrate instead.
	Valid *bool `json:"valid,omitempty"`
}

// CastaiAutoscalerV1beta1NodePoolMigrationResult defines model for castai.autoscaler.v1beta1.NodePoolMigrationResult.
type CastaiAutoscalerV1beta1NodePoolMigrationResult struct {
	// CastaiNodeTemplateId The id of the CAST AI Node Template.
	CastaiNodeTemplateId *string `json:"castaiNodeTemplateId,omitempty"`

	// CastaiNodeTemplateName The name of the CAST AI Node Template.
	CastaiNodeTemplateName *string `json:"castaiNodeTemplateName,omitempty"`

	// Ec2NodeClassName Karpenter's EC2NodeClass name that this NodePool is referencing.
	Ec2NodeClassName *string `json:"ec2NodeClassName,omitempty"`

	// Error Error describing why NodePool migration failed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why NodePool migration failed or couldn't complete fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter NodePool name.
	Name *string `json:"name,omitempty"`

	// Success Indicates whether NodePool migration was successful.
	Success *bool `json:"success,omitempty"`
}

// CastaiAutoscalerV1beta1Os defines model for castai.autoscaler.v1beta1.Os.
type CastaiAutoscalerV1beta1Os string

// CastaiAutoscalerV1beta1ProvisionerMigrationIntent defines model for castai.autoscaler.v1beta1.ProvisionerMigrationIntent.
type CastaiAutoscalerV1beta1ProvisionerMigrationIntent struct {
	// AwsNodeTemplateName Karpenter's AWSNodeTemplate name that this Provisioner is referencing.
	AwsNodeTemplateName *string `json:"awsNodeTemplateName,omitempty"`

	// CanMigrate Indicates whether the Provisioner can be migrated.
	CanMigrate *bool `json:"canMigrate,omitempty"`

	// CastaiNodeTemplateName The name given to the CAST AI Node Template after migration.
	CastaiNodeTemplateName *string `json:"castaiNodeTemplateName,omitempty"`

	// Error Error describing why Provisioner migration cannot be performed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why Provisioner migration cannot be performed or won't be performed fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter Provisioner name.
	Name *string `json:"name,omitempty"`

	// Valid Indicates whether Provisioner migration intent can be executed.
	// Deprecated: Use can_migrate instead.
	Valid *bool `json:"valid,omitempty"`
}

// CastaiAutoscalerV1beta1ProvisionerMigrationResult defines model for castai.autoscaler.v1beta1.ProvisionerMigrationResult.
type CastaiAutoscalerV1beta1ProvisionerMigrationResult struct {
	// AwsNodeTemplateName Karpenter's AWSNodeTemplate name that this Provisioner is referencing.
	AwsNodeTemplateName *string `json:"awsNodeTemplateName,omitempty"`

	// CastaiNodeTemplateId The id of the CAST AI Node Template.
	CastaiNodeTemplateId *string `json:"castaiNodeTemplateId,omitempty"`

	// CastaiNodeTemplateName The name of the CAST AI Node Template.
	CastaiNodeTemplateName *string `json:"castaiNodeTemplateName,omitempty"`

	// Error Error describing why Provisioner migration failed.
	// Deprecated: Use errors instead.
	Error *string `json:"error"`

	// ErrorMessages Error messages describing why Provisioner migration failed or couldn't complete fully.
	ErrorMessages *[]string `json:"errorMessages,omitempty"`

	// Name Karpenter Provisioner name.
	Name *string `json:"name,omitempty"`

	// Success Indicates whether Provisioner migration was successful.
	Success *bool `json:"success,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingNode defines model for castai.autoscaler.v1beta1.RebalancingNode.
type CastaiAutoscalerV1beta1RebalancingNode struct {
	NodeId *string `json:"nodeId,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponse Defines the cluster rebalancing plan response.
type CastaiAutoscalerV1beta1RebalancingPlanResponse struct {
	// ClusterId ID of the cluster that is being rebalanced.
	ClusterId *string `json:"clusterId,omitempty"`

	// Configurations Defines the cluster rebalancing plan configurations.
	Configurations *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurations `json:"configurations,omitempty"`

	// CreatedAt Timestamp of the rebalancing plan creation.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CreatedNodesAt Timestamp of the rebalancing plan green node creation.
	CreatedNodesAt *time.Time `json:"createdNodesAt,omitempty"`

	// DeletedNodesAt Timestamp of the rebalancing plan blue node deletion.
	DeletedNodesAt *time.Time `json:"deletedNodesAt,omitempty"`

	// DrainedNodesAt Timestamp of the rebalancing plan blue node draining.
	DrainedNodesAt *time.Time `json:"drainedNodesAt,omitempty"`

	// Errors Detailed error of rebalancing plan.
	Errors *[]CastaiAutoscalerV1beta1RebalancingPlanResponsePlanError `json:"errors,omitempty"`

	// EvictGracefully During the drain & delete plan execution phase, if node eviction reaches a timeout, it will be deleted forcefully, terminating all workloads that failed to gracefully close on time.
	// When this option is enabled, such nodes will be kept for manual inspection and/or eventual automatic cleanup when node becomes empty.
	// Special annotation "rebalancing.cast.ai/status=drain-failed" will be added to these nodes.
	EvictGracefully *bool `json:"evictGracefully,omitempty"`

	// ExecutionConditions Defines the conditions which must be met in order to fully execute the plan.
	ExecutionConditions *CastaiAutoscalerV1beta1ExecutionConditions `json:"executionConditions,omitempty"`

	// FinishedAt Timestamp of the rebalancing plan finishing.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// GeneratedAt Timestamp of the rebalancing plan generation.
	GeneratedAt           *time.Time `json:"generatedAt,omitempty"`
	KeepDrainTimeoutNodes *bool      `json:"keepDrainTimeoutNodes,omitempty"`

	// MinNodes Minimum count of worker nodes to be had in the rebalancing plan. Default is 3.
	MinNodes *int32 `json:"minNodes,omitempty"`

	// Operations List of operations needed to execute this rebalancing plan. Documents the factual actions needed to be taken and/or
	// actions already done.
	Operations *[]CastaiAutoscalerV1beta1RebalancingPlanResponseOperation `json:"operations,omitempty"`

	// RebalancingNodeIds Subset of the node IDs which were selected to rebalance. In case of full cluster rebalancing, this list
	// will be empty.
	RebalancingNodeIds *[]string `json:"rebalancingNodeIds,omitempty"`

	// RebalancingPlanId ID of the rebalancing plan.
	RebalancingPlanId *string `json:"rebalancingPlanId,omitempty"`

	// ScheduleId Defines the schedule ID that triggered the creation of this rebalancing plan. Can be null if the rebalancing
	// plan didn't originate from a rebalancing schedule.
	ScheduleId *string `json:"scheduleId"`

	// Status Status of the rebalancing plan.
	//
	// * `generating` - the rebalancing plan is new and currently is being generated.
	// * `generated` - the rebalancing plan has been generated and can be previewed.
	// * `creating_nodes` - the rebalancing plan is being executed, green nodes are being created.
	// * `preparing_nodes` - the rebalancing plan is being executed, green nodes are being prepared.
	// * `draining_nodes` - the rebalancing plan is being executed, blue nodes are being drained.
	// * `deleting_nodes` - the rebalancing plan is being executed, blue nodes are being deleted.
	// * `finished` - the rebalancing plan has finished successfully.
	// * `partially_finished` - the rebalancing plan has partially finished. Used when graceful rebalancing is enabled.
	// * `error` - the rebalancing plan has failed.
	Status *CastaiAutoscalerV1beta1Status `json:"status,omitempty"`

	// TriggeredAt Timestamp of the rebalancing plan triggering.
	TriggeredAt *time.Time `json:"triggeredAt,omitempty"`

	// UpdatedAt Timestamp of the rebalancing plan last update.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurations Defines the cluster rebalancing plan configurations.
type CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurations struct {
	// Achieved Contains affected and cluster node aggregated calculations.
	Achieved *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationTotals `json:"achieved,omitempty"`

	// AchievedDiff Defines the difference between blue and green node configurations.
	AchievedDiff *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsDiff `json:"achievedDiff,omitempty"`

	// Blue Defines a single rebalancing plan configuration.
	Blue *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfiguration `json:"blue,omitempty"`

	// Diff Defines the difference between blue and green node configurations.
	Diff *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsDiff `json:"diff,omitempty"`

	// Green Defines a single rebalancing plan configuration.
	Green *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfiguration `json:"green,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfiguration Defines a single rebalancing plan configuration.
type CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfiguration struct {
	// ClusterTotals Defines the totals of a single configuration.
	ClusterTotals *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsTotals `json:"clusterTotals,omitempty"`

	// Nodes A list of node in this configuration.
	Nodes *[]CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationNode `json:"nodes,omitempty"`

	// Totals Defines the totals of a single configuration.
	Totals *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsTotals `json:"totals,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationNode Defines a single node in the configuration.
type CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationNode struct {
	// CreatedAt Timestamp of the node creation date.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Node ID, if the node already exists.
	// Green nodes, to be created, won't have node_id.
	Id *string `json:"id"`

	// InstanceType The instance type of this node.
	InstanceType *string `json:"instanceType,omitempty"`

	// IsControlPlane Whether this node is control plan node.
	IsControlPlane *bool `json:"isControlPlane,omitempty"`

	// IsLegacy Whether the node is legacy.
	IsLegacy *bool `json:"isLegacy,omitempty"`

	// IsSpot Whether this node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsSpotFallback Whether this node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`

	// ManagedBy The provider name which managed this node.
	//
	// Possible types:
	// * `CASTAI` - the node is managed by CAST AI.
	// * `EKS` - the node is managed by the AWS EKS service.
	// * `GKE` - the node is managed by the GCP GKE service.
	// * `AKS` - the node is managed by the Azure AKS service.
	// * `KOPS` - the node is managed by the cluster manager tool kOps.
	ManagedBy *string `json:"managedBy,omitempty"`

	// MemoryMib Memory capacity of this node in MiBs.
	MemoryMib *int32 `json:"memoryMib,omitempty"`

	// MilliCpu Milli CPU capacity of this node.
	MilliCpu *int32 `json:"milliCpu,omitempty"`

	// Name Name of the node.
	Name *string                    `json:"name,omitempty"`
	Os   *CastaiAutoscalerV1beta1Os `json:"os,omitempty"`

	// PriceHourly The hourly price of this node in $ currency.
	PriceHourly *string `json:"priceHourly,omitempty"`

	// ProvisionedNode Defines a provisioned version of the node in the configuration.
	ProvisionedNode *CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationProvisionedNode `json:"provisionedNode,omitempty"`

	// TotalPods Total number of pods in this node.
	TotalPods *int32 `json:"totalPods,omitempty"`

	// TotalProblematicPods Total number of problematic pods in this node.
	TotalProblematicPods *int32 `json:"totalProblematicPods,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationProvisionedNode Defines a provisioned version of the node in the configuration.
type CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationProvisionedNode struct {
	// CreatedAt Timestamp of the node creation date.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// InstanceType The instance type of this node.
	InstanceType *string `json:"instanceType,omitempty"`

	// IsSpot Whether this node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsSpotFallback Whether this node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`

	// MemoryMib Memory capacity of this node in MiBs.
	MemoryMib *int32 `json:"memoryMib,omitempty"`

	// MilliCpu Milli CPU capacity of this node.
	MilliCpu *int32                     `json:"milliCpu,omitempty"`
	Os       *CastaiAutoscalerV1beta1Os `json:"os,omitempty"`

	// PriceHourly The hourly price of this node in $ currency.
	PriceHourly *string `json:"priceHourly,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationTotals Contains affected and cluster node aggregated calculations.
type CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsConfigurationTotals struct {
	// AffectedNodeTotals Defines the totals of a single configuration.
	AffectedNodeTotals CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsTotals `json:"affectedNodeTotals"`

	// ClusterTotals Defines the totals of a single configuration.
	ClusterTotals CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsTotals `json:"clusterTotals"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsDiff Defines the difference between blue and green node configurations.
type CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsDiff struct {
	// ClusterSavingsPercentage Saving percentage achieved by rebalancing the selected nodes for the whole cluster.
	ClusterSavingsPercentage *string `json:"clusterSavingsPercentage,omitempty"`

	// PriceHourly Hourly price difference between blue and green node configurations in $ currency.
	PriceHourly *string `json:"priceHourly,omitempty"`

	// PriceMonthly Monthly price difference between blue and green node configurations in $ currency.
	PriceMonthly *string `json:"priceMonthly,omitempty"`

	// SavingsPercentage Savings percentage achieved by rebalancing the selected nodes.
	SavingsPercentage *string `json:"savingsPercentage,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsTotals Defines the totals of a single configuration.
type CastaiAutoscalerV1beta1RebalancingPlanResponseConfigurationsTotals struct {
	// MemoryMib Total memory capacity of this configuration in MiBs.
	MemoryMib *int32 `json:"memoryMib,omitempty"`

	// MigratablePods Count of pods which can be migrated. They come from replaceable nodes.
	MigratablePods *int32 `json:"migratablePods,omitempty"`

	// MilliCpu Total milli CPU capacity of this configuration.
	MilliCpu *int32 `json:"milliCpu,omitempty"`

	// Nodes Count of nodes in this configuration.
	Nodes *int32 `json:"nodes,omitempty"`

	// Pods Total number of pods in this configuration.
	Pods *int32 `json:"pods,omitempty"`

	// PriceHourly Total hourly price of this configuration in $ currency.
	PriceHourly *string `json:"priceHourly,omitempty"`

	// PriceMonthly Total monthly price of this configuration in $ currency.
	PriceMonthly *string `json:"priceMonthly,omitempty"`

	// ProblematicPods Total number of problematic pods in this configuration.
	ProblematicPods *int32 `json:"problematicPods,omitempty"`

	// ReplaceableNodes Count of nodes which can be replaced in this configuration.
	ReplaceableNodes *int32 `json:"replaceableNodes,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseOperation Defines an actual action needed to be taken and/or already done.
type CastaiAutoscalerV1beta1RebalancingPlanResponseOperation struct {
	// CreateParams Defines the parameters used for the `create_node` operation type.
	CreateParams *CastaiAutoscalerV1beta1RebalancingPlanResponseOperationCreateParams `json:"createParams,omitempty"`

	// CreatedAt Timestamp of the operation creation.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeleteParams Defines the parameters for the `delete_node` operation type.
	DeleteParams *CastaiAutoscalerV1beta1RebalancingPlanResponseOperationDeleteParams `json:"deleteParams,omitempty"`

	// DrainParams Defines the parameters for the `drain_node` operation type.
	DrainParams *CastaiAutoscalerV1beta1RebalancingPlanResponseOperationDrainParams `json:"drainParams,omitempty"`

	// Error Error value if the operation has finished with an error.
	Error *string `json:"error"`

	// FinishedAt Timestamp of the operation finish date. Only present when the operation has finished, either with an error or not.
	FinishedAt *time.Time `json:"finishedAt"`

	// Id The id of the operation.
	Id *string `json:"id,omitempty"`

	// NodeId The id of the node this operation will be executed on.
	NodeId *string `json:"nodeId"`

	// PrepareParams Defines the parameters for the `prepare_node` operation type.
	PrepareParams *CastaiAutoscalerV1beta1RebalancingPlanResponseOperationPrepareParams `json:"prepareParams,omitempty"`

	// Type Type of the operation.
	//
	// Possible types:
	// * `create_node` - a node will be created with specific `create` `params`.
	// * `prepare_node` - a node will be prepared with specific `prepared` `params`.
	// * `drain_node` - a node will be drained with specific `drain` `params`.
	// * `delete_node` - a node will be deleted with specific `delete` `params`.
	Type *CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType `json:"type,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseOperationCreateParams Defines the parameters used for the `create_node` operation type.
type CastaiAutoscalerV1beta1RebalancingPlanResponseOperationCreateParams struct {
	// AzName The availability zone name of the created node. If empty - the AZ name will be random.
	AzName *string `json:"azName"`

	// Csp The cloud service provider name.
	Csp *string `json:"csp,omitempty"`

	// InstanceType The instance type of the created node.
	InstanceType *string `json:"instanceType,omitempty"`

	// IsSpot Whether the created node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsSpotFallback Whether the node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`

	// NodeConfigurationId Node configuration ID to be used for the new node.
	NodeConfigurationId *string `json:"nodeConfigurationId,omitempty"`

	// SubnetId The subnet id of the created node. if empty - the subnet id will be random based on the availability zone.
	SubnetId *string `json:"subnetId"`

	// VolumeSizeGib The volume size in GiB of the created node.
	VolumeSizeGib *int32 `json:"volumeSizeGib,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseOperationDeleteParams Defines the parameters for the `delete_node` operation type.
type CastaiAutoscalerV1beta1RebalancingPlanResponseOperationDeleteParams struct {
	// Csp The cloud service provider name.
	Csp *string `json:"csp,omitempty"`

	// InstanceType The instance type of the node.
	InstanceType *string `json:"instanceType,omitempty"`

	// IsSpot Whether the node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsSpotFallback Whether the node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseOperationDrainParams Defines the parameters for the `drain_node` operation type.
type CastaiAutoscalerV1beta1RebalancingPlanResponseOperationDrainParams struct {
	// Csp The cloud service provider name.
	Csp *string `json:"csp,omitempty"`

	// InstanceType The instance type of the node.
	InstanceType *string `json:"instanceType,omitempty"`

	// IsSpot Whether the node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsSpotFallback Whether the node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseOperationPrepareParams Defines the parameters for the `prepare_node` operation type.
type CastaiAutoscalerV1beta1RebalancingPlanResponseOperationPrepareParams struct {
	// Csp The cloud service provider name.
	Csp *string `json:"csp,omitempty"`

	// InstanceType The instance type of the node.
	InstanceType *string `json:"instanceType,omitempty"`

	// IsSpot Whether the node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsSpotFallback Whether the node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType Type of the operation.
//
// Possible types:
// * `create_node` - a node will be created with specific `create` `params`.
// * `prepare_node` - a node will be prepared with specific `prepared` `params`.
// * `drain_node` - a node will be drained with specific `drain` `params`.
// * `delete_node` - a node will be deleted with specific `delete` `params`.
type CastaiAutoscalerV1beta1RebalancingPlanResponseOperationType string

// CastaiAutoscalerV1beta1RebalancingPlanResponsePlanError Detailed error.
type CastaiAutoscalerV1beta1RebalancingPlanResponsePlanError struct {
	// Message Detailed error message.
	Message *string `json:"message,omitempty"`

	// Node Node id.
	Node *string `json:"node"`

	// Pod Pod name.
	Pod *string `json:"pod"`

	// Reason Defines the reason why the rebalancing plan failed.
	//
	// * `rebalancing_plan_generation_failed` - the rebalancing plan generation failed.
	// * `upscaling_failed` - the upscaling of the cluster failed.
	// * `node_drain_failed` - the drain of a node failed.
	// * `node_create_failed` - the creation of a node failed.
	// * `node_prepare_failed` - the preparation of a node failed.
	// * `node_delete_failed` - the deletion of a node failed.
	// * `rebalancing_plan_timeout` - the rebalancing plan timed out.
	// * `achieved_savings_below_threshold` - the achieved savings are below the threshold.
	// * `unknown` - the reason is unknown.
	Reason *CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason `json:"reason,omitempty"`
}

// CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason Defines the reason why the rebalancing plan failed.
//
// * `rebalancing_plan_generation_failed` - the rebalancing plan generation failed.
// * `upscaling_failed` - the upscaling of the cluster failed.
// * `node_drain_failed` - the drain of a node failed.
// * `node_create_failed` - the creation of a node failed.
// * `node_prepare_failed` - the preparation of a node failed.
// * `node_delete_failed` - the deletion of a node failed.
// * `rebalancing_plan_timeout` - the rebalancing plan timed out.
// * `achieved_savings_below_threshold` - the achieved savings are below the threshold.
// * `unknown` - the reason is unknown.
type CastaiAutoscalerV1beta1RebalancingPlanResponsePlanErrorReason string

// CastaiAutoscalerV1beta1Status Status of the rebalancing plan.
//
// * `generating` - the rebalancing plan is new and currently is being generated.
// * `generated` - the rebalancing plan has been generated and can be previewed.
// * `creating_nodes` - the rebalancing plan is being executed, green nodes are being created.
// * `preparing_nodes` - the rebalancing plan is being executed, green nodes are being prepared.
// * `draining_nodes` - the rebalancing plan is being executed, blue nodes are being drained.
// * `deleting_nodes` - the rebalancing plan is being executed, blue nodes are being deleted.
// * `finished` - the rebalancing plan has finished successfully.
// * `partially_finished` - the rebalancing plan has partially finished. Used when graceful rebalancing is enabled.
// * `error` - the rebalancing plan has failed.
type CastaiAutoscalerV1beta1Status string

// CastaiEvictorV1AdvancedConfig AdvancedConfig the evictor advanced configuration.
type CastaiEvictorV1AdvancedConfig struct {
	EvictionConfig []CastaiEvictorV1EvictionConfig `json:"evictionConfig"`
}

// CastaiEvictorV1EvictionConfig EvictionConfig used to specify more granular settings per node/pod filters.
type CastaiEvictorV1EvictionConfig struct {
	NodeSelector *CastaiEvictorV1NodeSelector    `json:"nodeSelector,omitempty"`
	PodSelector  *CastaiEvictorV1PodSelector     `json:"podSelector,omitempty"`
	Settings     CastaiEvictorV1EvictionSettings `json:"settings"`
}

// CastaiEvictorV1EvictionSettings defines model for castai.evictor.v1.EvictionSettings.
type CastaiEvictorV1EvictionSettings struct {
	Aggressive      *CastaiEvictorV1EvictionSettingsSettingEnabled `json:"aggressive,omitempty"`
	Disposable      *CastaiEvictorV1EvictionSettingsSettingEnabled `json:"disposable,omitempty"`
	RemovalDisabled *CastaiEvictorV1EvictionSettingsSettingEnabled `json:"removalDisabled,omitempty"`
}

// CastaiEvictorV1EvictionSettingsSettingEnabled defines model for castai.evictor.v1.EvictionSettings.SettingEnabled.
type CastaiEvictorV1EvictionSettingsSettingEnabled struct {
	Enabled bool `json:"enabled"`
}

// CastaiEvictorV1LabelSelector LabelSelector is a proto mirror of the metav1.LabelSelector K8s API object. Properties `match_labels` and
// `match_expressions` are ANDed.
type CastaiEvictorV1LabelSelector struct {
	// MatchExpressions A more advanced label query with operators. Multiple expressions are ANDed.
	MatchExpressions *[]CastaiEvictorV1LabelSelectorExpression `json:"matchExpressions,omitempty"`

	// MatchLabels Used to query resource labels.
	MatchLabels *map[string]string `json:"matchLabels,omitempty"`
}

// CastaiEvictorV1LabelSelectorExpression Expression is a proto mirror of the metav1.LabelSelectorRequirement K8s API object.
type CastaiEvictorV1LabelSelectorExpression struct {
	// Key Key is a label.
	Key string `json:"key"`

	// Operator Operator set of operators which can be used in the label selector expressions.
	Operator CastaiEvictorV1LabelSelectorExpressionOperator `json:"operator"`

	// Values Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the
	// operator is Exists or DoesNotExist, the values array must be empty.
	Values *[]string `json:"values,omitempty"`
}

// CastaiEvictorV1LabelSelectorExpressionOperator Operator set of operators which can be used in the label selector expressions.
type CastaiEvictorV1LabelSelectorExpressionOperator string

// CastaiEvictorV1NodeSelector defines model for castai.evictor.v1.NodeSelector.
type CastaiEvictorV1NodeSelector struct {
	// LabelSelector LabelSelector is a proto mirror of the metav1.LabelSelector K8s API object. Properties `match_labels` and
	// `match_expressions` are ANDed.
	LabelSelector CastaiEvictorV1LabelSelector `json:"labelSelector"`
}

// CastaiEvictorV1PodSelector defines model for castai.evictor.v1.PodSelector.
type CastaiEvictorV1PodSelector struct {
	Kind *string `json:"kind,omitempty"`

	// LabelSelector LabelSelector is a proto mirror of the metav1.LabelSelector K8s API object. Properties `match_labels` and
	// `match_expressions` are ANDed.
	LabelSelector *CastaiEvictorV1LabelSelector `json:"labelSelector,omitempty"`
	Namespace     *string                       `json:"namespace,omitempty"`
}

// CastaiFeaturesV1FeatureFlag defines model for castai.features.v1.FeatureFlag.
type CastaiFeaturesV1FeatureFlag struct {
	DefaultValue *string `json:"defaultValue,omitempty"`

	// Description Description of the flag.
	Description *string `json:"description,omitempty"`

	// Key Flag key of the requested flag.
	Key string `json:"key"`

	// Variations Variations of the flag.
	Variations *[]CastaiFeaturesV1Variation `json:"variations,omitempty"`
}

// CastaiFeaturesV1FeatureFlagResolved FeatureFlagResolved body for flag evaluation. used by the ResolveBoolean rpc.
type CastaiFeaturesV1FeatureFlagResolved struct {
	Boolean bool `json:"boolean"`

	// FlagName Key prefix is prefix of the requested flags. If not set will evaluate all flags.
	FlagName string                    `json:"flagName"`
	Integer  string                    `json:"integer"`
	Metadata *CastaiFeaturesV1Metadata `json:"metadata,omitempty"`
	Reason   *string                   `json:"reason,omitempty"`
	String   string                    `json:"string"`

	// Variant The variant name of the returned flag value.
	Variant *string `json:"variant,omitempty"`
}

// CastaiFeaturesV1ListResponse ListResponse body for feature flag listing, used by the List rpc.
type CastaiFeaturesV1ListResponse struct {
	// Items FeatureFlag is the feature flag.
	Items []CastaiFeaturesV1FeatureFlag `json:"items"`
}

// CastaiFeaturesV1Metadata defines model for castai.features.v1.Metadata.
type CastaiFeaturesV1Metadata struct {
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// CastaiFeaturesV1ResolveMessage defines model for castai.features.v1.ResolveMessage.
type CastaiFeaturesV1ResolveMessage struct {
	FlagName       *string                         `json:"flagName,omitempty"`
	FlagNamePrefix *string                         `json:"flagNamePrefix,omitempty"`
	Payload        *CastaiFeaturesV1ResolvePayload `json:"payload,omitempty"`

	// TargetingKey Targeting key of the requested flag. If not provided, random will be generated at runtime.
	// This identifier is used to identify the user.
	TargetingKey *string `json:"targetingKey,omitempty"`
}

// CastaiFeaturesV1ResolvePayload defines model for castai.features.v1.ResolvePayload.
type CastaiFeaturesV1ResolvePayload struct {
	Boolean *bool                   `json:"boolean,omitempty"`
	Context *map[string]interface{} `json:"context,omitempty"`
	Integer *string                 `json:"integer,omitempty"`
	String  *string                 `json:"string,omitempty"`
}

// CastaiFeaturesV1ResolveResponse defines model for castai.features.v1.ResolveResponse.
type CastaiFeaturesV1ResolveResponse struct {
	// Items FeatureFlagResolved is the resolved feature flag.
	Items []CastaiFeaturesV1FeatureFlagResolved `json:"items"`
}

// CastaiFeaturesV1Variation defines model for castai.features.v1.Variation.
type CastaiFeaturesV1Variation struct {
	Boolean bool   `json:"boolean"`
	Integer string `json:"integer"`

	// Key The variant name of the returned flag value.
	Key    string `json:"key"`
	String string `json:"string"`
}

// CastaiInventoryV1beta1AddReservationResponse defines model for castai.inventory.v1beta1.AddReservationResponse.
type CastaiInventoryV1beta1AddReservationResponse struct {
	Reservation *CastaiInventoryV1beta1ReservationDetails `json:"reservation,omitempty"`
}

// CastaiInventoryV1beta1AttachableGPUDevice defines model for castai.inventory.v1beta1.AttachableGPUDevice.
type CastaiInventoryV1beta1AttachableGPUDevice struct {
	BlacklistedAt *time.Time `json:"blacklistedAt,omitempty"`

	// Count Count of GPU to be attached.
	Count *int32 `json:"count,omitempty"`

	// Manufacturer GPU manufacturer.
	Manufacturer *CastaiInventoryV1beta1AttachableGPUDeviceManufacturer `json:"manufacturer,omitempty"`

	// MemoryMib Total amount of memory of the GPUs to be attached MiB.
	MemoryMib *int32 `json:"memoryMib,omitempty"`

	// Name Name of the GPU. For example nvidia-tesla-k80.
	Name *string `json:"name,omitempty"`

	// PriceHourly Total price of GPUs per hour.
	PriceHourly *string `json:"priceHourly,omitempty"`
}

// CastaiInventoryV1beta1AttachableGPUDeviceManufacturer GPU manufacturer.
type CastaiInventoryV1beta1AttachableGPUDeviceManufacturer string

// CastaiInventoryV1beta1AzureReservation defines model for castai.inventory.v1beta1.AzureReservation.
type CastaiInventoryV1beta1AzureReservation struct {
	Count                 *int32                                        `json:"count,omitempty"`
	Id                    *string                                       `json:"id,omitempty"`
	InstanceType          *string                                       `json:"instanceType,omitempty"`
	InstanceTypeCpu       *string                                       `json:"instanceTypeCpu,omitempty"`
	InstanceTypeMemoryMib *string                                       `json:"instanceTypeMemoryMib,omitempty"`
	InstanceTypesUsage    *CastaiInventoryV1beta1InstanceTypeBasedUsage `json:"instanceTypesUsage,omitempty"`

	// Plan - ONE_YEAR: 1 year commitment plan
	//  - THREE_YEAR: 3 year commitment plan
	Plan               *CastaiInventoryV1beta1AzureReservationReservationPlan `json:"plan,omitempty"`
	Scope              *string                                                `json:"scope,omitempty"`
	ScopeResourceGroup *string                                                `json:"scopeResourceGroup,omitempty"`
	ScopeSubscription  *string                                                `json:"scopeSubscription,omitempty"`
	Status             *string                                                `json:"status,omitempty"`
}

// CastaiInventoryV1beta1AzureReservationReservationPlan - ONE_YEAR: 1 year commitment plan
//   - THREE_YEAR: 3 year commitment plan
type CastaiInventoryV1beta1AzureReservationReservationPlan string

// CastaiInventoryV1beta1AzureReservationImport defines model for castai.inventory.v1beta1.AzureReservationImport.
type CastaiInventoryV1beta1AzureReservationImport struct {
	ExpirationDate     *string `json:"expirationDate,omitempty"`
	Name               *string `json:"name,omitempty"`
	ProductName        *string `json:"productName,omitempty"`
	PurchaseDate       *string `json:"purchaseDate,omitempty"`
	Quantity           *int32  `json:"quantity,omitempty"`
	Region             *string `json:"region,omitempty"`
	ReservationId      *string `json:"reservationId,omitempty"`
	Scope              *string `json:"scope,omitempty"`
	ScopeResourceGroup *string `json:"scopeResourceGroup,omitempty"`
	ScopeSubscription  *string `json:"scopeSubscription,omitempty"`
	Status             *string `json:"status,omitempty"`
	Term               *string `json:"term,omitempty"`
	Type               *string `json:"type,omitempty"`
}

// CastaiInventoryV1beta1Commitment defines model for castai.inventory.v1beta1.Commitment.
type CastaiInventoryV1beta1Commitment struct {
	// AllowedUsage Allowed usage specifies the part of the commitment that is allowed to be used. 1.0 means 100% of the commitment. Currently it's only supported for GCP CUDs.
	AllowedUsage            *float32                                `json:"allowedUsage,omitempty"`
	AzureReservationContext *CastaiInventoryV1beta1AzureReservation `json:"azureReservationContext,omitempty"`
	EndDate                 *time.Time                              `json:"endDate"`
	GcpResourceCudContext   *CastaiInventoryV1beta1GCPResourceCUD   `json:"gcpResourceCudContext,omitempty"`
	Id                      *string                                 `json:"id,omitempty"`
	Name                    *string                                 `json:"name,omitempty"`
	Prioritization          *bool                                   `json:"prioritization,omitempty"`
	Region                  *string                                 `json:"region,omitempty"`
	StartDate               *time.Time                              `json:"startDate,omitempty"`

	// Status - Inactive: Inactive commitment
	//  - Active: Active commitment
	Status    *CastaiInventoryV1beta1CommitmentStatus `json:"status,omitempty"`
	UpdatedAt *time.Time                              `json:"updatedAt,omitempty"`
}

// CastaiInventoryV1beta1CommitmentStatus - Inactive: Inactive commitment
//   - Active: Active commitment
type CastaiInventoryV1beta1CommitmentStatus string

// CastaiInventoryV1beta1CommitmentAssignment defines model for castai.inventory.v1beta1.CommitmentAssignment.
type CastaiInventoryV1beta1CommitmentAssignment struct {
	ClusterId    *string `json:"clusterId,omitempty"`
	CommitmentId *string `json:"commitmentId,omitempty"`
	Id           *string `json:"id,omitempty"`
	Priority     *int32  `json:"priority,omitempty"`
}

// CastaiInventoryV1beta1CountableInstanceType defines model for castai.inventory.v1beta1.CountableInstanceType.
type CastaiInventoryV1beta1CountableInstanceType struct {
	ClusterId *string `json:"clusterId,omitempty"`
	Count     *int32  `json:"count,omitempty"`

	// InstanceType InstanceType is a cloud service provider specific VM type with basic data.
	InstanceType *CastaiInventoryV1beta1InstanceType `json:"instanceType,omitempty"`
}

// CastaiInventoryV1beta1Discount defines model for castai.inventory.v1beta1.Discount.
type CastaiInventoryV1beta1Discount struct {
	Amount *string `json:"amount,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// CastaiInventoryV1beta1ExtensionType defines model for castai.inventory.v1beta1.ExtensionType.
type CastaiInventoryV1beta1ExtensionType string

// CastaiInventoryV1beta1GCPCommitmentImport defines model for castai.inventory.v1beta1.GCPCommitmentImport.
type CastaiInventoryV1beta1GCPCommitmentImport struct {
	AutoRenew         *bool                                `json:"autoRenew,omitempty"`
	Category          *string                              `json:"category,omitempty"`
	CreationTimestamp *string                              `json:"creationTimestamp,omitempty"`
	Description       *string                              `json:"description,omitempty"`
	EndTimestamp      *string                              `json:"endTimestamp,omitempty"`
	Id                *string                              `json:"id,omitempty"`
	Kind              *string                              `json:"kind,omitempty"`
	Name              *string                              `json:"name,omitempty"`
	Plan              *string                              `json:"plan,omitempty"`
	Region            *string                              `json:"region,omitempty"`
	Resources         *[]CastaiInventoryV1beta1GCPResource `json:"resources,omitempty"`
	SelfLink          *string                              `json:"selfLink,omitempty"`
	StartTimestamp    *string                              `json:"startTimestamp,omitempty"`
	Status            *string                              `json:"status,omitempty"`
	StatusMessage     *string                              `json:"statusMessage,omitempty"`
	Type              *string                              `json:"type,omitempty"`
}

// CastaiInventoryV1beta1GCPResource defines model for castai.inventory.v1beta1.GCPResource.
type CastaiInventoryV1beta1GCPResource struct {
	Amount *string `json:"amount,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// CastaiInventoryV1beta1GCPResourceCUD defines model for castai.inventory.v1beta1.GCPResourceCUD.
type CastaiInventoryV1beta1GCPResourceCUD struct {
	Cpu                *string                                       `json:"cpu,omitempty"`
	CudId              *string                                       `json:"cudId,omitempty"`
	InstanceTypesUsage *CastaiInventoryV1beta1InstanceTypeBasedUsage `json:"instanceTypesUsage,omitempty"`
	MemoryMb           *string                                       `json:"memoryMb,omitempty"`

	// Plan - TWELVE_MONTH: 1 year commitment plan
	//  - THIRTY_SIX_MONTH: 3 year commitment plan
	Plan   *CastaiInventoryV1beta1GCPResourceCUDCUDPlan `json:"plan,omitempty"`
	Price  *CastaiInventoryV1beta1GCPResourceCUDPrice   `json:"price,omitempty"`
	Status *string                                      `json:"status,omitempty"`
	Type   *string                                      `json:"type,omitempty"`
}

// CastaiInventoryV1beta1GCPResourceCUDCUDPlan - TWELVE_MONTH: 1 year commitment plan
//   - THIRTY_SIX_MONTH: 3 year commitment plan
type CastaiInventoryV1beta1GCPResourceCUDCUDPlan string

// CastaiInventoryV1beta1GCPResourceCUDPrice defines model for castai.inventory.v1beta1.GCPResourceCUDPrice.
type CastaiInventoryV1beta1GCPResourceCUDPrice struct {
	Cpu      *string `json:"cpu,omitempty"`
	MemoryGb *string `json:"memoryGb,omitempty"`
}

// CastaiInventoryV1beta1GPUDevice defines model for castai.inventory.v1beta1.GPUDevice.
type CastaiInventoryV1beta1GPUDevice struct {
	BlacklistedAt *time.Time `json:"blacklistedAt,omitempty"`
	Count         *int32     `json:"count,omitempty"`

	// Manufacturer - UNKNOWN: UNKNOWN is invalid.
	//  - NVIDIA: NVIDIA.
	//  - AMD: AMD.
	Manufacturer *CastaiInventoryV1beta1GPUDeviceManufacturer `json:"manufacturer,omitempty"`
	MemoryMib    *int32                                       `json:"memoryMib,omitempty"`
	Name         *string                                      `json:"name,omitempty"`

	// PriceHourly Price per GPU per hour.
	PriceHourly *string `json:"priceHourly,omitempty"`
}

// CastaiInventoryV1beta1GPUDeviceManufacturer - UNKNOWN: UNKNOWN is invalid.
//   - NVIDIA: NVIDIA.
//   - AMD: AMD.
type CastaiInventoryV1beta1GPUDeviceManufacturer string

// CastaiInventoryV1beta1GPUExtension defines model for castai.inventory.v1beta1.GPUExtension.
type CastaiInventoryV1beta1GPUExtension struct {
	Count        *int32  `json:"count,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// CastaiInventoryV1beta1GPUInfo defines model for castai.inventory.v1beta1.GPUInfo.
type CastaiInventoryV1beta1GPUInfo struct {
	GpuDevices *[]CastaiInventoryV1beta1GPUDevice `json:"gpuDevices,omitempty"`
}

// CastaiInventoryV1beta1GenericReservation defines model for castai.inventory.v1beta1.GenericReservation.
type CastaiInventoryV1beta1GenericReservation struct {
	Count                 *int32     `json:"count"`
	DeepLinkToReservation *string    `json:"deepLinkToReservation"`
	EndDate               *time.Time `json:"endDate"`
	ExpirationDate        *time.Time `json:"expirationDate"`
	InstanceType          *string    `json:"instanceType"`
	Name                  *string    `json:"name,omitempty"`
	Price                 *string    `json:"price"`
	ProductName           *string    `json:"productName"`
	Provider              *string    `json:"provider"`
	PurchaseDate          *time.Time `json:"purchaseDate"`
	Quantity              *int32     `json:"quantity"`
	Region                *string    `json:"region,omitempty"`
	StartDate             *time.Time `json:"startDate"`
	Type                  *string    `json:"type"`
	ZoneId                *string    `json:"zoneId"`
	ZoneName              *string    `json:"zoneName"`
}

// CastaiInventoryV1beta1GenericReservationsList defines model for castai.inventory.v1beta1.GenericReservationsList.
type CastaiInventoryV1beta1GenericReservationsList struct {
	Items *[]CastaiInventoryV1beta1GenericReservation `json:"items,omitempty"`
}

// CastaiInventoryV1beta1GetCommitmentAssignmentsResponse defines model for castai.inventory.v1beta1.GetCommitmentAssignmentsResponse.
type CastaiInventoryV1beta1GetCommitmentAssignmentsResponse struct {
	Assignments *[]CastaiInventoryV1beta1CommitmentAssignment `json:"assignments,omitempty"`
}

// CastaiInventoryV1beta1GetCommitmentsAssignmentsResponse defines model for castai.inventory.v1beta1.GetCommitmentsAssignmentsResponse.
type CastaiInventoryV1beta1GetCommitmentsAssignmentsResponse struct {
	CommitmentsAssignments *[]CastaiInventoryV1beta1CommitmentAssignment `json:"commitmentsAssignments,omitempty"`
}

// CastaiInventoryV1beta1GetCommitmentsResponse defines model for castai.inventory.v1beta1.GetCommitmentsResponse.
type CastaiInventoryV1beta1GetCommitmentsResponse struct {
	Commitments *[]CastaiInventoryV1beta1Commitment `json:"commitments,omitempty"`
}

// CastaiInventoryV1beta1GetGCPCommitmentsImportScriptResponse defines model for castai.inventory.v1beta1.GetGCPCommitmentsImportScriptResponse.
type CastaiInventoryV1beta1GetGCPCommitmentsImportScriptResponse struct {
	Script *string `json:"script,omitempty"`
}

// CastaiInventoryV1beta1GetOrganizationReservationsBalanceResponse defines model for castai.inventory.v1beta1.GetOrganizationReservationsBalanceResponse.
type CastaiInventoryV1beta1GetOrganizationReservationsBalanceResponse struct {
	Reservations *[]CastaiInventoryV1beta1ReservationBalanceV2 `json:"reservations,omitempty"`
}

// CastaiInventoryV1beta1GetOrganizationResourceUsageResponse defines model for castai.inventory.v1beta1.GetOrganizationResourceUsageResponse.
type CastaiInventoryV1beta1GetOrganizationResourceUsageResponse struct {
	InstanceTypes *[]CastaiInventoryV1beta1InstanceTypeAggregate `json:"instanceTypes,omitempty"`
}

// CastaiInventoryV1beta1GetPricingForClusterNodeResponse defines model for castai.inventory.v1beta1.GetPricingForClusterNodeResponse.
type CastaiInventoryV1beta1GetPricingForClusterNodeResponse struct {
	Node *CastaiInventoryV1beta1NodePricing `json:"node,omitempty"`
}

// CastaiInventoryV1beta1GetPricingForClusterNodesResponse defines model for castai.inventory.v1beta1.GetPricingForClusterNodesResponse.
type CastaiInventoryV1beta1GetPricingForClusterNodesResponse struct {
	Nodes *[]CastaiInventoryV1beta1NodePricing `json:"nodes,omitempty"`
}

// CastaiInventoryV1beta1GetPricingForOrganizationNodesResponse defines model for castai.inventory.v1beta1.GetPricingForOrganizationNodesResponse.
type CastaiInventoryV1beta1GetPricingForOrganizationNodesResponse struct {
	Nodes *[]CastaiInventoryV1beta1NodePricing `json:"nodes,omitempty"`
}

// CastaiInventoryV1beta1GetReservationsBalanceResponse defines model for castai.inventory.v1beta1.GetReservationsBalanceResponse.
type CastaiInventoryV1beta1GetReservationsBalanceResponse struct {
	Reservations *[]CastaiInventoryV1beta1ReservationBalance `json:"reservations,omitempty"`
}

// CastaiInventoryV1beta1GetReservationsResponse defines model for castai.inventory.v1beta1.GetReservationsResponse.
type CastaiInventoryV1beta1GetReservationsResponse struct {
	Reservations *[]CastaiInventoryV1beta1ReservationDetails `json:"reservations,omitempty"`
}

// CastaiInventoryV1beta1InstanceReliability defines model for castai.inventory.v1beta1.InstanceReliability.
type CastaiInventoryV1beta1InstanceReliability struct {
	SpotReclaimRateHigh *string `json:"spotReclaimRateHigh,omitempty"`
	SpotReclaimRateLow  *string `json:"spotReclaimRateLow,omitempty"`
}

// CastaiInventoryV1beta1InstanceType InstanceType is a cloud service provider specific VM type with basic data.
type CastaiInventoryV1beta1InstanceType struct {
	Architecture     *string `json:"architecture,omitempty"`
	BareMetal        *bool   `json:"bareMetal,omitempty"`
	Burstable        *bool   `json:"burstable,omitempty"`
	CastChoice       *bool   `json:"castChoice,omitempty"`
	ComputeOptimized *bool   `json:"computeOptimized,omitempty"`

	// CpuPrice CPU base price of the instance type. $/CPU hour.
	CpuPrice *string `json:"cpuPrice,omitempty"`

	// CreatedAt CreatedAt is the timestamp of the creation of this instance type object.
	CreatedAt      *time.Time                     `json:"createdAt,omitempty"`
	CustomInstance *bool                          `json:"customInstance,omitempty"`
	GpuInfo        *CastaiInventoryV1beta1GPUInfo `json:"gpuInfo,omitempty"`

	// Id ID of the instance type.
	Id *string `json:"id,omitempty"`

	// InstanceType InstanceType name. This value is provider specific.
	InstanceType *string `json:"instanceType,omitempty"`

	// NetworkInfo Describes the network settings for the instance type.
	NetworkInfo *CastaiInventoryV1beta1NetworkInfo `json:"networkInfo,omitempty"`
	Obsolete    *bool                              `json:"obsolete,omitempty"`
	Os          *string                            `json:"os,omitempty"`

	// Price Price of the instance type. $/hour.
	Price *string `json:"price,omitempty"`

	// Provider Provider name of the instance type.
	Provider *string `json:"provider,omitempty"`

	// Ram Ram (in MiB) available on the instance type.
	Ram *string `json:"ram,omitempty"`

	// RamPrice RAM base price of the instance type. $/GiB hour.
	RamPrice *string `json:"ramPrice,omitempty"`

	// Region Region of the instance type. This value is provider specific.
	Region          *string                                    `json:"region,omitempty"`
	SpotReliability *CastaiInventoryV1beta1InstanceReliability `json:"spotReliability,omitempty"`

	// StorageInfo StorageInfo describes the available local volumes for an instance type.
	StorageInfo *CastaiInventoryV1beta1StorageInfo `json:"storageInfo,omitempty"`

	// UpdatedAt UpdatedAt is the timestamp of the last update operation on this instance type object.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Vcpu Vcpu available on the instance type.
	Vcpu  *string                               `json:"vcpu,omitempty"`
	Zones *[]CastaiInventoryV1beta1InstanceZone `json:"zones,omitempty"`
}

// CastaiInventoryV1beta1InstanceTypeAggregate defines model for castai.inventory.v1beta1.InstanceTypeAggregate.
type CastaiInventoryV1beta1InstanceTypeAggregate struct {
	// AzId Availability zone ID of the instance type.
	AzId      *string `json:"azId,omitempty"`
	ClusterId *string `json:"clusterId,omitempty"`
	Count     *int32  `json:"count,omitempty"`

	// InstanceType InstanceType name. This value is provider specific.
	InstanceType *string   `json:"instanceType,omitempty"`
	NodeIds      *[]string `json:"nodeIds,omitempty"`

	// Price Price of the instance type. $/hour.
	Price *string `json:"price,omitempty"`

	// Provider Provider name of the instance type.
	Provider *string `json:"provider,omitempty"`

	// Ram Ram (in MiB) available on the instance type.
	Ram *string `json:"ram,omitempty"`

	// Region Region of the instance type. This value is provider specific.
	Region *string `json:"region,omitempty"`

	// Spot Spot defines if the instance type is a spot instance.
	Spot *bool `json:"spot,omitempty"`

	// Vcpu Vcpu available on the instance type.
	Vcpu *string `json:"vcpu,omitempty"`
}

// CastaiInventoryV1beta1InstanceTypeBasedUsage defines model for castai.inventory.v1beta1.InstanceTypeBasedUsage.
type CastaiInventoryV1beta1InstanceTypeBasedUsage struct {
	InstanceTypes     *[]CastaiInventoryV1beta1InstanceTypeAggregate `json:"instanceTypes,omitempty"`
	Usage             *float64                                       `json:"usage"`
	UsageDistribution *CastaiInventoryV1beta1UsageDistribution       `json:"usageDistribution,omitempty"`
}

// CastaiInventoryV1beta1InstanceZone defines model for castai.inventory.v1beta1.InstanceZone.
type CastaiInventoryV1beta1InstanceZone struct {
	AttachableGpuDevices *[]CastaiInventoryV1beta1AttachableGPUDevice `json:"attachableGpuDevices,omitempty"`
	AttachedGpuDevices   *[]CastaiInventoryV1beta1GPUDevice           `json:"attachedGpuDevices,omitempty"`
	AzId                 *string                                      `json:"azId,omitempty"`
	CpuPrice             *string                                      `json:"cpuPrice,omitempty"`
	LastUnavailableAt    *time.Time                                   `json:"lastUnavailableAt,omitempty"`
	Price                *string                                      `json:"price,omitempty"`
	RamPrice             *string                                      `json:"ramPrice,omitempty"`
	Spot                 *bool                                        `json:"spot,omitempty"`
	Unavailable          *bool                                        `json:"unavailable,omitempty"`
}

// CastaiInventoryV1beta1LocalSSDExtension defines model for castai.inventory.v1beta1.LocalSSDExtension.
type CastaiInventoryV1beta1LocalSSDExtension struct {
	SizeGib *int32 `json:"sizeGib,omitempty"`
}

// CastaiInventoryV1beta1NetworkInfo Describes the network settings for the instance type.
type CastaiInventoryV1beta1NetworkInfo struct {
	// BaseBandwidthMbps Base bandwidth in Mbps.
	BaseBandwidthMbps *int32 `json:"baseBandwidthMbps,omitempty"`

	// BurstBandwidthMbps Burst bandwidth in Mbps. It's equal to base bandwidth if not specified.
	BurstBandwidthMbps *int32 `json:"burstBandwidthMbps,omitempty"`

	// Ipv4AddressesPerInterface The maximum number of IPv4 addresses per network interface.
	Ipv4AddressesPerInterface *int32 `json:"ipv4AddressesPerInterface,omitempty"`

	// MaximumNetworkInterfaces The maximum number of network interfaces for the instance type.
	MaximumNetworkInterfaces *int32 `json:"maximumNetworkInterfaces,omitempty"`
}

// CastaiInventoryV1beta1NodeExtension defines model for castai.inventory.v1beta1.NodeExtension.
type CastaiInventoryV1beta1NodeExtension struct {
	Gpu      *CastaiInventoryV1beta1GPUExtension      `json:"gpu,omitempty"`
	LocalSsd *CastaiInventoryV1beta1LocalSSDExtension `json:"localSsd,omitempty"`
	Price    *string                                  `json:"price,omitempty"`
	Type     *CastaiInventoryV1beta1ExtensionType     `json:"type,omitempty"`
}

// CastaiInventoryV1beta1NodePricing defines model for castai.inventory.v1beta1.NodePricing.
type CastaiInventoryV1beta1NodePricing struct {
	BasePrice         *string                                `json:"basePrice,omitempty"`
	Discounts         *[]CastaiInventoryV1beta1Discount      `json:"discounts,omitempty"`
	Extensions        *[]CastaiInventoryV1beta1NodeExtension `json:"extensions,omitempty"`
	Id                *string                                `json:"id,omitempty"`
	TotalPrice        *string                                `json:"totalPrice,omitempty"`
	TotalRegularPrice *string                                `json:"totalRegularPrice,omitempty"`
}

// CastaiInventoryV1beta1OverwriteReservationsResponse defines model for castai.inventory.v1beta1.OverwriteReservationsResponse.
type CastaiInventoryV1beta1OverwriteReservationsResponse struct {
	Reservations *[]CastaiInventoryV1beta1ReservationDetails `json:"reservations,omitempty"`
}

// CastaiInventoryV1beta1ReplaceCommitmentAssignmentsResponse defines model for castai.inventory.v1beta1.ReplaceCommitmentAssignmentsResponse.
type CastaiInventoryV1beta1ReplaceCommitmentAssignmentsResponse struct {
	Assignments *[]CastaiInventoryV1beta1CommitmentAssignment `json:"assignments,omitempty"`
}

// CastaiInventoryV1beta1ReservationBalance defines model for castai.inventory.v1beta1.ReservationBalance.
type CastaiInventoryV1beta1ReservationBalance struct {
	InstanceTypes *[]CastaiInventoryV1beta1CountableInstanceType `json:"instanceTypes,omitempty"`
	Reservation   *CastaiInventoryV1beta1ReservationDetails      `json:"reservation,omitempty"`
	Usage         *float64                                       `json:"usage,omitempty"`
}

// CastaiInventoryV1beta1ReservationBalanceV2 defines model for castai.inventory.v1beta1.ReservationBalanceV2.
type CastaiInventoryV1beta1ReservationBalanceV2 struct {
	InstanceTypes *[]CastaiInventoryV1beta1InstanceTypeAggregate `json:"instanceTypes,omitempty"`
	Reservation   *CastaiInventoryV1beta1ReservationDetails      `json:"reservation,omitempty"`
	Usage         *float64                                       `json:"usage,omitempty"`
}

// CastaiInventoryV1beta1ReservationDetails defines model for castai.inventory.v1beta1.ReservationDetails.
type CastaiInventoryV1beta1ReservationDetails struct {
	Count         *int32     `json:"count,omitempty"`
	Cpu           *string    `json:"cpu,omitempty"`
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	EndDate       *time.Time `json:"endDate"`
	InstanceType  *string    `json:"instanceType,omitempty"`
	Name          *string    `json:"name,omitempty"`
	Price         *string    `json:"price,omitempty"`
	Provider      *string    `json:"provider,omitempty"`
	RamMib        *string    `json:"ramMib,omitempty"`
	Region        *string    `json:"region,omitempty"`
	ReservationId *string    `json:"reservationId,omitempty"`
	StartDate     *time.Time `json:"startDate,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	ZoneId        *string    `json:"zoneId"`
	ZoneName      *string    `json:"zoneName"`
}

// CastaiInventoryV1beta1StorageDriver StorageDriver is the type of driver used for the local storage volume interface and CPU communication.
//
//   - invalid: Invalid is invalid.
//   - nvme: NVMe driver is designed specifically for SSD drives and could be considered "optimized" for SSD usage.
//   - sata: SATA driver is designed for HDD drives with spinning technology but also supports SSD drives.
type CastaiInventoryV1beta1StorageDriver string

// CastaiInventoryV1beta1StorageInfo StorageInfo describes the available local volumes for an instance type.
type CastaiInventoryV1beta1StorageInfo struct {
	// Devices List of local storage devices available on the instance type.
	Devices *[]CastaiInventoryV1beta1StorageInfoDevice `json:"devices,omitempty"`

	// Driver StorageDriver is the type of driver used for the local storage volume interface and CPU communication.
	//
	//  - invalid: Invalid is invalid.
	//  - nvme: NVMe driver is designed specifically for SSD drives and could be considered "optimized" for SSD usage.
	//  - sata: SATA driver is designed for HDD drives with spinning technology but also supports SSD drives.
	Driver *CastaiInventoryV1beta1StorageDriver `json:"driver,omitempty"`

	// TotalSizeGib TotalSizeGiB is a sum of all storage devices' size.
	TotalSizeGib *int32 `json:"totalSizeGib,omitempty"`
}

// CastaiInventoryV1beta1StorageInfoDevice Device is a local storage block device available on the instance type.
type CastaiInventoryV1beta1StorageInfoDevice struct {
	// SizeGib The size in GiB.
	SizeGib *int32 `json:"sizeGib,omitempty"`

	// Type Type is the technology used for the local storage device.
	//
	//  - invalid: Invalid is invalid.
	//  - ssd: SSD.
	//  - hdd: HDD.
	Type *CastaiInventoryV1beta1StorageInfoDeviceType `json:"type,omitempty"`
}

// CastaiInventoryV1beta1StorageInfoDeviceType Type is the technology used for the local storage device.
//
//   - invalid: Invalid is invalid.
//   - ssd: SSD.
//   - hdd: HDD.
type CastaiInventoryV1beta1StorageInfoDeviceType string

// CastaiInventoryV1beta1SyncGCPBillingAPIDataResponse defines model for castai.inventory.v1beta1.SyncGCPBillingAPIDataResponse.
type CastaiInventoryV1beta1SyncGCPBillingAPIDataResponse struct {
	TaskId *string `json:"taskId,omitempty"`
}

// CastaiInventoryV1beta1UpdateCommitmentResponse defines model for castai.inventory.v1beta1.UpdateCommitmentResponse.
type CastaiInventoryV1beta1UpdateCommitmentResponse struct {
	Commitments *CastaiInventoryV1beta1Commitment `json:"commitments,omitempty"`
}

// CastaiInventoryV1beta1UsageDistribution defines model for castai.inventory.v1beta1.UsageDistribution.
type CastaiInventoryV1beta1UsageDistribution struct {
	Cpu    *float64 `json:"cpu,omitempty"`
	Memory *float64 `json:"memory,omitempty"`
}

// CastaiNotificationsV1beta1AckNotificationsRequest defines model for castai.notifications.v1beta1.AckNotificationsRequest.
type CastaiNotificationsV1beta1AckNotificationsRequest struct {
	Ids *[]string `json:"ids,omitempty"`
}

// CastaiNotificationsV1beta1AckNotificationsResponse defines model for castai.notifications.v1beta1.AckNotificationsResponse.
type CastaiNotificationsV1beta1AckNotificationsResponse struct {
	Total *string `json:"total,omitempty"`
}

// CastaiNotificationsV1beta1AddWebhookConfig defines model for castai.notifications.v1beta1.AddWebhookConfig.
type CastaiNotificationsV1beta1AddWebhookConfig struct {
	AuthKeys         *map[string]string                   `json:"authKeys,omitempty"`
	CallbackUrl      string                               `json:"callbackUrl"`
	Category         *string                              `json:"category,omitempty"`
	Name             string                               `json:"name"`
	RequestTemplate  string                               `json:"requestTemplate"`
	SeverityTriggers []CastaiNotificationsV1beta1Severity `json:"severityTriggers"`
	Subcategory      *string                              `json:"subcategory,omitempty"`
}

// CastaiNotificationsV1beta1ClusterMetadata defines model for castai.notifications.v1beta1.ClusterMetadata.
type CastaiNotificationsV1beta1ClusterMetadata struct {
	Id           *string `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Project      *string `json:"project,omitempty"`
	ProviderType *string `json:"providerType,omitempty"`
}

// CastaiNotificationsV1beta1DeleteWebhookConfigResponse defines model for castai.notifications.v1beta1.DeleteWebhookConfigResponse.
type CastaiNotificationsV1beta1DeleteWebhookConfigResponse = map[string]interface{}

// CastaiNotificationsV1beta1ListNotificationsResponse ListNotificationsResponse defines notification entries response.
type CastaiNotificationsV1beta1ListNotificationsResponse struct {
	Count        *int32                                    `json:"count,omitempty"`
	CountUnacked *int32                                    `json:"countUnacked,omitempty"`
	Items        *[]CastaiNotificationsV1beta1Notification `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// PreviousCursor previous_cursor is a token that may be used to retrieve items from the previous logical page. If empty - there were no previous page provided.
	PreviousCursor *string `json:"previousCursor,omitempty"`
}

// CastaiNotificationsV1beta1ListWebhookCategoriesResponse Response after getting list of available categories and subcategories for webhook configuration.
type CastaiNotificationsV1beta1ListWebhookCategoriesResponse struct {
	Categories *[]CastaiNotificationsV1beta1ListWebhookCategoriesResponseItem `json:"categories,omitempty"`
}

// CastaiNotificationsV1beta1ListWebhookCategoriesResponseItem defines model for castai.notifications.v1beta1.ListWebhookCategoriesResponse.Item.
type CastaiNotificationsV1beta1ListWebhookCategoriesResponseItem struct {
	Name          *string            `json:"name,omitempty"`
	Subcategories *map[string]string `json:"subcategories,omitempty"`
	Value         *string            `json:"value,omitempty"`
}

// CastaiNotificationsV1beta1ListWebhookConfigsResponse defines model for castai.notifications.v1beta1.ListWebhookConfigsResponse.
type CastaiNotificationsV1beta1ListWebhookConfigsResponse struct {
	Items *[]CastaiNotificationsV1beta1WebhookConfig `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// PreviousCursor previous_cursor is a token that may be used to retrieve items from the previous logical page. If empty - there were no previous page provided.
	PreviousCursor *string `json:"previousCursor,omitempty"`
}

// CastaiNotificationsV1beta1Notification defines model for castai.notifications.v1beta1.Notification.
type CastaiNotificationsV1beta1Notification struct {
	AckAt           *time.Time                                 `json:"ackAt,omitempty"`
	AckedBy         *string                                    `json:"ackedBy"`
	ClusterMetadata *CastaiNotificationsV1beta1ClusterMetadata `json:"clusterMetadata,omitempty"`
	CreatedAt       *time.Time                                 `json:"createdAt,omitempty"`

	// Details Free-form details from the event.
	Details   *string `json:"details,omitempty"`
	Id        *string `json:"id,omitempty"`
	IsExpired *bool   `json:"isExpired,omitempty"`

	// Message A high-level, text summary message of the event. Will be used to construct an alert's summary.
	Message           *string                                      `json:"message,omitempty"`
	Name              *string                                      `json:"name,omitempty"`
	OperationMetadata *CastaiNotificationsV1beta1OperationMetadata `json:"operationMetadata,omitempty"`
	OrganizationId    *string                                      `json:"organizationId,omitempty"`
	Severity          *CastaiNotificationsV1beta1Severity          `json:"severity,omitempty"`

	// Timestamp When the upstream system detected / created the event.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CastaiNotificationsV1beta1OperationMetadata defines model for castai.notifications.v1beta1.OperationMetadata.
type CastaiNotificationsV1beta1OperationMetadata struct {
	Id   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// CastaiNotificationsV1beta1Severity defines model for castai.notifications.v1beta1.Severity.
type CastaiNotificationsV1beta1Severity string

// CastaiNotificationsV1beta1UpdateWebhookConfig defines model for castai.notifications.v1beta1.UpdateWebhookConfig.
type CastaiNotificationsV1beta1UpdateWebhookConfig struct {
	AuthKeys         *map[string]string                   `json:"authKeys,omitempty"`
	CallbackUrl      string                               `json:"callbackUrl"`
	Category         *string                              `json:"category,omitempty"`
	Name             string                               `json:"name"`
	RequestTemplate  string                               `json:"requestTemplate"`
	SeverityTriggers []CastaiNotificationsV1beta1Severity `json:"severityTriggers"`
	Subcategory      *string                              `json:"subcategory,omitempty"`
}

// CastaiNotificationsV1beta1WebhookConfig defines model for castai.notifications.v1beta1.WebhookConfig.
type CastaiNotificationsV1beta1WebhookConfig struct {
	AuthKeys         *map[string]string                    `json:"authKeys,omitempty"`
	CallbackUrl      *string                               `json:"callbackUrl,omitempty"`
	Category         *string                               `json:"category,omitempty"`
	CreatedAt        *time.Time                            `json:"createdAt,omitempty"`
	DeletedAt        *time.Time                            `json:"deletedAt,omitempty"`
	Error            *string                               `json:"error,omitempty"`
	Id               *string                               `json:"id,omitempty"`
	Name             *string                               `json:"name,omitempty"`
	OrganizationId   *string                               `json:"organizationId,omitempty"`
	RequestTemplate  *string                               `json:"requestTemplate,omitempty"`
	SeverityTriggers *[]CastaiNotificationsV1beta1Severity `json:"severityTriggers,omitempty"`
	Status           *string                               `json:"status,omitempty"`
	Subcategory      *string                               `json:"subcategory,omitempty"`
	UpdatedAt        *time.Time                            `json:"updatedAt,omitempty"`
}

// CastaiOperationsV1beta1Operation Operation object.
type CastaiOperationsV1beta1Operation struct {
	// CreatedAt Operation creation timestamp in RFC3339Nano format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Done Indicates whether the operation has finished or not. If 'false', the operation is still in progress. If 'true',
	// the has finished.
	Done *bool `json:"done,omitempty"`

	// Error OperationError object.
	Error *CastaiOperationsV1beta1OperationError `json:"error,omitempty"`

	// FinishedAt Operation finish timestamp in RFC3339Nano format.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// Id ID of the operation.
	Id *string `json:"id,omitempty"`
}

// CastaiOperationsV1beta1OperationError OperationError object.
type CastaiOperationsV1beta1OperationError struct {
	// Details Details is a concise human readable explanation for the error.
	Details *string `json:"details,omitempty"`

	// Reason Reason is an operation specific failure code. Refer to documentation about possible outcomes.
	Reason *string `json:"reason,omitempty"`
}

// CastaiPaginationV1beta1Page Page defines how many and which fields should be returned.
type CastaiPaginationV1beta1Page struct {
	// Cursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	Cursor *string `json:"cursor,omitempty"`
	Limit  *string `json:"limit,omitempty"`
}

// CastaiPaginationV1beta1Sort defines model for castai.pagination.v1beta1.Sort.
type CastaiPaginationV1beta1Sort struct {
	Field *string `json:"field,omitempty"`

	// Order - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	Order *CastaiPaginationV1beta1SortOrder `json:"order,omitempty"`
}

// CastaiPaginationV1beta1SortOrder - ASC: ASC
//   - asc: desc
//   - DESC: ASC
//   - desc: desc
type CastaiPaginationV1beta1SortOrder string

// CastaiPartnersV1beta1CreateOrganization CreateOrganization represents a partner child organization creation request.
type CastaiPartnersV1beta1CreateOrganization struct {
	// OrganizationName Organization name is partner child organization name which will be visible in CAST AI UI.
	OrganizationName *string `json:"organizationName,omitempty"`

	// PartnerTenantId Partner_tenant_id is a partner child organization tenant id in the partner platform.
	PartnerTenantId string `json:"partnerTenantId"`
}

// CastaiPartnersV1beta1CreateToken CreateToken represents a partner child organization creation request.
type CastaiPartnersV1beta1CreateToken struct {
	// Role Role is the definition of what role the token would have.
	Role *string `json:"role,omitempty"`
}

// CastaiPartnersV1beta1DeleteTokenResponse Defines a container for partner child organization token deletion response.
type CastaiPartnersV1beta1DeleteTokenResponse = map[string]interface{}

// CastaiPartnersV1beta1ListOrganizationsResponse Defines a container for partner child organizations list request.
type CastaiPartnersV1beta1ListOrganizationsResponse struct {
	// Organizations Organizations is an array of partner child organizations.
	Organizations *[]CastaiUsersV1beta1Organization `json:"organizations,omitempty"`
}

// CastaiSsoV1beta1AzureAAD AzureAAD represents a Azure AAD connector.
type CastaiSsoV1beta1AzureAAD struct {
	// AdDomain ADDomain is the domain of the Azure AD.
	AdDomain string `json:"adDomain"`

	// ClientId ClientId is the client id of the Azure AD.
	ClientId string `json:"clientId"`

	// ClientSecret ClientSecret is the client secret of the Azure AD.
	ClientSecret *string `json:"clientSecret,omitempty"`
}

// CastaiSsoV1beta1CreateSSOConnection CreateSSOConnection represents a sso connection creation request.
type CastaiSsoV1beta1CreateSSOConnection struct {
	// Aad AzureAAD represents a Azure AAD connector.
	Aad *CastaiSsoV1beta1AzureAAD `json:"aad,omitempty"`

	// EmailDomain EmailDomain is the email domain of the connection.
	EmailDomain string `json:"emailDomain"`

	// Name Name is the name of the connection.
	Name string `json:"name"`

	// Oidc OIDC represents a OIDC connector.
	Oidc *CastaiSsoV1beta1OIDC `json:"oidc,omitempty"`

	// Okta Okta represents a Okta connector.
	Okta *CastaiSsoV1beta1Okta `json:"okta,omitempty"`
}

// CastaiSsoV1beta1DeleteSSOConnectionResponse Defines the container for the sso delete response.
type CastaiSsoV1beta1DeleteSSOConnectionResponse = map[string]interface{}

// CastaiSsoV1beta1ListSSOConnectionsResponse Defines the container for the sso list response.
type CastaiSsoV1beta1ListSSOConnectionsResponse struct {
	Connections []CastaiSsoV1beta1SSOConnection `json:"connections"`
}

// CastaiSsoV1beta1OIDC OIDC represents a OIDC connector.
type CastaiSsoV1beta1OIDC struct {
	// ClientId ClientId is the client id of the OIDC.
	ClientId string `json:"clientId"`

	// ClientSecret ClientSecret is the client secret when using back_channel type of connection.
	ClientSecret *string `json:"clientSecret"`

	// IssuerUrl IssuerUrl is the URL of the discovery document of the OpenID Connect provider you want to connect with.
	IssuerUrl string `json:"issuerUrl"`

	// Type Type is the type of the OIDC connection.
	//
	//  - TYPE_UNKNOWN: TypeUknown is the default status.
	//  - TYPE_BACK_CHANNEL: TypeBackChannel is the back channel type of OIDC connection.
	//  - TYPE_FRONT_CHANNEL: TypeFrontChannel is the front channel type of OIDC connection.
	Type CastaiSsoV1beta1OIDCType `json:"type"`
}

// CastaiSsoV1beta1OIDCType Type is the type of the OIDC connection.
//
//   - TYPE_UNKNOWN: TypeUknown is the default status.
//   - TYPE_BACK_CHANNEL: TypeBackChannel is the back channel type of OIDC connection.
//   - TYPE_FRONT_CHANNEL: TypeFrontChannel is the front channel type of OIDC connection.
type CastaiSsoV1beta1OIDCType string

// CastaiSsoV1beta1Okta Okta represents a Okta connector.
type CastaiSsoV1beta1Okta struct {
	// ClientId ClientId is the client id of the Okta.
	ClientId string `json:"clientId"`

	// ClientSecret ClientSecret is the client secret of the Okta.
	ClientSecret *string `json:"clientSecret,omitempty"`

	// OktaDomain OktaDomain is the domain of the Okta.
	OktaDomain string `json:"oktaDomain"`
}

// CastaiSsoV1beta1SSOConnection SSOConnection represents a sso connection.
type CastaiSsoV1beta1SSOConnection struct {
	// Aad AzureAAD represents a Azure AAD connector.
	Aad *CastaiSsoV1beta1AzureAAD `json:"aad,omitempty"`

	// CreatedAt CreatedAt is the time when the connection was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// EmailDomain EmailDomain is the email domain of the connection.
	EmailDomain string `json:"emailDomain"`

	// Error Error is the error message of the connection.
	Error *string `json:"error,omitempty"`

	// Id Id is the unique identifier of the connection.
	Id *string `json:"id,omitempty"`

	// Name Name is the name of the connection.
	Name string `json:"name"`

	// Oidc OIDC represents a OIDC connector.
	Oidc *CastaiSsoV1beta1OIDC `json:"oidc,omitempty"`

	// Okta Okta represents a Okta connector.
	Okta *CastaiSsoV1beta1Okta `json:"okta,omitempty"`

	// Status Status is the status of the connection.
	//
	//  - STATUS_UNKNOWN: StatusUnknown is the default status.
	//  - STATUS_ACTIVE: StatusActive is the active status.
	//  - STATUS_INACTIVE: StatusInactive is the inactive status.
	//  - STATUS_FAILED: StatusFailed is the failed status.
	Status *CastaiSsoV1beta1SSOConnectionStatus `json:"status,omitempty"`

	// UpdatedAt UpdatedAt is the time when the connection was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// CastaiSsoV1beta1SSOConnectionStatus Status is the status of the connection.
//
//   - STATUS_UNKNOWN: StatusUnknown is the default status.
//   - STATUS_ACTIVE: StatusActive is the active status.
//   - STATUS_INACTIVE: StatusInactive is the inactive status.
//   - STATUS_FAILED: StatusFailed is the failed status.
type CastaiSsoV1beta1SSOConnectionStatus string

// CastaiSsoV1beta1UpdateSSOConnection SSOConnection represents a sso connection.
type CastaiSsoV1beta1UpdateSSOConnection struct {
	// Aad AzureAAD represents a Azure AAD connector.
	Aad *CastaiSsoV1beta1AzureAAD `json:"aad,omitempty"`

	// EmailDomain EmailDomain is the email domain of the connection.
	EmailDomain *string `json:"emailDomain,omitempty"`

	// Name Name is the name of the connection.
	Name *string `json:"name,omitempty"`

	// Oidc OIDC represents a OIDC connector.
	Oidc *CastaiSsoV1beta1OIDC `json:"oidc,omitempty"`

	// Okta Okta represents a Okta connector.
	Okta *CastaiSsoV1beta1Okta `json:"okta,omitempty"`
}

// CastaiUsageV1beta1ClusterMetadata defines model for castai.usage.v1beta1.ClusterMetadata.
type CastaiUsageV1beta1ClusterMetadata struct {
	// Id The cluster id.
	Id string `json:"id"`

	// Name The cluster name.
	Name string `json:"name"`

	// ProviderNamespaceId The project the cluster belongs to.
	ProviderNamespaceId string `json:"providerNamespaceId"`

	// ProviderType The cloud provider.
	ProviderType string `json:"providerType"`

	// Region Region represents cluster region.
	Region *CastaiUsageV1beta1Region `json:"region,omitempty"`
}

// CastaiUsageV1beta1ClusterUsage defines model for castai.usage.v1beta1.ClusterUsage.
type CastaiUsageV1beta1ClusterUsage struct {
	Cluster CastaiUsageV1beta1ClusterMetadata `json:"cluster"`
	Entries []CastaiUsageV1beta1ResourceUsage `json:"entries"`
}

// CastaiUsageV1beta1GetUsageReportResponse defines model for castai.usage.v1beta1.GetUsageReportResponse.
type CastaiUsageV1beta1GetUsageReportResponse struct {
	Clusters *[]CastaiUsageV1beta1ClusterUsage `json:"clusters,omitempty"`

	// Period Period of time of resource usage.
	Period *CastaiUsageV1beta1Period `json:"period,omitempty"`
}

// CastaiUsageV1beta1GetUsageSummaryResponse defines model for castai.usage.v1beta1.GetUsageSummaryResponse.
type CastaiUsageV1beta1GetUsageSummaryResponse struct {
	// AvgBillableCpus Average billable cpus for requested period (if 'to' is future date - up to current day).
	AvgBillableCpus float32 `json:"avgBillableCpus"`

	// CpuHours Sum of CPU hours used in the given period.
	CpuHours float32 `json:"cpuHours"`
}

// CastaiUsageV1beta1Period Period of time of resource usage.
type CastaiUsageV1beta1Period struct {
	// From Start time of resource usage period.
	From *time.Time `json:"from,omitempty"`

	// To End time of resource usage period.
	To *time.Time `json:"to,omitempty"`
}

// CastaiUsageV1beta1Region Region represents cluster region.
type CastaiUsageV1beta1Region struct {
	// DisplayName Display name of the region.
	DisplayName *string `json:"displayName,omitempty"`

	// Name Name of the region.
	Name *string `json:"name,omitempty"`
}

// CastaiUsageV1beta1ResourceUsage ResourceUsage defines resources usage for given period.
type CastaiUsageV1beta1ResourceUsage struct {
	// BillableCpus Average count of CPU used in the given day.
	BillableCpus float32 `json:"billableCpus"`

	// CpuHours Average hour usage in the given day.
	CpuHours float32 `json:"cpuHours"`

	// Day The day of usage.
	Day string `json:"day"`
}

// CastaiUsersV1beta1AWSMarketplaceUser defines model for castai.users.v1beta1.AWSMarketplaceUser.
type CastaiUsersV1beta1AWSMarketplaceUser struct {
	// CustomerAwsAccountId CustomerAWSAccountId is Resolved using Registration token.
	CustomerAwsAccountId *string `json:"customerAwsAccountId,omitempty"`

	// CustomerIdentifier CustomerIdentifier is Resolved using Registration token.
	CustomerIdentifier *string `json:"customerIdentifier,omitempty"`

	// ProductCode ProductCode is Resolved using Registration token.
	ProductCode *string `json:"productCode,omitempty"`

	// RegistrationToken When a buyer visits your website during the registration process, the buyer
	// submits a registration token through the browser.
	RegistrationToken *string `json:"registrationToken,omitempty"`
}

// CastaiUsersV1beta1AddUserToOrganizationResponse Defines the response for adding a user to an organization.
type CastaiUsersV1beta1AddUserToOrganizationResponse = map[string]interface{}

// CastaiUsersV1beta1ClaimInvitationResponse defines model for castai.users.v1beta1.ClaimInvitationResponse.
type CastaiUsersV1beta1ClaimInvitationResponse struct {
	// Membership Membership describes user-organization membership details.
	Membership *CastaiUsersV1beta1Membership `json:"membership,omitempty"`

	// OrganizationId Organization ID.
	OrganizationId string `json:"organizationId"`
}

// CastaiUsersV1beta1CreateInvitationsRequest defines model for castai.users.v1beta1.CreateInvitationsRequest.
type CastaiUsersV1beta1CreateInvitationsRequest struct {
	// Members Memberships to create.
	Members *[]CastaiUsersV1beta1NewMembershipByEmail `json:"members,omitempty"`
}

// CastaiUsersV1beta1CreateInvitationsResponse defines model for castai.users.v1beta1.CreateInvitationsResponse.
type CastaiUsersV1beta1CreateInvitationsResponse struct {
	// InvitationIds Invitation IDs.
	InvitationIds *[]string `json:"invitationIds,omitempty"`
}

// CastaiUsersV1beta1CurrentUserProfileResponse defines model for castai.users.v1beta1.CurrentUserProfileResponse.
type CastaiUsersV1beta1CurrentUserProfileResponse struct {
	// Email User email.
	Email *string `json:"email,omitempty"`

	// FirstLogin User first login.
	FirstLogin *bool `json:"firstLogin,omitempty"`

	// HasHubspotContact HasHubspotContact is true if user has Hubspot contact form submitted.
	HasHubspotContact *bool `json:"hasHubspotContact,omitempty"`

	// Id User ID.
	Id *string `json:"id,omitempty"`

	// Name User name.
	Name *string `json:"name,omitempty"`

	// Username User username.
	Username *string `json:"username,omitempty"`
}

// CastaiUsersV1beta1DeleteInvitationResponse Defines the empty response to invitation deletion.
type CastaiUsersV1beta1DeleteInvitationResponse = map[string]interface{}

// CastaiUsersV1beta1DeleteOrganizationResponse Defines the empty response to organization deletion.
type CastaiUsersV1beta1DeleteOrganizationResponse = map[string]interface{}

// CastaiUsersV1beta1GCPMarketplaceUser defines model for castai.users.v1beta1.GCPMarketplaceUser.
type CastaiUsersV1beta1GCPMarketplaceUser struct {
	// AccountId Google procurement account ID.
	AccountId *string `json:"accountId,omitempty"`

	// Roles Roles is an array of strings representing the user's roles.
	// Right now, it can be either: account_admin, which indicates that the user is a Billing Account Administrator of the billing account that purchased the product,
	// or ** project_editor, which indicates that the user is a Project Editor, but not a Billing Administrator, of the project under that billing account.
	Roles *[]string `json:"roles,omitempty"`

	// UserIdentity User identity is the user's obfuscated GAIA ID, which can be used to initiate Open ID Connect.
	UserIdentity *string `json:"userIdentity,omitempty"`
}

// CastaiUsersV1beta1ListInvitationsResponse Defines container for the organization's pending invitations.
type CastaiUsersV1beta1ListInvitationsResponse struct {
	// Invitations Array of organization's pending invitations.
	Invitations []CastaiUsersV1beta1PendingInvitation `json:"invitations"`
	NextCursor  string                                `json:"nextCursor"`
}

// CastaiUsersV1beta1ListOrganizationUsersResponse Defines the container for organization users.
type CastaiUsersV1beta1ListOrganizationUsersResponse struct {
	// Users Array of organization users.
	Users *[]CastaiUsersV1beta1Membership `json:"users,omitempty"`
}

// CastaiUsersV1beta1ListOrganizationsResponse Defines container for the user's organizations.
type CastaiUsersV1beta1ListOrganizationsResponse struct {
	// Organizations Array of user's organizations.
	Organizations []CastaiUsersV1beta1UserOrganization `json:"organizations"`
}

// CastaiUsersV1beta1Membership Membership describes user-organization membership details.
type CastaiUsersV1beta1Membership struct {
	Role string `json:"role"`

	// User User represents a single system user.
	User CastaiUsersV1beta1User `json:"user"`
}

// CastaiUsersV1beta1NewMembership NewMembership contains data needed to create new membership in organization.
type CastaiUsersV1beta1NewMembership struct {
	// Role role of the new member.
	Role string `json:"role"`

	// UserId id of the user.
	UserId string `json:"userId"`
}

// CastaiUsersV1beta1NewMembershipByEmail defines model for castai.users.v1beta1.NewMembershipByEmail.
type CastaiUsersV1beta1NewMembershipByEmail struct {
	// Role role of the invited person.
	Role string `json:"role"`

	// UserEmail email of the invited person.
	UserEmail string `json:"userEmail"`
}

// CastaiUsersV1beta1Organization Organization which is the top level tenant in our system.
type CastaiUsersV1beta1Organization struct {
	// BillingType billing type of the organization.
	BillingType *string `json:"billingType,omitempty"`

	// CreatedAt organization creation date.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id id of the organization.
	Id *string `json:"id,omitempty"`

	// Metadata OrganizationMetadata describes organization metadata.
	Metadata *CastaiUsersV1beta1OrganizationMetadata `json:"metadata,omitempty"`

	// Name name of the organization.
	Name string `json:"name"`
}

// CastaiUsersV1beta1OrganizationMetadata OrganizationMetadata describes organization metadata.
type CastaiUsersV1beta1OrganizationMetadata struct {
	// ParentOrganizationId parent organization id.
	ParentOrganizationId *string `json:"parentOrganizationId"`

	// PartnerTenantId partner tenant id on partner system.
	PartnerTenantId *string `json:"partnerTenantId"`
}

// CastaiUsersV1beta1PendingInvitation defines model for castai.users.v1beta1.PendingInvitation.
type CastaiUsersV1beta1PendingInvitation struct {
	// Id id of the invitation.
	Id *string `json:"id,omitempty"`

	// InviteEmail email of the invited person.
	InviteEmail string `json:"inviteEmail"`

	// Role role of the invited person.
	Role string `json:"role"`

	// ValidUntil invitation expiration date.
	ValidUntil *time.Time `json:"validUntil,omitempty"`
}

// CastaiUsersV1beta1RemoveUserFromOrganizationResponse Defines the response for removing a user from an organization.
type CastaiUsersV1beta1RemoveUserFromOrganizationResponse = map[string]interface{}

// CastaiUsersV1beta1Request defines model for castai.users.v1beta1.Request.
type CastaiUsersV1beta1Request = map[string]interface{}

// CastaiUsersV1beta1User User represents a single system user.
type CastaiUsersV1beta1User struct {
	// AuthProvider (optional) whether SSO auth provider label was provided as a separate JWT claim; used when login handler calls users service.
	AuthProvider       *string                               `json:"authProvider"`
	AwsMarketplaceUser *CastaiUsersV1beta1AWSMarketplaceUser `json:"awsMarketplaceUser,omitempty"`

	// Email (required) user email.
	Email              string                                `json:"email"`
	GcpMarketplaceUser *CastaiUsersV1beta1GCPMarketplaceUser `json:"gcpMarketplaceUser,omitempty"`

	// HasHubspotContact has_hubspot_contact indicates whether user has a hubspot contact.
	HasHubspotContact *bool `json:"hasHubspotContact,omitempty"`

	// Id id of the user.
	Id *string `json:"id,omitempty"`

	// Name (required) readable user name, e.g. "John Doe".
	Name string `json:"name"`

	// ReferId (optional) refer_id is a unique identifier of the user in the referral partner system.
	ReferId *int32 `json:"referId"`

	// ReferVisit (optional) refer_visit is unique identifier of the visit in the referral partner system.
	ReferVisit *int32 `json:"referVisit"`

	// Username (required) username, corresponds to auth0 user id.
	Username string `json:"username"`
}

// CastaiUsersV1beta1UserOrganization UserOrganization describes organization user belongs to.
type CastaiUsersV1beta1UserOrganization struct {
	// CreatedAt organization creation date.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id id of the organization.
	Id *string `json:"id,omitempty"`

	// Name name of the organization.
	Name string `json:"name"`

	// Role user role in the organization.
	Role string `json:"role"`
}

// ClusteractionsV1AckClusterActionResponse defines model for clusteractions.v1.AckClusterActionResponse.
type ClusteractionsV1AckClusterActionResponse = map[string]interface{}

// ClusteractionsV1ChartSource defines model for clusteractions.v1.ChartSource.
type ClusteractionsV1ChartSource struct {
	Name    *string `json:"name,omitempty"`
	RepoUrl *string `json:"repoUrl,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ClusteractionsV1ClusterAction defines model for clusteractions.v1.ClusterAction.
type ClusteractionsV1ClusterAction struct {
	ActionApproveCsr       *ClusteractionsV1ClusterActionApproveCSR       `json:"actionApproveCsr,omitempty"`
	ActionChartRollback    *ClusteractionsV1ClusterActionChartRollback    `json:"actionChartRollback,omitempty"`
	ActionChartUninstall   *ClusteractionsV1ClusterActionChartUninstall   `json:"actionChartUninstall,omitempty"`
	ActionChartUpsert      *ClusteractionsV1ClusterActionChartUpsert      `json:"actionChartUpsert,omitempty"`
	ActionCheckNodeDeleted *ClusteractionsV1ClusterActionCheckNodeDeleted `json:"actionCheckNodeDeleted,omitempty"`
	ActionCheckNodeStatus  *ClusteractionsV1ClusterActionCheckNodeStatus  `json:"actionCheckNodeStatus,omitempty"`

	// ActionCreate Generic create action that allows to create any resource providing GVR and unstructured object to be created.
	ActionCreate      *ClusteractionsV1ClusterActionCreate      `json:"actionCreate,omitempty"`
	ActionCreateEvent *ClusteractionsV1ClusterActionCreateEvent `json:"actionCreateEvent,omitempty"`

	// ActionDelete Generic delete action that allows to delete any resource providing GVR and resource name.
	ActionDelete            *ClusteractionsV1ClusterActionDelete            `json:"actionDelete,omitempty"`
	ActionDeleteNode        *ClusteractionsV1ClusterActionDeleteNode        `json:"actionDeleteNode,omitempty"`
	ActionDisconnectCluster *ClusteractionsV1ClusterActionDisconnectCluster `json:"actionDisconnectCluster,omitempty"`
	ActionDrainNode         *ClusteractionsV1ClusterActionDrainNode         `json:"actionDrainNode,omitempty"`

	// ActionPatch Generic patch action that allows to patch any resource providing GVR, name and patch body.
	ActionPatch           *ClusteractionsV1ClusterActionPatch           `json:"actionPatch,omitempty"`
	ActionPatchNode       *ClusteractionsV1ClusterActionPatchNode       `json:"actionPatchNode,omitempty"`
	ActionSendAksInitData *ClusteractionsV1ClusterActionSendAKSInitData `json:"actionSendAksInitData,omitempty"`
	CreatedAt             *time.Time                                    `json:"createdAt,omitempty"`
	DoneAt                *time.Time                                    `json:"doneAt,omitempty"`
	Error                 *string                                       `json:"error"`
	Id                    *string                                       `json:"id,omitempty"`
}

// ClusteractionsV1ClusterActionAck defines model for clusteractions.v1.ClusterActionAck.
type ClusteractionsV1ClusterActionAck struct {
	Error *string `json:"error"`
}

// ClusteractionsV1ClusterActionApproveCSR defines model for clusteractions.v1.ClusterActionApproveCSR.
type ClusteractionsV1ClusterActionApproveCSR struct {
	NodeId   *string `json:"nodeId,omitempty"`
	NodeName *string `json:"nodeName,omitempty"`
}

// ClusteractionsV1ClusterActionChartRollback defines model for clusteractions.v1.ClusterActionChartRollback.
type ClusteractionsV1ClusterActionChartRollback struct {
	Namespace   *string `json:"namespace,omitempty"`
	ReleaseName *string `json:"releaseName,omitempty"`

	// Version Version to rollback from.
	Version *string `json:"version,omitempty"`
}

// ClusteractionsV1ClusterActionChartUninstall defines model for clusteractions.v1.ClusterActionChartUninstall.
type ClusteractionsV1ClusterActionChartUninstall struct {
	Namespace   *string `json:"namespace,omitempty"`
	ReleaseName *string `json:"releaseName,omitempty"`
}

// ClusteractionsV1ClusterActionChartUpsert defines model for clusteractions.v1.ClusterActionChartUpsert.
type ClusteractionsV1ClusterActionChartUpsert struct {
	ChartSource     *ClusteractionsV1ChartSource `json:"chartSource,omitempty"`
	Namespace       *string                      `json:"namespace,omitempty"`
	ReleaseName     *string                      `json:"releaseName,omitempty"`
	ValuesOverrides *map[string]string           `json:"valuesOverrides,omitempty"`
}

// ClusteractionsV1ClusterActionCheckNodeDeleted defines model for clusteractions.v1.ClusterActionCheckNodeDeleted.
type ClusteractionsV1ClusterActionCheckNodeDeleted struct {
	NodeId   *string `json:"nodeId,omitempty"`
	NodeName *string `json:"nodeName,omitempty"`
}

// ClusteractionsV1ClusterActionCheckNodeStatus defines model for clusteractions.v1.ClusterActionCheckNodeStatus.
type ClusteractionsV1ClusterActionCheckNodeStatus struct {
	NodeId   *string `json:"nodeId,omitempty"`
	NodeName *string `json:"nodeName,omitempty"`

	// NodeStatus - NodeStatus_UNSPECIFIED: Not provided status
	//  - NodeStatus_READY: Node joined cluster
	//  - NodeStatus_DELETED: Node not exist in cluster
	NodeStatus         *ClusteractionsV1NodeStatus `json:"nodeStatus,omitempty"`
	WaitTimeoutSeconds *int32                      `json:"waitTimeoutSeconds,omitempty"`
}

// ClusteractionsV1ClusterActionCreate Generic create action that allows to create any resource providing GVR and unstructured object to be created.
type ClusteractionsV1ClusterActionCreate struct {
	Group    *string                 `json:"group,omitempty"`
	Object   *map[string]interface{} `json:"object,omitempty"`
	Resource *string                 `json:"resource,omitempty"`
	Version  *string                 `json:"version,omitempty"`
}

// ClusteractionsV1ClusterActionCreateEvent defines model for clusteractions.v1.ClusterActionCreateEvent.
type ClusteractionsV1ClusterActionCreateEvent struct {
	Action *string `json:"action,omitempty"`

	// EventTime Event time should not be set during action scheduling. It's added during actions poll.
	EventTime          *time.Time                       `json:"eventTime,omitempty"`
	EventType          *string                          `json:"eventType,omitempty"`
	Message            *string                          `json:"message,omitempty"`
	ObjectReference    *ClusteractionsV1ObjectReference `json:"objectReference,omitempty"`
	Reason             *string                          `json:"reason,omitempty"`
	ReportingComponent *string                          `json:"reportingComponent,omitempty"`
}

// ClusteractionsV1ClusterActionDelete Generic delete action that allows to delete any resource providing GVR and resource name.
type ClusteractionsV1ClusterActionDelete struct {
	Id *ClusteractionsV1ObjectID `json:"id,omitempty"`
}

// ClusteractionsV1ClusterActionDeleteNode defines model for clusteractions.v1.ClusterActionDeleteNode.
type ClusteractionsV1ClusterActionDeleteNode struct {
	NodeId   *string `json:"nodeId,omitempty"`
	NodeName *string `json:"nodeName,omitempty"`
}

// ClusteractionsV1ClusterActionDisconnectCluster defines model for clusteractions.v1.ClusterActionDisconnectCluster.
type ClusteractionsV1ClusterActionDisconnectCluster = map[string]interface{}

// ClusteractionsV1ClusterActionDrainNode defines model for clusteractions.v1.ClusterActionDrainNode.
type ClusteractionsV1ClusterActionDrainNode struct {
	DrainTimeoutSeconds *int32  `json:"drainTimeoutSeconds,omitempty"`
	Force               *bool   `json:"force,omitempty"`
	NodeId              *string `json:"nodeId,omitempty"`
	NodeName            *string `json:"nodeName,omitempty"`
}

// ClusteractionsV1ClusterActionPatch Generic patch action that allows to patch any resource providing GVR, name and patch body.
type ClusteractionsV1ClusterActionPatch struct {
	Id        *ClusteractionsV1ObjectID `json:"id,omitempty"`
	Patch     *string                   `json:"patch,omitempty"`
	PatchType *string                   `json:"patchType,omitempty"`
}

// ClusteractionsV1ClusterActionPatchNode defines model for clusteractions.v1.ClusterActionPatchNode.
type ClusteractionsV1ClusterActionPatchNode struct {
	Annotations   *map[string]string           `json:"annotations,omitempty"`
	Capacity      *map[string]string           `json:"capacity,omitempty"`
	Labels        *map[string]string           `json:"labels,omitempty"`
	NodeId        *string                      `json:"nodeId,omitempty"`
	NodeName      *string                      `json:"nodeName,omitempty"`
	Taints        *[]ClusteractionsV1NodeTaint `json:"taints,omitempty"`
	Unschedulable *bool                        `json:"unschedulable"`
}

// ClusteractionsV1ClusterActionSendAKSInitData defines model for clusteractions.v1.ClusterActionSendAKSInitData.
type ClusteractionsV1ClusterActionSendAKSInitData = map[string]interface{}

// ClusteractionsV1IngestLogsResponse defines model for clusteractions.v1.IngestLogsResponse.
type ClusteractionsV1IngestLogsResponse = map[string]interface{}

// ClusteractionsV1LogEvent defines model for clusteractions.v1.LogEvent.
type ClusteractionsV1LogEvent struct {
	Fields  *map[string]string `json:"fields,omitempty"`
	Level   *string            `json:"level,omitempty"`
	Message *string            `json:"message,omitempty"`
	Time    *time.Time         `json:"time,omitempty"`
}

// ClusteractionsV1NodeStatus - NodeStatus_UNSPECIFIED: Not provided status
//   - NodeStatus_READY: Node joined cluster
//   - NodeStatus_DELETED: Node not exist in cluster
type ClusteractionsV1NodeStatus string

// ClusteractionsV1NodeTaint defines model for clusteractions.v1.NodeTaint.
type ClusteractionsV1NodeTaint struct {
	Effect *string `json:"effect,omitempty"`
	Key    *string `json:"key,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// ClusteractionsV1ObjectID defines model for clusteractions.v1.ObjectID.
type ClusteractionsV1ObjectID struct {
	// Group For the object that are in the core group (e.g. pods, nodes, namespaces etc.
	// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#-strong-api-groups-strong-)
	// use `core` as a group name.
	Group     *string `json:"group,omitempty"`
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace"`
	Resource  *string `json:"resource,omitempty"`
	Version   *string `json:"version,omitempty"`
}

// ClusteractionsV1ObjectReference defines model for clusteractions.v1.ObjectReference.
type ClusteractionsV1ObjectReference struct {
	ApiVersion      *string `json:"apiVersion"`
	FieldPath       *string `json:"fieldPath"`
	Kind            *string `json:"kind"`
	Name            *string `json:"name"`
	Namespace       *string `json:"namespace"`
	ResourceVersion *string `json:"resourceVersion"`
	Uid             *string `json:"uid"`
}

// ClusteractionsV1PollClusterActionsResponse defines model for clusteractions.v1.PollClusterActionsResponse.
type ClusteractionsV1PollClusterActionsResponse struct {
	Items *[]ClusteractionsV1ClusterAction `json:"items,omitempty"`
}

// ComponentsV1ComponentLogs defines model for components.v1.ComponentLogs.
type ComponentsV1ComponentLogs struct {
	// Entries The logs to ingest.
	Entries []ComponentsV1LogEntry `json:"entries"`

	// Version The version of the source component.
	Version string `json:"version"`
}

// ComponentsV1IngestLogsResponse defines model for components.v1.IngestLogsResponse.
type ComponentsV1IngestLogsResponse = map[string]interface{}

// ComponentsV1LogEntry Represents a single log entry.
type ComponentsV1LogEntry struct {
	// Fields The fields of the log.
	Fields *map[string]string `json:"fields,omitempty"`

	// Level Standard log levels.
	Level ComponentsV1LogLevel `json:"level"`

	// Message The log message.
	Message string `json:"message"`

	// Time The time the log was emitted.
	Time time.Time `json:"time"`
}

// ComponentsV1LogLevel Standard log levels.
type ComponentsV1LogLevel string

// CostreportV1beta1AllocationGroup defines model for costreport.v1beta1.AllocationGroup.
type CostreportV1beta1AllocationGroup struct {
	Filter *CostreportV1beta1AllocationGroupFilter `json:"filter,omitempty"`
	Id     *string                                 `json:"id,omitempty"`
	Name   *string                                 `json:"name,omitempty"`
}

// CostreportV1beta1AllocationGroupDetails defines model for costreport.v1beta1.AllocationGroupDetails.
type CostreportV1beta1AllocationGroupDetails struct {
	Filter *CostreportV1beta1AllocationGroupFilter `json:"filter,omitempty"`
	Name   *string                                 `json:"name,omitempty"`
}

// CostreportV1beta1AllocationGroupFilter defines model for costreport.v1beta1.AllocationGroupFilter.
type CostreportV1beta1AllocationGroupFilter struct {
	ClusterIds         *[]string                                           `json:"clusterIds,omitempty"`
	Labels             *[]CostreportV1beta1AllocationGroupFilterLabelValue `json:"labels,omitempty"`
	LabelsOperator     *CostreportV1beta1FilterOperator                    `json:"labelsOperator,omitempty"`
	Namespaces         *[]string                                           `json:"namespaces,omitempty"`
	NodeLabels         *[]CostreportV1beta1AllocationGroupFilterLabelValue `json:"nodeLabels,omitempty"`
	NodeLabelsOperator *CostreportV1beta1FilterOperator                    `json:"nodeLabelsOperator,omitempty"`
}

// CostreportV1beta1AllocationGroupFilterLabelValue defines model for costreport.v1beta1.AllocationGroupFilter.LabelValue.
type CostreportV1beta1AllocationGroupFilterLabelValue struct {
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// CostreportV1beta1ClusterNamespaces defines model for costreport.v1beta1.ClusterNamespaces.
type CostreportV1beta1ClusterNamespaces struct {
	ClusterId  *string   `json:"clusterId,omitempty"`
	Namespaces *[]string `json:"namespaces,omitempty"`
}

// CostreportV1beta1ClusterSummary Defines summary of cluster.
type CostreportV1beta1ClusterSummary struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// CostHourlyOnDemand Cost per hour on-demand.
	CostHourlyOnDemand *string `json:"costHourlyOnDemand,omitempty"`

	// CostHourlySpot Cost per hour spot.
	CostHourlySpot *string `json:"costHourlySpot,omitempty"`

	// CostHourlySpotFallback Cost per hour spot fallback.
	CostHourlySpotFallback *string `json:"costHourlySpotFallback,omitempty"`

	// CpuAllocatableOnDemand Allocatable CPU cores on-demand.
	CpuAllocatableOnDemand *string `json:"cpuAllocatableOnDemand,omitempty"`

	// CpuAllocatableSpot Allocatable CPU cores spot.
	CpuAllocatableSpot *string `json:"cpuAllocatableSpot,omitempty"`

	// CpuAllocatableSpotFallback Allocatable CPU cores spot fallback.
	CpuAllocatableSpotFallback *string `json:"cpuAllocatableSpotFallback,omitempty"`

	// CpuCostHourlyOnDemand CPU cost per hour on-demand.
	CpuCostHourlyOnDemand *string `json:"cpuCostHourlyOnDemand,omitempty"`

	// CpuCostHourlySpot CPU cost per hour spot.
	CpuCostHourlySpot *string `json:"cpuCostHourlySpot,omitempty"`

	// CpuCostHourlySpotFallback CPU cost per hour spot fallback.
	CpuCostHourlySpotFallback *string `json:"cpuCostHourlySpotFallback,omitempty"`

	// CpuProvisionedOnDemand Provisioned CPU cores on-demand.
	CpuProvisionedOnDemand *string `json:"cpuProvisionedOnDemand,omitempty"`

	// CpuProvisionedSpot Provisioned CPU cores spot.
	CpuProvisionedSpot *string `json:"cpuProvisionedSpot,omitempty"`

	// CpuProvisionedSpotFallback Provisioned CPU cores spot fallback.
	CpuProvisionedSpotFallback *string `json:"cpuProvisionedSpotFallback,omitempty"`

	// CpuRequestedOnDemand Requested CPU cores on-demand.
	CpuRequestedOnDemand *string `json:"cpuRequestedOnDemand,omitempty"`

	// CpuRequestedSpot Requested CPU cores spot.
	CpuRequestedSpot *string `json:"cpuRequestedSpot,omitempty"`

	// CpuRequestedSpotFallback Requested CPU cores spot fallback.
	CpuRequestedSpotFallback *string `json:"cpuRequestedSpotFallback,omitempty"`

	// CpuUsed Used CPU cores.
	CpuUsed *string `json:"cpuUsed,omitempty"`

	// GpuAllocatableOnDemand Allocatable GPUs on-demand.
	GpuAllocatableOnDemand *string `json:"gpuAllocatableOnDemand,omitempty"`

	// GpuAllocatableSpot Allocatable GPUs spot.
	GpuAllocatableSpot *string `json:"gpuAllocatableSpot,omitempty"`

	// GpuAllocatableSpotFallback Allocatable GPUs spot fallback.
	GpuAllocatableSpotFallback *string `json:"gpuAllocatableSpotFallback,omitempty"`

	// GpuCostHourlyOnDemand GPU cost per hour on-demand.
	GpuCostHourlyOnDemand *string `json:"gpuCostHourlyOnDemand,omitempty"`

	// GpuCostHourlySpot GPU cost per hour spot.
	GpuCostHourlySpot *string `json:"gpuCostHourlySpot,omitempty"`

	// GpuCostHourlySpotFallback GPU cost per hour spot fallback.
	GpuCostHourlySpotFallback *string `json:"gpuCostHourlySpotFallback,omitempty"`

	// GpuProvisionedOnDemand Provisioned GPUs on-demand.
	GpuProvisionedOnDemand *string `json:"gpuProvisionedOnDemand,omitempty"`

	// GpuProvisionedSpot Provisioned GPUs spot.
	GpuProvisionedSpot *string `json:"gpuProvisionedSpot,omitempty"`

	// GpuProvisionedSpotFallback Provisioned GPUs spot fallback.
	GpuProvisionedSpotFallback *string `json:"gpuProvisionedSpotFallback,omitempty"`

	// GpuRequestedOnDemand Requested GPUs on-demand.
	GpuRequestedOnDemand *string `json:"gpuRequestedOnDemand,omitempty"`

	// GpuRequestedSpot Requested GPUs spot.
	GpuRequestedSpot *string `json:"gpuRequestedSpot,omitempty"`

	// GpuRequestedSpotFallback Requested GPUs spot fallback.
	GpuRequestedSpotFallback *string `json:"gpuRequestedSpotFallback,omitempty"`

	// NodeCountOnDemand Total number of on-demand nodes.
	NodeCountOnDemand *string `json:"nodeCountOnDemand,omitempty"`

	// NodeCountOnDemandCastai Number of on-demand nodes managed by CAST.AI.
	NodeCountOnDemandCastai *string `json:"nodeCountOnDemandCastai,omitempty"`

	// NodeCountSpot Total number of spot nodes.
	NodeCountSpot *string `json:"nodeCountSpot,omitempty"`

	// NodeCountSpotCastai Number of spot nodes managed by CAST.AI.
	NodeCountSpotCastai *string `json:"nodeCountSpotCastai,omitempty"`

	// NodeCountSpotFallbackCastai Number of spot-fallback nodes managed by CAST.AI.
	NodeCountSpotFallbackCastai *string `json:"nodeCountSpotFallbackCastai,omitempty"`

	// PodCount Pod count.
	PodCount *string `json:"podCount,omitempty"`

	// RamAllocatableOnDemand Allocatable RAM GiB on-demand.
	RamAllocatableOnDemand *string `json:"ramAllocatableOnDemand,omitempty"`

	// RamAllocatableSpot Allocatable RAM GiB spot.
	RamAllocatableSpot *string `json:"ramAllocatableSpot,omitempty"`

	// RamAllocatableSpotFallback Allocatable RAM GiB spot fallback.
	RamAllocatableSpotFallback *string `json:"ramAllocatableSpotFallback,omitempty"`

	// RamCostHourlyOnDemand RAM cost per hour on-demand.
	RamCostHourlyOnDemand *string `json:"ramCostHourlyOnDemand,omitempty"`

	// RamCostHourlySpot RAM cost per hour spot.
	RamCostHourlySpot *string `json:"ramCostHourlySpot,omitempty"`

	// RamCostHourlySpotFallback RAM cost per hour spot fallback.
	RamCostHourlySpotFallback *string `json:"ramCostHourlySpotFallback,omitempty"`

	// RamProvisionedOnDemand Provisioned RAM GiB on-demand.
	RamProvisionedOnDemand *string `json:"ramProvisionedOnDemand,omitempty"`

	// RamProvisionedSpot Provisioned RAM GiB spot.
	RamProvisionedSpot *string `json:"ramProvisionedSpot,omitempty"`

	// RamProvisionedSpotFallback Provisioned RAM GiB spot fallback.
	RamProvisionedSpotFallback *string `json:"ramProvisionedSpotFallback,omitempty"`

	// RamRequestedOnDemand Requested RAM GiB on-demand.
	RamRequestedOnDemand *string `json:"ramRequestedOnDemand,omitempty"`

	// RamRequestedSpot Requested RAM GiB spot.
	RamRequestedSpot *string `json:"ramRequestedSpot,omitempty"`

	// RamRequestedSpotFallback Requested RAM GiB spot fallback.
	RamRequestedSpotFallback *string `json:"ramRequestedSpotFallback,omitempty"`

	// RamUsed Used RAM GiB.
	RamUsed *string `json:"ramUsed,omitempty"`

	// UnknownNodeCount Number of nodes with not supported instance type.
	UnknownNodeCount *string `json:"unknownNodeCount,omitempty"`

	// UnschedulablePodCount Unschedulable pod count.
	UnschedulablePodCount *string `json:"unschedulablePodCount,omitempty"`
}

// CostreportV1beta1ConfigurationAfter defines model for costreport.v1beta1.ConfigurationAfter.
type CostreportV1beta1ConfigurationAfter struct {
	// Nodes A single cluster node.
	Nodes *[]CostreportV1beta1Node `json:"nodes,omitempty"`

	// Summary Summary of suggested node configuration.
	Summary *CostreportV1beta1ConfigurationAfterSummary `json:"summary,omitempty"`
}

// CostreportV1beta1ConfigurationAfterSummary Summary of suggested node configuration.
type CostreportV1beta1ConfigurationAfterSummary struct {
	// AvgCpuPrice Average hourly price per CPU core.
	AvgCpuPrice *string `json:"avgCpuPrice,omitempty"`

	// AvgRamPrice Average hourly price per RAM GiB.
	AvgRamPrice *string `json:"avgRamPrice,omitempty"`

	// CpuCores Total number of CPU cores.
	CpuCores *int32 `json:"cpuCores,omitempty"`

	// DistinctNodeTypes Number of distinct node types.
	DistinctNodeTypes *int32 `json:"distinctNodeTypes,omitempty"`

	// Gpu Total number of GPU cores.
	Gpu *int32 `json:"gpu,omitempty"`

	// Nodes Total number of nodes.
	Nodes *int32 `json:"nodes,omitempty"`

	// Price Total hourly price of all nodes.
	Price *string `json:"price,omitempty"`

	// RamBytes Total amount of RAM in bytes.
	RamBytes *float64 `json:"ramBytes,omitempty"`
}

// CostreportV1beta1ContainerEfficiency Defines the workload efficiency details for a container.
type CostreportV1beta1ContainerEfficiency struct {
	// Current Defines the efficiency info.
	Current *CostreportV1beta1ContainerEfficiencyCurrentEfficiency `json:"current,omitempty"`

	// Items Defines the container efficiency for the container over time.
	Items []CostreportV1beta1ContainerEfficiencyEfficiencyItem `json:"items"`

	// Name Defines the name of the container.
	Name string `json:"name"`
}

// CostreportV1beta1ContainerEfficiencyCurrentEfficiency Defines the efficiency info.
type CostreportV1beta1ContainerEfficiencyCurrentEfficiency struct {
	// CpuEfficiency Defines cpu efficiency ratio for the container.
	CpuEfficiency string `json:"cpuEfficiency"`

	// Efficiency Defines the efficiency ratio for the container.
	Efficiency string `json:"efficiency"`

	// MemoryEfficiency Defines memory efficiency ratio for the container.
	MemoryEfficiency string `json:"memoryEfficiency"`

	// Recommendation Defines the resources.
	Recommendation CostreportV1beta1Resources `json:"recommendation"`

	// Requests Defines the resources.
	Requests CostreportV1beta1Resources `json:"requests"`

	// Usage Defines the resources.
	Usage CostreportV1beta1Resources `json:"usage"`
}

// CostreportV1beta1ContainerEfficiencyEfficiencyInfo Defines the efficiency info.
type CostreportV1beta1ContainerEfficiencyEfficiencyInfo struct {
	// CostImpact Defines cost impact of wasted resources per lifecycle.
	CostImpact CostreportV1beta1CostImpact `json:"costImpact"`

	// CpuEfficiency Defines cpu efficiency ratio for the container.
	CpuEfficiency string `json:"cpuEfficiency"`

	// Efficiency Defines the efficiency ratio for the container.
	Efficiency string `json:"efficiency"`

	// MemoryEfficiency Defines memory efficiency ratio for the container.
	MemoryEfficiency string `json:"memoryEfficiency"`

	// Recommendation Defines the resources.
	Recommendation CostreportV1beta1Resources `json:"recommendation"`

	// Requests Defines the resources.
	Requests CostreportV1beta1Resources `json:"requests"`

	// Usage Defines the resources.
	Usage CostreportV1beta1Resources `json:"usage"`
}

// CostreportV1beta1ContainerEfficiencyEfficiencyItem Defines the efficiency entry.
type CostreportV1beta1ContainerEfficiencyEfficiencyItem struct {
	// Info Defines the efficiency info.
	Info CostreportV1beta1ContainerEfficiencyEfficiencyInfo `json:"info"`

	// Timestamp Defines the time the efficiency information is for.
	Timestamp time.Time `json:"timestamp"`
}

// CostreportV1beta1CostImpact Defines cost impact of wasted resources per lifecycle.
type CostreportV1beta1CostImpact struct {
	// OnDemand Cost impact in $ for workload running on on-demand node.
	OnDemand string `json:"onDemand"`

	// Spot Cost impact in $ for workload running on spot node.
	Spot string `json:"spot"`

	// SpotFallback Cost impact in $ for workload running on spot-fallback node.
	SpotFallback string `json:"spotFallback"`
}

// CostreportV1beta1DeleteAllocationGroupResponse defines model for costreport.v1beta1.DeleteAllocationGroupResponse.
type CostreportV1beta1DeleteAllocationGroupResponse = map[string]interface{}

// CostreportV1beta1EgressdStatus Defines a list of possible egressd agent statuses.
//
//   - StatusUnknown: Egressd agent is unknown
//   - NotInstalled: Egressd agent is not installed
//   - Inactive: Egressd agent is not active (CAST AI didn't receive egressd metrics more than X amount of time)
//   - Active: Egressd agent is active and working
type CostreportV1beta1EgressdStatus string

// CostreportV1beta1FilterOperator defines model for costreport.v1beta1.FilterOperator.
type CostreportV1beta1FilterOperator string

// CostreportV1beta1GetAllocationGroupCostSummariesResponse defines model for costreport.v1beta1.GetAllocationGroupCostSummariesResponse.
type CostreportV1beta1GetAllocationGroupCostSummariesResponse struct {
	Items *[]CostreportV1beta1GetAllocationGroupCostSummariesResponseGroupItem `json:"items,omitempty"`
}

// CostreportV1beta1GetAllocationGroupCostSummariesResponseGroupItem defines model for costreport.v1beta1.GetAllocationGroupCostSummariesResponse.GroupItem.
type CostreportV1beta1GetAllocationGroupCostSummariesResponseGroupItem struct {
	GroupId   *string `json:"groupId,omitempty"`
	GroupName *string `json:"groupName,omitempty"`

	// Summary Defines cost details for a given time.
	Summary *CostreportV1beta1GetAllocationGroupCostSummariesResponseSummary `json:"summary,omitempty"`
}

// CostreportV1beta1GetAllocationGroupCostSummariesResponseSummary Defines cost details for a given time.
type CostreportV1beta1GetAllocationGroupCostSummariesResponseSummary struct {
	// CpuCost Total CPU cost of on-demand instances for the given time period.
	CpuCost *string `json:"cpuCost,omitempty"`

	// CpuCount Average number of CPUs used for the given time period.
	CpuCount *string `json:"cpuCount,omitempty"`

	// GpuCost Total GPU cost of on-demand instances for the given time period.
	GpuCost *string `json:"gpuCost,omitempty"`

	// GpuCount Average number of GPUs for the given time period.
	GpuCount *string `json:"gpuCount,omitempty"`

	// RamCost Total RAM cost of on-demand instances for the given time period.
	RamCost *string `json:"ramCost,omitempty"`

	// RamGib Average RAM GiB used for the given time period.
	RamGib *string `json:"ramGib,omitempty"`

	// TotalCostOnDemand Total cost of on-demand instances for the given time period.
	TotalCostOnDemand *string `json:"totalCostOnDemand,omitempty"`

	// TotalCostSpot Total cost of spot instances for the given time period.
	TotalCostSpot *string `json:"totalCostSpot,omitempty"`

	// TotalCostSpotFallback Total cost of spot-fallback instances for the given time period.
	TotalCostSpotFallback *string `json:"totalCostSpotFallback,omitempty"`
	WorkloadCount         *string `json:"workloadCount,omitempty"`
}

// CostreportV1beta1GetAllocationGroupCostTimedSummariesResponse defines model for costreport.v1beta1.GetAllocationGroupCostTimedSummariesResponse.
type CostreportV1beta1GetAllocationGroupCostTimedSummariesResponse struct {
	Items *[]CostreportV1beta1GetAllocationGroupCostTimedSummariesResponseGroupItem `json:"items,omitempty"`
}

// CostreportV1beta1GetAllocationGroupCostTimedSummariesResponseGroupItem defines model for costreport.v1beta1.GetAllocationGroupCostTimedSummariesResponse.GroupItem.
type CostreportV1beta1GetAllocationGroupCostTimedSummariesResponseGroupItem struct {
	GroupId   *string                                                                 `json:"groupId,omitempty"`
	GroupName *string                                                                 `json:"groupName,omitempty"`
	Items     *[]CostreportV1beta1GetAllocationGroupCostTimedSummariesResponseSummary `json:"items,omitempty"`
}

// CostreportV1beta1GetAllocationGroupCostTimedSummariesResponseSummary Defines cost details for a given time.
type CostreportV1beta1GetAllocationGroupCostTimedSummariesResponseSummary struct {
	// CpuCost Total CPU cost of on-demand instances for the given time period.
	CpuCost *string `json:"cpuCost,omitempty"`

	// CpuCount Average number of CPUs used for the given time period.
	CpuCount *string `json:"cpuCount,omitempty"`

	// GpuCost Total GPU cost of on-demand instances for the given time period.
	GpuCost *string `json:"gpuCost,omitempty"`

	// GpuCount Average number of GPUs for the given time period.
	GpuCount *string `json:"gpuCount,omitempty"`

	// RamCost Total RAM cost of on-demand instances for the given time period.
	RamCost *string `json:"ramCost,omitempty"`

	// RamGib Average RAM GiB used for the given time period.
	RamGib *string `json:"ramGib,omitempty"`

	// Timestamp Timestamp of entry.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// TotalCostOnDemand Total cost of on-demand instances for the given time period.
	TotalCostOnDemand *string `json:"totalCostOnDemand,omitempty"`

	// TotalCostSpot Total cost of spot instances for the given time period.
	TotalCostSpot *string `json:"totalCostSpot,omitempty"`

	// TotalCostSpotFallback Total cost of spot-fallback instances for the given time period.
	TotalCostSpotFallback *string `json:"totalCostSpotFallback,omitempty"`
	WorkloadCount         *string `json:"workloadCount,omitempty"`
}

// CostreportV1beta1GetAllocationGroupEfficiencySummaryResponse defines model for costreport.v1beta1.GetAllocationGroupEfficiencySummaryResponse.
type CostreportV1beta1GetAllocationGroupEfficiencySummaryResponse struct {
	Items *[]CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseCostAllocationGroupItem `json:"items,omitempty"`

	// TopItems Top N allocation groups with highest cost impact.
	TopItems *[]CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseTopItems `json:"topItems,omitempty"`
}

// CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseCostAllocationGroupItem defines model for costreport.v1beta1.GetAllocationGroupEfficiencySummaryResponse.CostAllocationGroupItem.
type CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseCostAllocationGroupItem struct {
	// CostImpact Defines cost impact of wasted resources per lifecycle.
	CostImpact *CostreportV1beta1CostImpact `json:"costImpact,omitempty"`
	GroupId    *string                      `json:"groupId,omitempty"`
	GroupName  *string                      `json:"groupName,omitempty"`

	// Requests Defines the resources.
	Requests *CostreportV1beta1Resources `json:"requests,omitempty"`

	// TotalCostImpact Total cost impact of the group. Sum of cost impacts by lifecycle.
	TotalCostImpact *string `json:"totalCostImpact,omitempty"`

	// Usage Defines the resources.
	Usage *CostreportV1beta1Resources `json:"usage,omitempty"`

	// Waste Defines the resources.
	Waste *CostreportV1beta1Resources `json:"waste,omitempty"`

	// WorkloadCount Number of workloads for the given time period.
	WorkloadCount *int32 `json:"workloadCount,omitempty"`
}

// CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseCostImpactHistoryItem defines model for costreport.v1beta1.GetAllocationGroupEfficiencySummaryResponse.CostImpactHistoryItem.
type CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseCostImpactHistoryItem struct {
	CostImpact *string `json:"costImpact,omitempty"`

	// Timestamp Timestamp of the cost impact.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseTopItems defines model for costreport.v1beta1.GetAllocationGroupEfficiencySummaryResponse.TopItems.
type CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseTopItems struct {
	// CostImpactHistory Cost impact of the group with daily breakdownd.
	CostImpactHistory *[]CostreportV1beta1GetAllocationGroupEfficiencySummaryResponseCostImpactHistoryItem `json:"costImpactHistory,omitempty"`
	GroupId           *string                                                                              `json:"groupId,omitempty"`
	GroupName         *string                                                                              `json:"groupName,omitempty"`

	// TotalCostImpact Total cost impact of the group.
	TotalCostImpact *string `json:"totalCostImpact,omitempty"`
}

// CostreportV1beta1GetAllocationGroupTotalCostTimedResponse defines model for costreport.v1beta1.GetAllocationGroupTotalCostTimedResponse.
type CostreportV1beta1GetAllocationGroupTotalCostTimedResponse struct {
	Count *string                                                               `json:"count,omitempty"`
	Items *[]CostreportV1beta1GetAllocationGroupTotalCostTimedResponseGroupItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`
}

// CostreportV1beta1GetAllocationGroupTotalCostTimedResponseCostItem Defines cost details for a given time.
type CostreportV1beta1GetAllocationGroupTotalCostTimedResponseCostItem struct {
	// Timestamp Timestamp of entry.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// TotalCost Total cost for the given time period.
	TotalCost *string `json:"totalCost,omitempty"`
}

// CostreportV1beta1GetAllocationGroupTotalCostTimedResponseGroupItem defines model for costreport.v1beta1.GetAllocationGroupTotalCostTimedResponse.GroupItem.
type CostreportV1beta1GetAllocationGroupTotalCostTimedResponseGroupItem struct {
	GroupId   *string                                                              `json:"groupId,omitempty"`
	GroupName *string                                                              `json:"groupName,omitempty"`
	Items     *[]CostreportV1beta1GetAllocationGroupTotalCostTimedResponseCostItem `json:"items,omitempty"`
}

// CostreportV1beta1GetClusterCostHistoryResponse Defines get cluster cost history request.
type CostreportV1beta1GetClusterCostHistoryResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Items Cost entries.
	Items *[]CostreportV1beta1GetClusterCostHistoryResponseCostEntry `json:"items,omitempty"`
}

// CostreportV1beta1GetClusterCostHistoryResponseCostDetails Defines cluster cost details: cost and resources.
type CostreportV1beta1GetClusterCostHistoryResponseCostDetails struct {
	// CostPerHour Average hourly cost of the cluster.
	CostPerHour *float64 `json:"costPerHour,omitempty"`

	// SpotCpu Average number of CPUs in all nodes of type Spot in the cluster.
	SpotCpu *float64 `json:"spotCpu,omitempty"`

	// SpotNodeCount Average number of nodes of type Spot in the cluster.
	SpotNodeCount *float64 `json:"spotNodeCount,omitempty"`

	// SpotRamGib Average RAM (GiB) memory of all nodes of type Spot in cluster.
	SpotRamGib *float64 `json:"spotRamGib,omitempty"`

	// TotalCpu Average number of CPUs in all nodes in the cluster.
	TotalCpu *float64 `json:"totalCpu,omitempty"`

	// TotalNodeCount Average number of nodes in the cluster.
	TotalNodeCount *float64 `json:"totalNodeCount,omitempty"`

	// TotalRamGib Average RAM (GiB) memory of all nodes in the cluster.
	TotalRamGib *float64 `json:"totalRamGib,omitempty"`
}

// CostreportV1beta1GetClusterCostHistoryResponseCostEntry Defines cost entry.
type CostreportV1beta1GetClusterCostHistoryResponseCostEntry struct {
	// CreatedAt Timestamp of entry creation.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Current Defines cluster cost details: cost and resources.
	Current *CostreportV1beta1GetClusterCostHistoryResponseCostDetails `json:"current,omitempty"`

	// OptimizedLayman Defines cluster cost details: cost and resources.
	OptimizedLayman *CostreportV1beta1GetClusterCostHistoryResponseCostDetails `json:"optimizedLayman,omitempty"`

	// OptimizedSpotInstances Defines cluster cost details: cost and resources.
	OptimizedSpotInstances *CostreportV1beta1GetClusterCostHistoryResponseCostDetails `json:"optimizedSpotInstances,omitempty"`

	// OptimizedSpotOnly Defines cluster cost details: cost and resources.
	OptimizedSpotOnly *CostreportV1beta1GetClusterCostHistoryResponseCostDetails `json:"optimizedSpotOnly,omitempty"`
}

// CostreportV1beta1GetClusterCostReportResponse Defines get cluster cost report response.
type CostreportV1beta1GetClusterCostReportResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Items Cost report entries.
	Items *[]CostreportV1beta1GetClusterCostReportResponseCostReportItem `json:"items,omitempty"`
}

// CostreportV1beta1GetClusterCostReportResponseCostReportItem Defines cost report item.
type CostreportV1beta1GetClusterCostReportResponseCostReportItem struct {
	// CostOnDemand Average cost of on-demand instances.
	CostOnDemand *string `json:"costOnDemand,omitempty"`

	// CostSpot Average cost of spot instances.
	CostSpot *string `json:"costSpot,omitempty"`

	// CostSpotFallback Average cost of spot-fallback instances.
	CostSpotFallback *string `json:"costSpotFallback,omitempty"`

	// CpuCostOnDemand Average CPU cost of on-demand instances.
	CpuCostOnDemand *string `json:"cpuCostOnDemand,omitempty"`

	// CpuCostSpot Average CPU cost of spot instances.
	CpuCostSpot *string `json:"cpuCostSpot,omitempty"`

	// CpuCostSpotFallback Average CPU cost of spot-fallback instances.
	CpuCostSpotFallback *string `json:"cpuCostSpotFallback,omitempty"`

	// CpuCountOnDemand Average number of CPUs on on-demand instances.
	CpuCountOnDemand *string `json:"cpuCountOnDemand,omitempty"`

	// CpuCountSpot Average number of CPUs on spot instances.
	CpuCountSpot *string `json:"cpuCountSpot,omitempty"`

	// CpuCountSpotFallback Average number of CPUs on spot-fallback instances.
	CpuCountSpotFallback *string `json:"cpuCountSpotFallback,omitempty"`

	// GpuCostOnDemand Average GPU cost of on-demand instances.
	GpuCostOnDemand *string `json:"gpuCostOnDemand,omitempty"`

	// GpuCostSpot Average GPU cost of spot instances.
	GpuCostSpot *string `json:"gpuCostSpot,omitempty"`

	// GpuCostSpotFallback Average GPU cost of spot-fallback instances.
	GpuCostSpotFallback *string `json:"gpuCostSpotFallback,omitempty"`

	// GpuCountOnDemand Average number of GPUs on on-demand instances.
	GpuCountOnDemand *string `json:"gpuCountOnDemand,omitempty"`

	// GpuCountSpot Average number of GPUs on spot instances.
	GpuCountSpot *string `json:"gpuCountSpot,omitempty"`

	// GpuCountSpotFallback Average number of GPUs on spot-fallback instances.
	GpuCountSpotFallback *string `json:"gpuCountSpotFallback,omitempty"`

	// RamCostOnDemand Average RAM cost of on-demand instances.
	RamCostOnDemand *string `json:"ramCostOnDemand,omitempty"`

	// RamCostSpot Average RAM cost of spot instances.
	RamCostSpot *string `json:"ramCostSpot,omitempty"`

	// RamCostSpotFallback Average RAM cost of spot-fallback instances.
	RamCostSpotFallback *string `json:"ramCostSpotFallback,omitempty"`

	// RamGibOnDemand Average number of RAM GiB on on-demand instances.
	RamGibOnDemand *string `json:"ramGibOnDemand,omitempty"`

	// RamGibSpot Average number of RAM GiB on spot instances.
	RamGibSpot *string `json:"ramGibSpot,omitempty"`

	// RamGibSpotFallback Average number of RAM GiB on spot-fallback instances.
	RamGibSpotFallback *string `json:"ramGibSpotFallback,omitempty"`

	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetClusterEfficiencyReportResponse Defines get cluster efficiency report response.
type CostreportV1beta1GetClusterEfficiencyReportResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string                                                     `json:"clusterId,omitempty"`
	Current   *CostreportV1beta1GetClusterEfficiencyReportResponseCurrent `json:"current,omitempty"`

	// Items Report entries.
	Items *[]CostreportV1beta1GetClusterEfficiencyReportResponseReportItem `json:"items,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason                              `json:"noDataReason,omitempty"`
	Summary      *CostreportV1beta1GetClusterEfficiencyReportResponseSummary `json:"summary,omitempty"`
}

// CostreportV1beta1GetClusterEfficiencyReportResponseCurrent defines model for costreport.v1beta1.GetClusterEfficiencyReportResponse.Current.
type CostreportV1beta1GetClusterEfficiencyReportResponseCurrent struct {
	// CpuOverprovisioningPercent CPU overprovisioning (percent).
	CpuOverprovisioningPercent *string `json:"cpuOverprovisioningPercent,omitempty"`

	// CpuProvisioned CPU cores provisioned.
	CpuProvisioned *string `json:"cpuProvisioned,omitempty"`

	// CpuRequested CPU cores requested.
	CpuRequested *string `json:"cpuRequested,omitempty"`

	// CpuUsed CPU cores actually used.
	CpuUsed *string `json:"cpuUsed,omitempty"`

	// RamGibProvisioned RAM GiB provisioned.
	RamGibProvisioned *string `json:"ramGibProvisioned,omitempty"`

	// RamGibRequested RAM GiB requested.
	RamGibRequested *string `json:"ramGibRequested,omitempty"`

	// RamGibUsed RAM GiB actually used.
	RamGibUsed *string `json:"ramGibUsed,omitempty"`

	// RamOverprovisioningPercent RAM overprovisioning (percent).
	RamOverprovisioningPercent *string `json:"ramOverprovisioningPercent,omitempty"`
}

// CostreportV1beta1GetClusterEfficiencyReportResponseReportItem Defines report item.
type CostreportV1beta1GetClusterEfficiencyReportResponseReportItem struct {
	// CpuCostOnDemand Average CPU cost of on-demand instances.
	CpuCostOnDemand *string `json:"cpuCostOnDemand,omitempty"`

	// CpuCostSpot Average CPU cost of spot instances.
	CpuCostSpot *string `json:"cpuCostSpot,omitempty"`

	// CpuCostSpotFallback Average CPU cost of spot-fallback instances.
	CpuCostSpotFallback *string `json:"cpuCostSpotFallback,omitempty"`

	// CpuCountOnDemand Average number of CPUs on on-demand instances.
	CpuCountOnDemand *string `json:"cpuCountOnDemand,omitempty"`

	// CpuCountSpot Average number of CPUs on spot instances.
	CpuCountSpot *string `json:"cpuCountSpot,omitempty"`

	// CpuCountSpotFallback Average number of CPUs on spot-fallback instances.
	CpuCountSpotFallback *string `json:"cpuCountSpotFallback,omitempty"`

	// CpuOverprovisioningOnDemand Average CPU overprovisioning on on-demand instances.
	CpuOverprovisioningOnDemand *string `json:"cpuOverprovisioningOnDemand,omitempty"`

	// CpuOverprovisioningOnDemandPercent Average CPU overprovisioning percentage on on-demand instances.
	CpuOverprovisioningOnDemandPercent *string `json:"cpuOverprovisioningOnDemandPercent,omitempty"`

	// CpuOverprovisioningSpot Average CPU overprovisioning on spot instances.
	CpuOverprovisioningSpot *string `json:"cpuOverprovisioningSpot,omitempty"`

	// CpuOverprovisioningSpotFallback Average CPU overprovisioning on spot-fallback instances.
	CpuOverprovisioningSpotFallback *string `json:"cpuOverprovisioningSpotFallback,omitempty"`

	// CpuOverprovisioningSpotFallbackPercent Average CPU overprovisioning percentage on spot-fallback instances.
	CpuOverprovisioningSpotFallbackPercent *string `json:"cpuOverprovisioningSpotFallbackPercent,omitempty"`

	// CpuOverprovisioningSpotPercent Average CPU overprovisioning percentage on spot instances.
	CpuOverprovisioningSpotPercent *string `json:"cpuOverprovisioningSpotPercent,omitempty"`

	// CpuUsedOnDemand Average number of used CPUs on on-demand instances.
	CpuUsedOnDemand *string `json:"cpuUsedOnDemand,omitempty"`

	// CpuUsedSpot Average number of used CPUs on spot instances.
	CpuUsedSpot *string `json:"cpuUsedSpot,omitempty"`

	// CpuUsedSpotFallback Average number of used CPUs on spot-fallback instances.
	CpuUsedSpotFallback *string `json:"cpuUsedSpotFallback,omitempty"`

	// RamCostOnDemand Average RAM cost of on-demand instances.
	RamCostOnDemand *string `json:"ramCostOnDemand,omitempty"`

	// RamCostSpot Average RAM cost of spot instances.
	RamCostSpot *string `json:"ramCostSpot,omitempty"`

	// RamCostSpotFallback Average RAM cost of spot-fallback instances.
	RamCostSpotFallback *string `json:"ramCostSpotFallback,omitempty"`

	// RamGibOnDemand Average number of RAM GiB on on-demand instances.
	RamGibOnDemand *string `json:"ramGibOnDemand,omitempty"`

	// RamGibSpot Average number of RAM GiB on spot instances.
	RamGibSpot *string `json:"ramGibSpot,omitempty"`

	// RamGibSpotFallback Average number of RAM GiB on spot-fallback instances.
	RamGibSpotFallback *string `json:"ramGibSpotFallback,omitempty"`

	// RamOverprovisioningOnDemand Average RAM overprovisioning on on-demand instances.
	RamOverprovisioningOnDemand *string `json:"ramOverprovisioningOnDemand,omitempty"`

	// RamOverprovisioningOnDemandPercent Average RAM overprovisioning percentage on on-demand instances.
	RamOverprovisioningOnDemandPercent *string `json:"ramOverprovisioningOnDemandPercent,omitempty"`

	// RamOverprovisioningSpot Average RAM overprovisioning on spot instances.
	RamOverprovisioningSpot *string `json:"ramOverprovisioningSpot,omitempty"`

	// RamOverprovisioningSpotFallback Average RAM overprovisioning on spot-fallback instances.
	RamOverprovisioningSpotFallback *string `json:"ramOverprovisioningSpotFallback,omitempty"`

	// RamOverprovisioningSpotFallbackPercent Average RAM overprovisioning percentage on spot-fallback instances.
	RamOverprovisioningSpotFallbackPercent *string `json:"ramOverprovisioningSpotFallbackPercent,omitempty"`

	// RamOverprovisioningSpotPercent Average RAM overprovisioning percentage on spot instances.
	RamOverprovisioningSpotPercent *string `json:"ramOverprovisioningSpotPercent,omitempty"`

	// RamUsedGibOnDemand Average number of used RAM GiB on on-demand instances.
	RamUsedGibOnDemand *string `json:"ramUsedGibOnDemand,omitempty"`

	// RamUsedGibSpot Average number of used RAM GiB on spot instances.
	RamUsedGibSpot *string `json:"ramUsedGibSpot,omitempty"`

	// RamUsedGibSpotFallback Average number of used RAM GiB on spot-fallback instances.
	RamUsedGibSpotFallback *string `json:"ramUsedGibSpotFallback,omitempty"`

	// RequestedCpuCountOnDemand Average number of requested CPUs on on-demand instances.
	RequestedCpuCountOnDemand *string `json:"requestedCpuCountOnDemand,omitempty"`

	// RequestedCpuCountSpot Average number of requested CPUs on spot instances.
	RequestedCpuCountSpot *string `json:"requestedCpuCountSpot,omitempty"`

	// RequestedCpuCountSpotFallback Average number of requested CPUs on spot-fallback instances.
	RequestedCpuCountSpotFallback *string `json:"requestedCpuCountSpotFallback,omitempty"`

	// RequestedRamGibOnDemand Average number of requested RAM GiB on on-demand instances.
	RequestedRamGibOnDemand *string `json:"requestedRamGibOnDemand,omitempty"`

	// RequestedRamGibSpot Average number of requested RAM GiB on spot instances.
	RequestedRamGibSpot *string `json:"requestedRamGibSpot,omitempty"`

	// RequestedRamGibSpotFallback Average number of requested RAM GiB on spot-fallback instances.
	RequestedRamGibSpotFallback *string `json:"requestedRamGibSpotFallback,omitempty"`

	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetClusterEfficiencyReportResponseSummary defines model for costreport.v1beta1.GetClusterEfficiencyReportResponse.Summary.
type CostreportV1beta1GetClusterEfficiencyReportResponseSummary struct {
	// CostPerCpuProvisioned Average cost per CPU provisioned.
	CostPerCpuProvisioned *string `json:"costPerCpuProvisioned,omitempty"`

	// CostPerCpuRequested Average cost per CPU requested.
	CostPerCpuRequested *string `json:"costPerCpuRequested,omitempty"`

	// CostPerCpuUsed Average cost per CPU used.
	CostPerCpuUsed *string `json:"costPerCpuUsed,omitempty"`

	// CostPerRamGibProvisioned Average cost per RAM GiB provisioned.
	CostPerRamGibProvisioned *string `json:"costPerRamGibProvisioned,omitempty"`

	// CostPerRamGibRequested Average cost per RAM GiB requested.
	CostPerRamGibRequested *string `json:"costPerRamGibRequested,omitempty"`

	// CostPerRamGibUsed Average cost per RAM GiB used.
	CostPerRamGibUsed          *string `json:"costPerRamGibUsed,omitempty"`
	CpuOverprovisioningPercent *string `json:"cpuOverprovisioningPercent,omitempty"`
	RamOverprovisioningPercent *string `json:"ramOverprovisioningPercent,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceCostReportResponse Defines the get cluster namespace cost report response.
type CostreportV1beta1GetClusterNamespaceCostReportResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`
	Count     *string `json:"count,omitempty"`

	// Items Namespace cost entries.
	Items *[]CostreportV1beta1GetClusterNamespaceCostReportResponseNamespaceReportItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceCostReportResponseNamespaceReportItem defines model for costreport.v1beta1.GetClusterNamespaceCostReportResponse.NamespaceReportItem.
type CostreportV1beta1GetClusterNamespaceCostReportResponseNamespaceReportItem struct {
	// CostMetrics Cost metrics of the namespace.
	CostMetrics *[]CostreportV1beta1GetClusterNamespaceCostReportResponseNamespaceReportItemNamespaceCost `json:"costMetrics,omitempty"`

	// Namespace Name of the namespace.
	Namespace *string `json:"namespace,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceCostReportResponseNamespaceReportItemNamespaceCost defines model for costreport.v1beta1.GetClusterNamespaceCostReportResponse.NamespaceReportItem.NamespaceCost.
type CostreportV1beta1GetClusterNamespaceCostReportResponseNamespaceReportItemNamespaceCost struct {
	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// TotalCost Total cost of the namespace for the given time period.
	TotalCost *string `json:"totalCost,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceCostReportSummariesResponse Defines the get cluster namespace cost report summaries response.
type CostreportV1beta1GetClusterNamespaceCostReportSummariesResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Count Total count of items matching request filters.
	Count *string `json:"count,omitempty"`

	// Items Namespace cost entries.
	Items *[]CostreportV1beta1GetClusterNamespaceCostReportSummariesResponseNamespaceItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceCostReportSummariesResponseCostSummary defines model for costreport.v1beta1.GetClusterNamespaceCostReportSummariesResponse.CostSummary.
type CostreportV1beta1GetClusterNamespaceCostReportSummariesResponseCostSummary struct {
	// CostOnDemand Cost of the namespace on on-demand instances for the given time period.
	CostOnDemand *string `json:"costOnDemand,omitempty"`

	// CostSpot Cost of the namespace on spot instances for the given time period.
	CostSpot *string `json:"costSpot,omitempty"`

	// CostSpotFallback Cost of the namespace on spot fallback instances for the given time period.
	CostSpotFallback *string `json:"costSpotFallback,omitempty"`

	// CpuCost CPU cost for the given time period.
	CpuCost *string `json:"cpuCost,omitempty"`

	// CpuCount Average number of CPUs for the given time period.
	CpuCount *string `json:"cpuCount,omitempty"`

	// GpuCost GPU cost for the given time period.
	GpuCost *string `json:"gpuCost,omitempty"`

	// GpuCount Average number of requested GPUs for the given time period.
	GpuCount *string `json:"gpuCount,omitempty"`

	// RamCost RAM cost for the given time period.
	RamCost *string `json:"ramCost,omitempty"`

	// RamGib Average amount of RAM GiB for the given time period.
	RamGib *string `json:"ramGib,omitempty"`

	// TotalCost Total cost of the namespace for the given time period.
	TotalCost *string `json:"totalCost,omitempty"`

	// WorkloadCount Average amount of workloads for the given time period.
	WorkloadCount *string `json:"workloadCount,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceCostReportSummariesResponseNamespaceItem Defines a namespace.
type CostreportV1beta1GetClusterNamespaceCostReportSummariesResponseNamespaceItem struct {
	Cost *CostreportV1beta1GetClusterNamespaceCostReportSummariesResponseCostSummary `json:"cost,omitempty"`

	// Namespace Name of the namespace.
	Namespace *string `json:"namespace,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceDataTransferCostResponse defines model for costreport.v1beta1.GetClusterNamespaceDataTransferCostResponse.
type CostreportV1beta1GetClusterNamespaceDataTransferCostResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string                                       `json:"clusterId,omitempty"`
	Count     *string                                       `json:"count,omitempty"`
	Items     *[]CostreportV1beta1NamespaceDataTransferItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponse defines model for costreport.v1beta1.GetClusterNamespaceDataTransferTimedTotalCostResponse.
type CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string                                                                                    `json:"clusterId,omitempty"`
	Count     *string                                                                                    `json:"count,omitempty"`
	Items     *[]CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponseNamespaceCostItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponseNamespaceCostItem defines model for costreport.v1beta1.GetClusterNamespaceDataTransferTimedTotalCostResponse.NamespaceCostItem.
type CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponseNamespaceCostItem struct {
	// Items Timed data transfer costs for the namespace.
	Items *[]CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponseNamespaceCostItemTimedCostItem `json:"items,omitempty"`

	// Namespace Name of the namespace.
	Namespace *string `json:"namespace,omitempty"`
	TotalCost *string `json:"totalCost,omitempty"`
}

// CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponseNamespaceCostItemTimedCostItem defines model for costreport.v1beta1.GetClusterNamespaceDataTransferTimedTotalCostResponse.NamespaceCostItem.TimedCostItem.
type CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponseNamespaceCostItemTimedCostItem struct {
	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// TotalCost Egress cost details at the given timestamp.
	TotalCost *string `json:"totalCost,omitempty"`
}

// CostreportV1beta1GetClusterResourceUsageResponse Defines get cluster summary response.
type CostreportV1beta1GetClusterResourceUsageResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string                                                     `json:"clusterId,omitempty"`
	Items     *[]CostreportV1beta1GetClusterResourceUsageResponseUsageRec `json:"items,omitempty"`
}

// CostreportV1beta1GetClusterResourceUsageResponseUsageRec defines model for costreport.v1beta1.GetClusterResourceUsageResponse.UsageRec.
type CostreportV1beta1GetClusterResourceUsageResponseUsageRec struct {
	// CpuProvisioned CPU cores provisioned.
	CpuProvisioned *string `json:"cpuProvisioned,omitempty"`

	// CpuRequested CPU cores requested.
	CpuRequested *string `json:"cpuRequested,omitempty"`

	// CpuUsed CPU cores used.
	CpuUsed *string `json:"cpuUsed,omitempty"`

	// GpuAllocatable Allocatable GPUs.
	GpuAllocatable *string `json:"gpuAllocatable,omitempty"`

	// GpuRequested Requested GPUs.
	GpuRequested *string `json:"gpuRequested,omitempty"`

	// RamProvisioned RAM GiB provisioned.
	RamProvisioned *string `json:"ramProvisioned,omitempty"`

	// RamRequested RAM GiB requested.
	RamRequested *string `json:"ramRequested,omitempty"`

	// RamUsed RAM GiB used.
	RamUsed *string `json:"ramUsed,omitempty"`

	// Timestamp Timestamp of the entry.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetClusterSavingsReportResponse Defines a cluster savings report response.
type CostreportV1beta1GetClusterSavingsReportResponse struct {
	ClusterId *string                                                  `json:"clusterId,omitempty"`
	Items     *[]CostreportV1beta1GetClusterSavingsReportResponseItem  `json:"items,omitempty"`
	Summary   *CostreportV1beta1GetClusterSavingsReportResponseSummary `json:"summary,omitempty"`
}

// CostreportV1beta1GetClusterSavingsReportResponseItem defines model for costreport.v1beta1.GetClusterSavingsReportResponse.Item.
type CostreportV1beta1GetClusterSavingsReportResponseItem struct {
	DownscalingSavings *string `json:"downscalingSavings,omitempty"`
	SpotSavings        *string `json:"spotSavings,omitempty"`

	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetClusterSavingsReportResponseSummary defines model for costreport.v1beta1.GetClusterSavingsReportResponse.Summary.
type CostreportV1beta1GetClusterSavingsReportResponseSummary struct {
	TotalCost    *string `json:"totalCost,omitempty"`
	TotalSavings *string `json:"totalSavings,omitempty"`
}

// CostreportV1beta1GetClusterSummaryResponse Defines get cluster summary response.
type CostreportV1beta1GetClusterSummaryResponse struct {
	NodesSummaries *[]CostreportV1beta1GetClusterSummaryResponseNodesSummary `json:"nodesSummaries,omitempty"`

	// Summary Defines summary of cluster.
	Summary *CostreportV1beta1ClusterSummary `json:"summary,omitempty"`
}

// CostreportV1beta1GetClusterSummaryResponseNodesSummary defines model for costreport.v1beta1.GetClusterSummaryResponse.NodesSummary.
type CostreportV1beta1GetClusterSummaryResponseNodesSummary struct {
	CpuOverprovisioning *string `json:"cpuOverprovisioning,omitempty"`
	LinuxNodeCount      *string `json:"linuxNodeCount,omitempty"`

	// ManagedBy The provider name which managed this node group.
	ManagedBy           *CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy `json:"managedBy,omitempty"`
	RamOverprovisioning *string                                                          `json:"ramOverprovisioning,omitempty"`
	WindowsNodeCount    *string                                                          `json:"windowsNodeCount,omitempty"`
}

// CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy The provider name which managed this node group.
type CostreportV1beta1GetClusterSummaryResponseNodesSummaryManagedBy string

// CostreportV1beta1GetClusterUnscheduledPodsResponse Defines response for unscheduled pods in the cluster.
type CostreportV1beta1GetClusterUnscheduledPodsResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string                                                                  `json:"clusterId,omitempty"`
	Items     *[]CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledWorkload `json:"items,omitempty"`
}

// CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledPod defines model for costreport.v1beta1.GetClusterUnscheduledPodsResponse.UnscheduledPod.
type CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledPod struct {
	// CpuRequested CPU cores requested.
	CpuRequested *string                                                                  `json:"cpuRequested,omitempty"`
	Events       *[]CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledPodEvent `json:"events,omitempty"`

	// Message Unscheduled pod message.
	Message *string `json:"message,omitempty"`

	// Name Pod name.
	Name *string `json:"name,omitempty"`

	// RamRequested RAM GiB requested.
	RamRequested *string `json:"ramRequested,omitempty"`
}

// CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledPodEvent defines model for costreport.v1beta1.GetClusterUnscheduledPodsResponse.UnscheduledPod.Event.
type CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledPodEvent struct {
	Action              *string    `json:"action,omitempty"`
	FirstTimestamp      *time.Time `json:"firstTimestamp,omitempty"`
	LastTimestamp       *time.Time `json:"lastTimestamp,omitempty"`
	Message             *string    `json:"message,omitempty"`
	Reason              *string    `json:"reason,omitempty"`
	ReportingController *string    `json:"reportingController,omitempty"`
}

// CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledWorkload defines model for costreport.v1beta1.GetClusterUnscheduledPodsResponse.UnscheduledWorkload.
type CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledWorkload struct {
	// Name Workload name.
	Name *string `json:"name,omitempty"`

	// Namespace Workload namespace.
	Namespace *string `json:"namespace,omitempty"`

	// Type Workload type.
	Type *string `json:"type,omitempty"`

	// UnscheduledPods Unscheduled pods.
	UnscheduledPods *[]CostreportV1beta1GetClusterUnscheduledPodsResponseUnscheduledPod `json:"unscheduledPods,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadEfficiencyReportByNameResponse Defines cluster workload efficiency response.
type CostreportV1beta1GetClusterWorkloadEfficiencyReportByNameResponse struct {
	// Containers Defines the efficiency for every container in the workload.
	Containers *[]CostreportV1beta1ContainerEfficiency `json:"containers,omitempty"`

	// CostImpact Defines cost impact of wasted resources per lifecycle.
	CostImpact *CostreportV1beta1CostImpact `json:"costImpact,omitempty"`

	// CurrentPodCount Current pod count of this workload.
	CurrentPodCount *string `json:"currentPodCount"`

	// Efficiency Defines the efficiency for the whole workload over time.
	Efficiency *[]CostreportV1beta1WorkloadEfficiency `json:"efficiency,omitempty"`

	// MetricsServerAvailable Whether cluster has metrics server installed.
	MetricsServerAvailable *bool `json:"metricsServerAvailable,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`

	// Waste Defines the resources.
	Waste *CostreportV1beta1Resources `json:"waste,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadEfficiencyReportResponse Defines cluster workload efficiency response.
type CostreportV1beta1GetClusterWorkloadEfficiencyReportResponse struct {
	// ClusterId ID of the cluster.
	ClusterId string  `json:"clusterId"`
	Count     *string `json:"count,omitempty"`

	// Items Workload cost entries.
	Items *[]CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseWorkloadItem `json:"items,omitempty"`

	// MetricsServerAvailable Whether cluster has metrics server installed.
	MetricsServerAvailable *bool `json:"metricsServerAvailable,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`

	// TopItems Workloads with highest cost impact.
	TopItems *[]CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseTopWorkload `json:"topItems,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseCostImpactHistoryItem defines model for costreport.v1beta1.GetClusterWorkloadEfficiencyReportResponse.CostImpactHistoryItem.
type CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseCostImpactHistoryItem struct {
	// CostImpact Defines cost impact of wasted resources per lifecycle.
	CostImpact *CostreportV1beta1CostImpact `json:"costImpact,omitempty"`

	// Timestamp Timestamp of the cost impact.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseTopWorkload defines model for costreport.v1beta1.GetClusterWorkloadEfficiencyReportResponse.TopWorkload.
type CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseTopWorkload struct {
	// CostImpact Defines cost impact of wasted resources per lifecycle.
	CostImpact *CostreportV1beta1CostImpact `json:"costImpact,omitempty"`

	// CostImpactHistory Cost impact history.
	CostImpactHistory *[]CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseCostImpactHistoryItem `json:"costImpactHistory,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace string `json:"namespace"`

	// WorkloadName Name of the workload.
	WorkloadName string `json:"workloadName"`

	// WorkloadType Type of the workload.
	WorkloadType string `json:"workloadType"`
}

// CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseWorkloadItem Defines a workload.
type CostreportV1beta1GetClusterWorkloadEfficiencyReportResponseWorkloadItem struct {
	// CostImpact Defines cost impact of wasted resources per lifecycle.
	CostImpact *CostreportV1beta1CostImpact `json:"costImpact,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace string `json:"namespace"`

	// Requests Defines the resources.
	Requests CostreportV1beta1Resources `json:"requests"`

	// TotalCostImpact Total cost impact of the workload. Sum of cost impacts by lifecycle.
	TotalCostImpact *string `json:"totalCostImpact,omitempty"`

	// Usage Defines the resources.
	Usage CostreportV1beta1Resources `json:"usage"`

	// Waste Defines the resources.
	Waste *CostreportV1beta1Resources `json:"waste,omitempty"`

	// WorkloadName Name of the workload.
	WorkloadName string `json:"workloadName"`

	// WorkloadType Type of the workload.
	WorkloadType string `json:"workloadType"`
}

// CostreportV1beta1GetClusterWorkloadLabelsResponse Defines cluster workload labels response.
type CostreportV1beta1GetClusterWorkloadLabelsResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Items List of workload labels.
	Items *[]CostreportV1beta1GetClusterWorkloadLabelsResponseLabelValues `json:"items,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadLabelsResponseLabelValues Defines a label name and value.
type CostreportV1beta1GetClusterWorkloadLabelsResponseLabelValues struct {
	// Label Label name.
	Label *string `json:"label,omitempty"`

	// Values Label values.
	Values *[]string `json:"values,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadReportResponse Defines cluster workload cost response.
type CostreportV1beta1GetClusterWorkloadReportResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`
	Count     *string `json:"count,omitempty"`

	// Items Workload cost entries.
	Items *[]CostreportV1beta1WorkloadReportItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadRightsizingPatchRequestWorkloadID defines model for costreport.v1beta1.GetClusterWorkloadRightsizingPatchRequest.WorkloadID.
type CostreportV1beta1GetClusterWorkloadRightsizingPatchRequestWorkloadID struct {
	Namespace    *string `json:"namespace,omitempty"`
	WorkloadName *string `json:"workloadName,omitempty"`
	WorkloadType *string `json:"workloadType,omitempty"`
}

// CostreportV1beta1GetClusterWorkloadRightsizingPatchRequestWorkloads defines model for costreport.v1beta1.GetClusterWorkloadRightsizingPatchRequest.Workloads.
type CostreportV1beta1GetClusterWorkloadRightsizingPatchRequestWorkloads struct {
	// Workloads Defines a list of Workload IDs.
	Workloads *[]CostreportV1beta1GetClusterWorkloadRightsizingPatchRequestWorkloadID `json:"workloads,omitempty"`
}

// CostreportV1beta1GetClustersCostReportResponse Defines get clusters cost report response.
type CostreportV1beta1GetClustersCostReportResponse struct {
	Items *[]CostreportV1beta1GetClustersCostReportResponseClusterCostItem `json:"items,omitempty"`
}

// CostreportV1beta1GetClustersCostReportResponseClusterCostItem Defines cost report item - cost of one cluster.
type CostreportV1beta1GetClustersCostReportResponseClusterCostItem struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Intervals Cost details of cluster per interval.
	Intervals *[]CostreportV1beta1GetClustersCostReportResponseIntervalItem `json:"intervals,omitempty"`
}

// CostreportV1beta1GetClustersCostReportResponseIntervalItem defines model for costreport.v1beta1.GetClustersCostReportResponse.IntervalItem.
type CostreportV1beta1GetClustersCostReportResponseIntervalItem struct {
	// CostOnDemandPerHour Cost of on-demand instances.
	CostOnDemandPerHour *string `json:"costOnDemandPerHour,omitempty"`

	// CostSpotFallbackPerHour Cost of spot-fallback instances.
	CostSpotFallbackPerHour *string `json:"costSpotFallbackPerHour,omitempty"`

	// CostSpotPerHour Cost of spot instances.
	CostSpotPerHour *string `json:"costSpotPerHour,omitempty"`

	// Timestamp Timestamp of entry.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetClustersSummaryResponse Defines get clusters summary response.
type CostreportV1beta1GetClustersSummaryResponse struct {
	Items *[]CostreportV1beta1ClusterSummary `json:"items,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponse defines model for costreport.v1beta1.GetCostAllocationGroupDataTransferSummaryResponse.
type CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponse struct {
	Groups *[]CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseCostAllocationGroupItem `json:"groups,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseCostAllocationGroupItem defines model for costreport.v1beta1.GetCostAllocationGroupDataTransferSummaryResponse.CostAllocationGroupItem.
type CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseCostAllocationGroupItem struct {
	GroupId   *string `json:"groupId,omitempty"`
	GroupName *string `json:"groupName,omitempty"`

	// Items Group traffic entries.
	Items         *[]CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseCostItem `json:"items,omitempty"`
	WorkloadCount *string                                                                       `json:"workloadCount,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseCostItem Defines a workload.
type CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseCostItem struct {
	// EgressMetrics Defines a datatransfer costs item.
	EgressMetrics *CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseDataTransferCostItem `json:"egressMetrics,omitempty"`

	// IngressMetrics Defines a datatransfer costs item.
	IngressMetrics *CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseDataTransferCostItem `json:"ingressMetrics,omitempty"`

	// Timestamp Timestamp of entry.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseDataTransferCostItem Defines a datatransfer costs item.
type CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponseDataTransferCostItem struct {
	CloudApiBytes    *string `json:"cloudApiBytes,omitempty"`
	CloudApiCost     *string `json:"cloudApiCost,omitempty"`
	InterRegionBytes *string `json:"interRegionBytes,omitempty"`
	InterRegionCost  *string `json:"interRegionCost,omitempty"`
	InterZoneBytes   *string `json:"interZoneBytes,omitempty"`
	InterZoneCost    *string `json:"interZoneCost,omitempty"`
	InternetBytes    *string `json:"internetBytes,omitempty"`
	InternetCost     *string `json:"internetCost,omitempty"`
	IntraZoneBytes   *string `json:"intraZoneBytes,omitempty"`
	IntraZoneCost    *string `json:"intraZoneCost,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponse Defines cluster workloads datatransfer cost response aggregated over the requested period.
type CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponse struct {
	Clusters  *[]CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseClusterDetails `json:"clusters,omitempty"`
	GroupId   *string                                                                               `json:"groupId,omitempty"`
	GroupName *string                                                                               `json:"groupName,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseClusterDetails defines model for costreport.v1beta1.GetCostAllocationGroupDataTransferWorkloadsResponse.ClusterDetails.
type CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseClusterDetails struct {
	ClusterId *string `json:"clusterId,omitempty"`

	// Items Workload entries.
	Items *[]CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseWorkloadItem `json:"items,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseWorkloadDataTransferCostItem Defines an aggregated workloads datatransfer cost over requested period.
type CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseWorkloadDataTransferCostItem struct {
	CloudApiBytes    *string `json:"cloudApiBytes,omitempty"`
	CloudApiCost     *string `json:"cloudApiCost,omitempty"`
	InterRegionBytes *string `json:"interRegionBytes,omitempty"`
	InterRegionCost  *string `json:"interRegionCost,omitempty"`
	InterZoneBytes   *string `json:"interZoneBytes,omitempty"`
	InterZoneCost    *string `json:"interZoneCost,omitempty"`
	InternetBytes    *string `json:"internetBytes,omitempty"`
	InternetCost     *string `json:"internetCost,omitempty"`
	IntraZoneBytes   *string `json:"intraZoneBytes,omitempty"`
	IntraZoneCost    *string `json:"intraZoneCost,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseWorkloadItem Defines a workload.
type CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseWorkloadItem struct {
	// EgressMetrics Defines an aggregated workloads datatransfer cost over requested period.
	EgressMetrics *CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseWorkloadDataTransferCostItem `json:"egressMetrics,omitempty"`

	// IngressMetrics Defines an aggregated workloads datatransfer cost over requested period.
	IngressMetrics *CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponseWorkloadDataTransferCostItem `json:"ingressMetrics,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace *string `json:"namespace,omitempty"`

	// PodCount Average pod count of the workload within requested period.
	PodCount *string `json:"podCount,omitempty"`

	// WorkloadName Name of the workload.
	WorkloadName *string `json:"workloadName,omitempty"`

	// WorkloadType Type of the workload.
	WorkloadType *string `json:"workloadType,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupSummaryResponse defines model for costreport.v1beta1.GetCostAllocationGroupSummaryResponse.
type CostreportV1beta1GetCostAllocationGroupSummaryResponse struct {
	Items *[]CostreportV1beta1GetCostAllocationGroupSummaryResponseCostAllocationGroupItem `json:"items,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupSummaryResponseCostAllocationGroupItem defines model for costreport.v1beta1.GetCostAllocationGroupSummaryResponse.CostAllocationGroupItem.
type CostreportV1beta1GetCostAllocationGroupSummaryResponseCostAllocationGroupItem struct {
	GroupId   *string                                                           `json:"groupId,omitempty"`
	GroupName *string                                                           `json:"groupName,omitempty"`
	Items     *[]CostreportV1beta1GetCostAllocationGroupSummaryResponseCostItem `json:"items,omitempty"`

	// WorkloadCount Count of workloads for the given time period.
	WorkloadCount *string `json:"workloadCount,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupSummaryResponseCostItem Defines cost details for a given time.
type CostreportV1beta1GetCostAllocationGroupSummaryResponseCostItem struct {
	// CpuCostOnDemand Average CPU cost of on-demand instances for the given time period.
	CpuCostOnDemand *string `json:"cpuCostOnDemand,omitempty"`

	// CpuCostSpot Average CPU cost of spot instances for the given time period.
	CpuCostSpot *string `json:"cpuCostSpot,omitempty"`

	// CpuCostSpotFallback Average CPU cost of spot-fallback instances for the given time period.
	CpuCostSpotFallback *string `json:"cpuCostSpotFallback,omitempty"`

	// CpuCountOnDemand Average number of CPUs used on on-demand instances for the given time period.
	CpuCountOnDemand *string `json:"cpuCountOnDemand,omitempty"`

	// CpuCountSpot Average number of CPUs used on spot instances for the given time period.
	CpuCountSpot *string `json:"cpuCountSpot,omitempty"`

	// CpuCountSpotFallback Average number of CPUs used on spot-fallback instances for the given time period.
	CpuCountSpotFallback *string `json:"cpuCountSpotFallback,omitempty"`

	// GpuCostOnDemand Average GPU cost of on-demand instances for the given time period.
	GpuCostOnDemand *string `json:"gpuCostOnDemand,omitempty"`

	// GpuCostSpot Average GPU cost of spot instances for the given time period.
	GpuCostSpot *string `json:"gpuCostSpot,omitempty"`

	// GpuCostSpotFallback Average GPU cost of spot-fallback instances for the given time period.
	GpuCostSpotFallback *string `json:"gpuCostSpotFallback,omitempty"`

	// GpuCountOnDemand Average number of GPUs used on on-demand instances for the given time period.
	GpuCountOnDemand *string `json:"gpuCountOnDemand,omitempty"`

	// GpuCountSpot Average number of GPUs used on spot instances for the given time period.
	GpuCountSpot *string `json:"gpuCountSpot,omitempty"`

	// GpuCountSpotFallback Average number of GPUs used on spot-fallback instances for the given time period.
	GpuCountSpotFallback *string `json:"gpuCountSpotFallback,omitempty"`

	// PodCountOnDemand Average amount of pods on on-demand instances for the given time period.
	PodCountOnDemand *string `json:"podCountOnDemand,omitempty"`

	// PodCountSpot Average amount of pods on spot instances for the given time period.
	PodCountSpot *string `json:"podCountSpot,omitempty"`

	// PodCountSpotFallback Average amount of pods on spot-fallback instances for the given time period.
	PodCountSpotFallback *string `json:"podCountSpotFallback,omitempty"`

	// RamCostOnDemand Average RAM cost of on-demand instances for the given time period.
	RamCostOnDemand *string `json:"ramCostOnDemand,omitempty"`

	// RamCostSpot Average RAM cost of spot instances for the given time period.
	RamCostSpot *string `json:"ramCostSpot,omitempty"`

	// RamCostSpotFallback Average RAM cost of spot-fallback instances for the given time period.
	RamCostSpotFallback *string `json:"ramCostSpotFallback,omitempty"`

	// RamGibOnDemand Average RAM GiB used on on-demand instances for the given time period.
	RamGibOnDemand *string `json:"ramGibOnDemand,omitempty"`

	// RamGibSpot Average RAM GiB used on spot instances for the given time period.
	RamGibSpot *string `json:"ramGibSpot,omitempty"`

	// RamGibSpotFallback Average RAM GiB used on spot-fallback instances for the given time period.
	RamGibSpotFallback *string `json:"ramGibSpotFallback,omitempty"`

	// Timestamp Timestamp of entry.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// TotalCostOnDemand Total cost of on-demand instances for the given time period.
	TotalCostOnDemand *string `json:"totalCostOnDemand,omitempty"`

	// TotalCostSpot Total cost of spot instances for the given time period.
	TotalCostSpot *string `json:"totalCostSpot,omitempty"`

	// TotalCostSpotFallback Total cost of spot-fallback instances for the given time period.
	TotalCostSpotFallback *string `json:"totalCostSpotFallback,omitempty"`

	// WorkloadCount Number of workloads included in group.
	WorkloadCount *string `json:"workloadCount,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupWorkloadsResponse Defines cluster workload cost response.
type CostreportV1beta1GetCostAllocationGroupWorkloadsResponse struct {
	GroupId   *string `json:"groupId,omitempty"`
	GroupName *string `json:"groupName,omitempty"`

	// Items Workload entries.
	Items *[]CostreportV1beta1GetCostAllocationGroupWorkloadsResponseWorkloadItem `json:"items,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupWorkloadsResponseClusterInfo defines model for costreport.v1beta1.GetCostAllocationGroupWorkloadsResponse.ClusterInfo.
type CostreportV1beta1GetCostAllocationGroupWorkloadsResponseClusterInfo struct {
	Id *string `json:"id,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupWorkloadsResponseWorkloadCostItem Defines a workloads cost for a given time.
type CostreportV1beta1GetCostAllocationGroupWorkloadsResponseWorkloadCostItem struct {
	// CpuCostOnDemand Average CPU cost of the workload that are on-demand instances for the given time period.
	CpuCostOnDemand *string `json:"cpuCostOnDemand,omitempty"`

	// CpuCostSpot Average CPU cost of the workload that are spot instances for the given time period.
	CpuCostSpot *string `json:"cpuCostSpot,omitempty"`

	// CpuCostSpotFallback Average CPU cost of the workload that are spot-fallback instances for the given time period.
	CpuCostSpotFallback *string `json:"cpuCostSpotFallback,omitempty"`

	// CpuCountOnDemand Average number of CPUs of the workload that is on on-demand instances for the given time period.
	CpuCountOnDemand *string `json:"cpuCountOnDemand,omitempty"`

	// CpuCountSpot Average number of CPUs of the workload that is on spot instances for the given time period.
	CpuCountSpot *string `json:"cpuCountSpot,omitempty"`

	// CpuCountSpotFallback Average number of CPUs of the workload that is on spot-fallback instances for the given time period.
	CpuCountSpotFallback *string `json:"cpuCountSpotFallback,omitempty"`

	// GpuCostOnDemand Average GPU cost of the workload that is on on-demand instances for the given time period.
	GpuCostOnDemand *string `json:"gpuCostOnDemand,omitempty"`

	// GpuCostSpot Average GPU cost of the workload that is on spot instances for the given time period.
	GpuCostSpot *string `json:"gpuCostSpot,omitempty"`

	// GpuCostSpotFallback Average GPU cost of the workload that is on spot-fallback instances for the given time period.
	GpuCostSpotFallback *string `json:"gpuCostSpotFallback,omitempty"`

	// GpuCountOnDemand Average number of GPUs of the workload that is on on-demand instances for the given time period.
	GpuCountOnDemand *string `json:"gpuCountOnDemand,omitempty"`

	// GpuCountSpot Average number of GPUs of the workload that is on spot instances for the given time period.
	GpuCountSpot *string `json:"gpuCountSpot,omitempty"`

	// GpuCountSpotFallback Average number of GPUs of the workload that is on spot-fallback instances for the given time period.
	GpuCountSpotFallback *string `json:"gpuCountSpotFallback,omitempty"`

	// PodCountOnDemand Average amount of pods for the workload that are on on-demand instances for the given time period.
	PodCountOnDemand *string `json:"podCountOnDemand,omitempty"`

	// PodCountSpot Average amount of pods for the workload that are on spot instances for the given time period.
	PodCountSpot *string `json:"podCountSpot,omitempty"`

	// PodCountSpotFallback Average amount of pods for the workload that are on spot-fallback instances for the given time period.
	PodCountSpotFallback *string `json:"podCountSpotFallback,omitempty"`

	// RamCostOnDemand Average RAM cost of the workload that are on-demand instances for the given time period.
	RamCostOnDemand *string `json:"ramCostOnDemand,omitempty"`

	// RamCostSpot Average RAM cost of the workload that are spot instances for the given time period.
	RamCostSpot *string `json:"ramCostSpot,omitempty"`

	// RamCostSpotFallback Average RAM cost of the workload that are spot-fallback instances for the given time period.
	RamCostSpotFallback *string `json:"ramCostSpotFallback,omitempty"`

	// RamGibOnDemand Average RAM GiB used on on-demand instances for the given time period.
	RamGibOnDemand *string `json:"ramGibOnDemand,omitempty"`

	// RamGibSpot Average RAM GiB of the workload that are on spot instances for the given time period.
	RamGibSpot *string `json:"ramGibSpot,omitempty"`

	// RamGibSpotFallback Average RAM GiB of the workload that are on spot-fallback instances for the given time period.
	RamGibSpotFallback *string `json:"ramGibSpotFallback,omitempty"`

	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// TotalCostOnDemand Total cost of the workload that is on on-demand instances for the given time period.
	TotalCostOnDemand *string `json:"totalCostOnDemand,omitempty"`

	// TotalCostSpot Total cost of the workload that is on spot instances for the given time period.
	TotalCostSpot *string `json:"totalCostSpot,omitempty"`

	// TotalCostSpotFallback Total cost of the workload that is on spot-fallback instances for the given time period.
	TotalCostSpotFallback *string `json:"totalCostSpotFallback,omitempty"`
}

// CostreportV1beta1GetCostAllocationGroupWorkloadsResponseWorkloadItem Defines a workload.
type CostreportV1beta1GetCostAllocationGroupWorkloadsResponseWorkloadItem struct {
	Cluster *CostreportV1beta1GetCostAllocationGroupWorkloadsResponseClusterInfo `json:"cluster,omitempty"`

	// Items Cost metrics of the workload.
	Items *[]CostreportV1beta1GetCostAllocationGroupWorkloadsResponseWorkloadCostItem `json:"items,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace *string `json:"namespace,omitempty"`

	// WorkloadName Name of the workload.
	WorkloadName *string `json:"workloadName,omitempty"`

	// WorkloadType Type of the workload.
	WorkloadType *string `json:"workloadType,omitempty"`
}

// CostreportV1beta1GetEgressdScriptResponse defines model for costreport.v1beta1.GetEgressdScriptResponse.
type CostreportV1beta1GetEgressdScriptResponse struct {
	Script *string `json:"script,omitempty"`
}

// CostreportV1beta1GetGroupingConfigResponse defines model for costreport.v1beta1.GetGroupingConfigResponse.
type CostreportV1beta1GetGroupingConfigResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string                          `json:"clusterId,omitempty"`
	Config    *CostreportV1beta1GroupingConfig `json:"config,omitempty"`
}

// CostreportV1beta1GetNamespacesForClustersResponse Defines namespaces for clusters response.
type CostreportV1beta1GetNamespacesForClustersResponse struct {
	ClusterNamespaces *[]CostreportV1beta1ClusterNamespaces `json:"clusterNamespaces,omitempty"`
}

// CostreportV1beta1GetNodeLabelNamesResponse Defines organization node label names response.
type CostreportV1beta1GetNodeLabelNamesResponse struct {
	Count *string `json:"count,omitempty"`

	// LabelNames List of node label names.
	LabelNames *[]string `json:"labelNames,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`
}

// CostreportV1beta1GetNodeLabelValuesResponse Defines organization node label values response.
type CostreportV1beta1GetNodeLabelValuesResponse struct {
	Count       *string   `json:"count,omitempty"`
	LabelValues *[]string `json:"labelValues,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`
}

// CostreportV1beta1GetOrganizationClustersCostReportResponse defines model for costreport.v1beta1.GetOrganizationClustersCostReportResponse.
type CostreportV1beta1GetOrganizationClustersCostReportResponse struct {
	Clusters        *[]CostreportV1beta1GetOrganizationClustersCostReportResponseClusterSummary      `json:"clusters,omitempty"`
	Summary         *CostreportV1beta1GetOrganizationClustersCostReportResponseSummary               `json:"summary,omitempty"`
	TopClustersCost *[]CostreportV1beta1GetOrganizationClustersCostReportResponseClusterCost         `json:"topClustersCost,omitempty"`
	TotalDailyCost  *[]CostreportV1beta1GetOrganizationClustersCostReportResponseTimestampedCostItem `json:"totalDailyCost,omitempty"`
}

// CostreportV1beta1GetOrganizationClustersCostReportResponseClusterCost defines model for costreport.v1beta1.GetOrganizationClustersCostReportResponse.ClusterCost.
type CostreportV1beta1GetOrganizationClustersCostReportResponseClusterCost struct {
	ClusterId *string                                                                          `json:"clusterId,omitempty"`
	Items     *[]CostreportV1beta1GetOrganizationClustersCostReportResponseTimestampedCostItem `json:"items,omitempty"`
}

// CostreportV1beta1GetOrganizationClustersCostReportResponseClusterSummary defines model for costreport.v1beta1.GetOrganizationClustersCostReportResponse.ClusterSummary.
type CostreportV1beta1GetOrganizationClustersCostReportResponseClusterSummary struct {
	ClusterDeletedAt *time.Time                                                         `json:"clusterDeletedAt"`
	ClusterId        *string                                                            `json:"clusterId,omitempty"`
	ClusterName      *string                                                            `json:"clusterName,omitempty"`
	Summary          *CostreportV1beta1GetOrganizationClustersCostReportResponseSummary `json:"summary,omitempty"`
}

// CostreportV1beta1GetOrganizationClustersCostReportResponseSummary defines model for costreport.v1beta1.GetOrganizationClustersCostReportResponse.Summary.
type CostreportV1beta1GetOrganizationClustersCostReportResponseSummary struct {
	// CostFallback Average compute cost of spot fallback instances.
	CostFallback *string `json:"costFallback,omitempty"`

	// CostOnDemand Average compute cost of on-demand instances.
	CostOnDemand *string `json:"costOnDemand,omitempty"`

	// CostSpot Average compute cost of spot instances.
	CostSpot *string `json:"costSpot,omitempty"`

	// CpuAllocatable Average allocatable CPU cores.
	CpuAllocatable *string `json:"cpuAllocatable,omitempty"`

	// CpuCost Average CPU cost.
	CpuCost *string `json:"cpuCost,omitempty"`

	// CpuProvisioned Average provisioned CPU cores.
	CpuProvisioned *string `json:"cpuProvisioned,omitempty"`

	// CpuRequested Average requested CPU cores.
	CpuRequested *string `json:"cpuRequested,omitempty"`

	// GpuAllocatable Average allocatable GPUs.
	GpuAllocatable *string `json:"gpuAllocatable,omitempty"`

	// GpuCost Average GPU cost.
	GpuCost *string `json:"gpuCost,omitempty"`

	// GpuProvisioned Average provisioned GPUs.
	GpuProvisioned *string `json:"gpuProvisioned,omitempty"`

	// GpuRequested Average requested GPUs.
	GpuRequested *string `json:"gpuRequested,omitempty"`

	// RamAllocatable Average allocatable RAM GiB.
	RamAllocatable *string `json:"ramAllocatable,omitempty"`

	// RamCost Average RAM cost.
	RamCost *string `json:"ramCost,omitempty"`

	// RamProvisioned Average provisioned RAM GiB.
	RamProvisioned *string `json:"ramProvisioned,omitempty"`

	// RamRequested Average requested RAM GiB.
	RamRequested *string `json:"ramRequested,omitempty"`

	// TotalCost Average compute cost.
	TotalCost *string `json:"totalCost,omitempty"`
}

// CostreportV1beta1GetOrganizationClustersCostReportResponseTimestampedCostItem defines model for costreport.v1beta1.GetOrganizationClustersCostReportResponse.TimestampedCostItem.
type CostreportV1beta1GetOrganizationClustersCostReportResponseTimestampedCostItem struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Value     *string    `json:"value,omitempty"`
}

// CostreportV1beta1GetReportingCapabilitiesResponse defines model for costreport.v1beta1.GetReportingCapabilitiesResponse.
type CostreportV1beta1GetReportingCapabilitiesResponse struct {
	// GpuDataAvailable Returns whether the cluster has GPU data collected in the selected time range.
	GpuDataAvailable *bool `json:"gpuDataAvailable,omitempty"`

	// NetworkDataAvailable Returns whether the cluster has network usage collected by egressd in the selected time range.
	NetworkDataAvailable *bool `json:"networkDataAvailable,omitempty"`

	// WorkloadDataAvailable Returns whether the cluster has workload metrics collected in the selected time range.
	WorkloadDataAvailable *bool `json:"workloadDataAvailable,omitempty"`
}

// CostreportV1beta1GetRightsizingSummaryResponse Defines rightsizing summary response.
type CostreportV1beta1GetRightsizingSummaryResponse struct {
	// RightsizingRecommendation RightsizingRecommendation defines a rightsizing recommendation.
	RightsizingRecommendation *CostreportV1beta1RightsizingRecommendation `json:"rightsizingRecommendation,omitempty"`
}

// CostreportV1beta1GetSavingsRecommendationResponse Defines savings recommendation response.
type CostreportV1beta1GetSavingsRecommendationResponse struct {
	// CurrentConfiguration SavingsCurrentConfiguration defines current cluster configuration.
	CurrentConfiguration *CostreportV1beta1SavingsCurrentConfiguration `json:"currentConfiguration,omitempty"`

	// IsRebalancingRecommended Whether rebalancing is recommended. Calculated based on available savings.
	IsRebalancingRecommended *bool `json:"isRebalancingRecommended,omitempty"`

	// LastUpdatedAt Timestamp of the last cluster snapshot used to calculate the report.
	LastUpdatedAt *time.Time `json:"lastUpdatedAt,omitempty"`

	// Recommendations Different types of estimated savings reports.
	Recommendations *map[string]CostreportV1beta1SavingsRecommendation `json:"recommendations,omitempty"`
}

// CostreportV1beta1GetSingleNamespaceCostReportResponse Defines the get single namespace cost report response.
type CostreportV1beta1GetSingleNamespaceCostReportResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// CostSummary Defines a namespace's cost summary over a selected period.
	CostSummary *CostreportV1beta1NamespaceCostSummary `json:"costSummary,omitempty"`

	// DailyCostItems Cost metrics of the namespace.
	DailyCostItems *[]CostreportV1beta1NamespaceCostItem `json:"dailyCostItems,omitempty"`

	// Namespace Namespace name.
	Namespace *string `json:"namespace,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetSingleWorkloadCostReportResponse Defines cluster workload cost response.
type CostreportV1beta1GetSingleWorkloadCostReportResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Item Defines a workload.
	Item *CostreportV1beta1WorkloadReportItem `json:"item,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetSingleWorkloadDataTransferCostResponse defines model for costreport.v1beta1.GetSingleWorkloadDataTransferCostResponse.
type CostreportV1beta1GetSingleWorkloadDataTransferCostResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// EgressdStatus Defines a list of possible egressd agent statuses.
	//
	//  - StatusUnknown: Egressd agent is unknown
	//  - NotInstalled: Egressd agent is not installed
	//  - Inactive: Egressd agent is not active (CAST AI didn't receive egressd metrics more than X amount of time)
	//  - Active: Egressd agent is active and working
	EgressdStatus *CostreportV1beta1EgressdStatus `json:"egressdStatus,omitempty"`

	// Item Defines a workload datatransfer details item.
	Item *CostreportV1beta1WorkloadDataTransferItem `json:"item,omitempty"`
}

// CostreportV1beta1GetWorkloadCostSummariesResponse Defines workload compute cost report response.
type CostreportV1beta1GetWorkloadCostSummariesResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Count Total count of items matching request filters.
	Count *string `json:"count,omitempty"`

	// Items Workload cost entries.
	Items *[]CostreportV1beta1GetWorkloadCostSummariesResponseWorkloadItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetWorkloadCostSummariesResponseCostSummary defines model for costreport.v1beta1.GetWorkloadCostSummariesResponse.CostSummary.
type CostreportV1beta1GetWorkloadCostSummariesResponseCostSummary struct {
	// CostOnDemand Cost of the workload on on-demand instances for the given time period.
	CostOnDemand *string `json:"costOnDemand,omitempty"`

	// CostSpot Cost of the workload on spot instances for the given time period.
	CostSpot *string `json:"costSpot,omitempty"`

	// CostSpotFallback Cost of the workload on spot fallback instances for the given time period.
	CostSpotFallback *string `json:"costSpotFallback,omitempty"`

	// CpuCost CPU cost for the given time period.
	CpuCost *string `json:"cpuCost,omitempty"`

	// CpuCount Average number of CPUs for the given time period.
	CpuCount *string `json:"cpuCount,omitempty"`

	// GpuCost GPU cost for the given time period.
	GpuCost *string `json:"gpuCost,omitempty"`

	// GpuCount Average number of requested GPUs for the given time period.
	GpuCount *string `json:"gpuCount,omitempty"`

	// PodCount Average amount of pods for the given time period.
	PodCount *string `json:"podCount,omitempty"`

	// RamCost RAM cost for the given time period.
	RamCost *string `json:"ramCost,omitempty"`

	// RamGib Average amount of RAM GiB for the given time period.
	RamGib *string `json:"ramGib,omitempty"`

	// TotalCost Total cost of the workload for the given time period.
	TotalCost *string `json:"totalCost,omitempty"`
}

// CostreportV1beta1GetWorkloadCostSummariesResponseWorkloadItem Defines a workload.
type CostreportV1beta1GetWorkloadCostSummariesResponseWorkloadItem struct {
	Cost *CostreportV1beta1GetWorkloadCostSummariesResponseCostSummary `json:"cost,omitempty"`

	// Labels Labels of the workload.
	Labels *[]CostreportV1beta1WorkloadLabel `json:"labels,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace *string `json:"namespace,omitempty"`

	// WorkloadName Name of the workload.
	WorkloadName *string `json:"workloadName,omitempty"`

	// WorkloadType Type of the workload.
	WorkloadType *string `json:"workloadType,omitempty"`
}

// CostreportV1beta1GetWorkloadDataTransferCostResponse defines model for costreport.v1beta1.GetWorkloadDataTransferCostResponse.
type CostreportV1beta1GetWorkloadDataTransferCostResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`
	Count     *string `json:"count,omitempty"`

	// EgressdStatus Defines a list of possible egressd agent statuses.
	//
	//  - StatusUnknown: Egressd agent is unknown
	//  - NotInstalled: Egressd agent is not installed
	//  - Inactive: Egressd agent is not active (CAST AI didn't receive egressd metrics more than X amount of time)
	//  - Active: Egressd agent is active and working
	EgressdStatus *CostreportV1beta1EgressdStatus `json:"egressdStatus,omitempty"`

	// Items Workload datatransfer cost entries.
	Items *[]CostreportV1beta1WorkloadDataTransferItem `json:"items,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`

	// NoDataReason Defines a list of possible reasons why report data is missing.
	NoDataReason *CostreportV1beta1NoDataReason `json:"noDataReason,omitempty"`
}

// CostreportV1beta1GetWorkloadLabelNamesResponse Defines organization workload label names response.
type CostreportV1beta1GetWorkloadLabelNamesResponse struct {
	Count *string `json:"count,omitempty"`

	// LabelNames List of workload label names.
	LabelNames *[]string `json:"labelNames,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`
}

// CostreportV1beta1GetWorkloadLabelValuesDeprecatedResponse Defines organization workload label values response.
type CostreportV1beta1GetWorkloadLabelValuesDeprecatedResponse struct {
	LabelValues *[]string `json:"labelValues,omitempty"`
}

// CostreportV1beta1GetWorkloadLabelValuesResponse Defines organization workload label values response.
type CostreportV1beta1GetWorkloadLabelValuesResponse struct {
	Count       *string   `json:"count,omitempty"`
	LabelValues *[]string `json:"labelValues,omitempty"`

	// NextCursor next_cursor is a token to be used in future request to retrieve subsequent items. If empty - no more items present.
	NextCursor *string `json:"nextCursor,omitempty"`
}

// CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponse Defines the response for workload traffic destinations history.
type CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponse struct {
	// Destinations Workload traffic destinations and their pricing history.
	Destinations *[]CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponseDestinationHistory `json:"destinations,omitempty"`
}

// CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponseDestinationHistory Defines a destination workload costs with history.
type CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponseDestinationHistory struct {
	// Destination Defines a traffic destination workload with costs.
	Destination *CostreportV1beta1WorkloadDestination `json:"destination,omitempty"`

	// History History of traffic costs.
	History *[]CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponseHistoryItem `json:"history,omitempty"`
}

// CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponseHistoryItem Defines a traffic history item.
type CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponseHistoryItem struct {
	Egress  *CostreportV1beta1TrafficCost `json:"egress,omitempty"`
	Ingress *CostreportV1beta1TrafficCost `json:"ingress,omitempty"`

	// Timestamp Timestamp of traffic history item.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1GetWorkloadTrafficDestinationsResponse Defines the response for workload traffic destinations.
type CostreportV1beta1GetWorkloadTrafficDestinationsResponse struct {
	// Destinations Workload traffic destinations.
	Destinations *[]CostreportV1beta1WorkloadDestination `json:"destinations,omitempty"`
}

// CostreportV1beta1GetWorkloadsMetadataResponse defines model for costreport.v1beta1.GetWorkloadsMetadataResponse.
type CostreportV1beta1GetWorkloadsMetadataResponse struct {
	Workloads *[]CostreportV1beta1WorkloadMetadata `json:"workloads,omitempty"`
}

// CostreportV1beta1GroupingConfig defines model for costreport.v1beta1.GroupingConfig.
type CostreportV1beta1GroupingConfig struct {
	Rules *[]CostreportV1beta1GroupingConfigGroupByLabelValue `json:"rules,omitempty"`
}

// CostreportV1beta1GroupingConfigGroupByLabelValue defines model for costreport.v1beta1.GroupingConfig.GroupByLabelValue.
type CostreportV1beta1GroupingConfigGroupByLabelValue struct {
	Conditions *[]CostreportV1beta1GroupingConfigGroupByLabelValueCondition `json:"conditions,omitempty"`

	// FixedName FixedName to be set as the workload name.
	FixedName *string `json:"fixedName,omitempty"`

	// Label Value of this label will be used to override workload name.
	Label *string `json:"label,omitempty"`
}

// CostreportV1beta1GroupingConfigGroupByLabelValueCondition defines model for costreport.v1beta1.GroupingConfig.GroupByLabelValue.Condition.
type CostreportV1beta1GroupingConfigGroupByLabelValueCondition struct {
	// Label Label to be matched in order for this rule to work.
	Label    *string                                                            `json:"label,omitempty"`
	Operator *CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator `json:"operator,omitempty"`
	Values   *[]string                                                          `json:"values,omitempty"`
}

// CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator defines model for costreport.v1beta1.GroupingConfig.GroupByLabelValue.Condition.Operator.
type CostreportV1beta1GroupingConfigGroupByLabelValueConditionOperator string

// CostreportV1beta1ListAllocationGroupsResponse defines model for costreport.v1beta1.ListAllocationGroupsResponse.
type CostreportV1beta1ListAllocationGroupsResponse struct {
	Items *[]CostreportV1beta1AllocationGroup `json:"items,omitempty"`
}

// CostreportV1beta1NamespaceCostItem Defines a namespaces' cost for a given time.
type CostreportV1beta1NamespaceCostItem struct {
	// CostOnDemand Average cost of the workload that is on on-demand instances for the given time period.
	CostOnDemand *string `json:"costOnDemand,omitempty"`

	// CostSpot Average cost of the workload that is on spot instances for the given time period.
	CostSpot *string `json:"costSpot,omitempty"`

	// CostSpotFallback Average cost of the workload that is on spot-fallback instances for the given time period.
	CostSpotFallback *string `json:"costSpotFallback,omitempty"`

	// CpuCostOnDemand Average CPU cost of the workload that is on on-demand instances for the given time period.
	CpuCostOnDemand *string `json:"cpuCostOnDemand,omitempty"`

	// CpuCostSpot Average CPU cost of the workload that is on spot instances for the given time period.
	CpuCostSpot *string `json:"cpuCostSpot,omitempty"`

	// CpuCostSpotFallback Average CPU cost of the workload that is on spot-fallback instances for the given time period.
	CpuCostSpotFallback *string `json:"cpuCostSpotFallback,omitempty"`

	// CpuCountOnDemand Average number of CPUs of the workload that is on on-demand instances for the given time period.
	CpuCountOnDemand *string `json:"cpuCountOnDemand,omitempty"`

	// CpuCountSpot Average number of CPUs of the workload that is on spot instances for the given time period.
	CpuCountSpot *string `json:"cpuCountSpot,omitempty"`

	// CpuCountSpotFallback Average number of CPUs of the workload that is on spot-fallback instances for the given time period.
	CpuCountSpotFallback *string `json:"cpuCountSpotFallback,omitempty"`

	// GpuCostOnDemand Average GPU cost of the workload that is on on-demand instances for the given time period.
	GpuCostOnDemand *string `json:"gpuCostOnDemand,omitempty"`

	// GpuCostSpot Average GPU cost of the workload that is on spot instances for the given time period.
	GpuCostSpot *string `json:"gpuCostSpot,omitempty"`

	// GpuCostSpotFallback Average GPU cost of the workload that is on spot-fallback instances for the given time period.
	GpuCostSpotFallback *string `json:"gpuCostSpotFallback,omitempty"`

	// GpuCountOnDemand Average number of requested GPUs of the workload that is on on-demand instances for the given time period.
	GpuCountOnDemand *string `json:"gpuCountOnDemand,omitempty"`

	// GpuCountSpot Average number of requested GPUs of the workload that is on spot instances for the given time period.
	GpuCountSpot *string `json:"gpuCountSpot,omitempty"`

	// GpuCountSpotFallback Average number of requested GPUs of the workload that is on spot-fallback instances for the given time period.
	GpuCountSpotFallback *string `json:"gpuCountSpotFallback,omitempty"`

	// RamCostOnDemand Average RAM cost of the workload that is on on-demand instances for the given time period.
	RamCostOnDemand *string `json:"ramCostOnDemand,omitempty"`

	// RamCostSpot Average RAM cost of the workload that is on spot instances for the given time period.
	RamCostSpot *string `json:"ramCostSpot,omitempty"`

	// RamCostSpotFallback Average RAM cost of the workload that is on spot-fallback instances for the given time period.
	RamCostSpotFallback *string `json:"ramCostSpotFallback,omitempty"`

	// RamGibOnDemand Average requested RAM (GiB) of the workload that is on on-demand instances for the given time period.
	RamGibOnDemand *string `json:"ramGibOnDemand,omitempty"`

	// RamGibSpot Average requested RAM (GiB) of the workload that is on spot instances for the given time period.
	RamGibSpot *string `json:"ramGibSpot,omitempty"`

	// RamGibSpotFallback Average requested RAM (GiB) of the workload that is on spot_fallback instances for the given time period.
	RamGibSpotFallback *string `json:"ramGibSpotFallback,omitempty"`

	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1NamespaceCostSummary Defines a namespace's cost summary over a selected period.
type CostreportV1beta1NamespaceCostSummary struct {
	AvgCost    *string `json:"avgCost,omitempty"`
	AvgCpuCost *string `json:"avgCpuCost,omitempty"`
	AvgGpuCost *string `json:"avgGpuCost,omitempty"`
	AvgRamCost *string `json:"avgRamCost,omitempty"`
	TotalCost  *string `json:"totalCost,omitempty"`

	// TotalWorkloadsCount Number of all workloads in the namespace that appeared in the selected time range.
	TotalWorkloadsCount *string `json:"totalWorkloadsCount,omitempty"`
}

// CostreportV1beta1NamespaceDataTransferItem defines model for costreport.v1beta1.NamespaceDataTransferItem.
type CostreportV1beta1NamespaceDataTransferItem struct {
	Egress  *CostreportV1beta1NamespaceDataTransferItemDataTransferCostItem `json:"egress,omitempty"`
	Ingress *CostreportV1beta1NamespaceDataTransferItemDataTransferCostItem `json:"ingress,omitempty"`

	// Namespace Name of the namespace.
	Namespace     *string `json:"namespace,omitempty"`
	TotalBytes    *string `json:"totalBytes,omitempty"`
	TotalCost     *string `json:"totalCost,omitempty"`
	WorkloadCount *string `json:"workloadCount,omitempty"`
}

// CostreportV1beta1NamespaceDataTransferItemDataTransferCostItem defines model for costreport.v1beta1.NamespaceDataTransferItem.DataTransferCostItem.
type CostreportV1beta1NamespaceDataTransferItemDataTransferCostItem struct {
	CloudApiBytes    *string `json:"cloudApiBytes,omitempty"`
	CloudApiCost     *string `json:"cloudApiCost,omitempty"`
	InterRegionBytes *string `json:"interRegionBytes,omitempty"`
	InterRegionCost  *string `json:"interRegionCost,omitempty"`
	InterZoneBytes   *string `json:"interZoneBytes,omitempty"`
	InterZoneCost    *string `json:"interZoneCost,omitempty"`
	InternetBytes    *string `json:"internetBytes,omitempty"`
	InternetCost     *string `json:"internetCost,omitempty"`
	IntraZoneBytes   *string `json:"intraZoneBytes,omitempty"`
	IntraZoneCost    *string `json:"intraZoneCost,omitempty"`
}

// CostreportV1beta1NamespaceFilter defines model for costreport.v1beta1.NamespaceFilter.
type CostreportV1beta1NamespaceFilter struct {
	// Namespace Filter items by namespace. Acts like a case-insensitive substring search.
	Namespace *string `json:"namespace,omitempty"`
}

// CostreportV1beta1NamespaceFilters defines model for costreport.v1beta1.NamespaceFilters.
type CostreportV1beta1NamespaceFilters struct {
	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds []string `json:"clusterIds"`
}

// CostreportV1beta1NoDataReason Defines a list of possible reasons why report data is missing.
type CostreportV1beta1NoDataReason string

// CostreportV1beta1Node defines model for costreport.v1beta1.Node.
type CostreportV1beta1Node struct {
	Az           *string  `json:"az,omitempty"`
	CpuCores     *int32   `json:"cpuCores,omitempty"`
	CpuPrice     *string  `json:"cpuPrice,omitempty"`
	Fallback     *bool    `json:"fallback,omitempty"`
	Gpu          *int32   `json:"gpu,omitempty"`
	Infra        *bool    `json:"infra,omitempty"`
	InstanceType *string  `json:"instanceType,omitempty"`
	Master       *bool    `json:"master,omitempty"`
	NodeName     *string  `json:"nodeName,omitempty"`
	Os           *string  `json:"os,omitempty"`
	Price        *string  `json:"price,omitempty"`
	RamBytes     *float64 `json:"ramBytes,omitempty"`
	RamPrice     *string  `json:"ramPrice,omitempty"`
	Spot         *bool    `json:"spot,omitempty"`
}

// CostreportV1beta1NodeLabelFilters defines model for costreport.v1beta1.NodeLabelFilters.
type CostreportV1beta1NodeLabelFilters struct {
	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `json:"clusterIds,omitempty"`

	// Search Filter node label names by substring.
	Search *string `json:"search,omitempty"`
}

// CostreportV1beta1RecommendationDetails defines model for costreport.v1beta1.RecommendationDetails.
type CostreportV1beta1RecommendationDetails struct {
	ArmSavingsConfiguration *CostreportV1beta1ConfigurationAfter   `json:"armSavingsConfiguration,omitempty"`
	ConfigurationAfter      *CostreportV1beta1ConfigurationAfter   `json:"configurationAfter,omitempty"`
	ReplicatedWorkloads     *[]CostreportV1beta1ReplicatedWorkload `json:"replicatedWorkloads,omitempty"`
}

// CostreportV1beta1ReplicatedWorkload defines model for costreport.v1beta1.ReplicatedWorkload.
type CostreportV1beta1ReplicatedWorkload struct {
	CurrentNodeType *string   `json:"currentNodeType,omitempty"`
	CurrentNodes    *[]string `json:"currentNodes,omitempty"`

	// OwnerType Deprecated: use workload_type instead.
	OwnerType           *string   `json:"ownerType,omitempty"`
	RecommendedNodeType *string   `json:"recommendedNodeType,omitempty"`
	Replicas            *[]string `json:"replicas,omitempty"`
	WorkloadName        *string   `json:"workloadName,omitempty"`
	WorkloadNamespace   *string   `json:"workloadNamespace,omitempty"`
	WorkloadType        *string   `json:"workloadType,omitempty"`
}

// CostreportV1beta1Resources Defines the resources.
type CostreportV1beta1Resources struct {
	// Cpu Defines the cpu resource.
	Cpu string `json:"cpu"`

	// MemoryGib Defines the memory resource in GiB.
	MemoryGib string `json:"memoryGib"`
}

// CostreportV1beta1RightsizingRecommendation RightsizingRecommendation defines a rightsizing recommendation.
type CostreportV1beta1RightsizingRecommendation struct {
	// Summary Summary defines a summary of the recommendation.
	Summary *CostreportV1beta1RightsizingRecommendationSummary `json:"summary,omitempty"`
}

// CostreportV1beta1RightsizingRecommendationSummary Summary defines a summary of the recommendation.
type CostreportV1beta1RightsizingRecommendationSummary struct {
	// CpuCoresDifference Difference of cpu cores between current workload requests and recommended configuration.
	CpuCoresDifference *float64 `json:"cpuCoresDifference,omitempty"`
	CpuEfficiency      string   `json:"cpuEfficiency"`
	Efficiency         string   `json:"efficiency"`
	MemoryEfficiency   string   `json:"memoryEfficiency"`

	// RamBytesDifference Difference of ram bytes between current workload requests and recommended configuration.
	RamBytesDifference *float64 `json:"ramBytesDifference,omitempty"`
}

// CostreportV1beta1Saving Saving defines price before and after applying a savings recommendation.
type CostreportV1beta1Saving struct {
	// PriceAfter Price after applying this configuration.
	PriceAfter *string `json:"priceAfter,omitempty"`

	// PriceBefore Price before applying this configuration.
	PriceBefore *string `json:"priceBefore,omitempty"`
}

// CostreportV1beta1SavingsCurrentConfiguration SavingsCurrentConfiguration defines current cluster configuration.
type CostreportV1beta1SavingsCurrentConfiguration struct {
	// Nodes A single cluster node.
	Nodes *[]CostreportV1beta1Node `json:"nodes,omitempty"`

	// TotalPrice SavingsPrice defines pricing details.
	TotalPrice *CostreportV1beta1SavingsPrice         `json:"totalPrice,omitempty"`
	Workloads  *[]CostreportV1beta1ReplicatedWorkload `json:"workloads,omitempty"`
}

// CostreportV1beta1SavingsPrice SavingsPrice defines pricing details.
type CostreportV1beta1SavingsPrice struct {
	// Hourly Total hourly price of the node configuration in $ currency.
	Hourly *string `json:"hourly,omitempty"`

	// Monthly Total monthly price of the node configuration in $ currency.
	Monthly *string `json:"monthly,omitempty"`
}

// CostreportV1beta1SavingsRecommendation Savings recommendation: includes hourly & monthly prices as well as percent saved.
type CostreportV1beta1SavingsRecommendation struct {
	// ArmSavingsMonthly Saving defines price before and after applying a savings recommendation.
	ArmSavingsMonthly *CostreportV1beta1Saving                `json:"armSavingsMonthly,omitempty"`
	Details           *CostreportV1beta1RecommendationDetails `json:"details,omitempty"`

	// Hourly Saving defines price before and after applying a savings recommendation.
	Hourly *CostreportV1beta1Saving `json:"hourly,omitempty"`

	// Monthly Saving defines price before and after applying a savings recommendation.
	Monthly *CostreportV1beta1Saving `json:"monthly,omitempty"`

	// SavingsPercentage Available savings by applying this configuration.
	SavingsPercentage *string `json:"savingsPercentage,omitempty"`
}

// CostreportV1beta1TrafficCost defines model for costreport.v1beta1.TrafficCost.
type CostreportV1beta1TrafficCost struct {
	// InterZoneBytes Bytes transferred between zones.
	InterZoneBytes *string `json:"interZoneBytes,omitempty"`

	// InterZoneCost Cost of bytes transferred between zones.
	InterZoneCost *string `json:"interZoneCost,omitempty"`
}

// CostreportV1beta1UpsertGroupingConfigResponse defines model for costreport.v1beta1.UpsertGroupingConfigResponse.
type CostreportV1beta1UpsertGroupingConfigResponse struct {
	// ClusterId ID of the cluster.
	ClusterId *string                          `json:"clusterId,omitempty"`
	Config    *CostreportV1beta1GroupingConfig `json:"config,omitempty"`
}

// CostreportV1beta1WorkloadCostItem Defines a workloads cost for a given time.
type CostreportV1beta1WorkloadCostItem struct {
	// CostOnDemand Average cost of the workload that is on on-demand instances for the given time period.
	CostOnDemand *string `json:"costOnDemand,omitempty"`

	// CostSpot Average cost of the workload that is on spot instances for the given time period.
	CostSpot *string `json:"costSpot,omitempty"`

	// CostSpotFallback Average cost of the workload that is on spot-fallback instances for the given time period.
	CostSpotFallback *string `json:"costSpotFallback,omitempty"`

	// CpuCostOnDemand Average CPU cost of the workload that is on on-demand instances for the given time period.
	CpuCostOnDemand *string `json:"cpuCostOnDemand,omitempty"`

	// CpuCostSpot Average CPU cost of the workload that is on spot instances for the given time period.
	CpuCostSpot *string `json:"cpuCostSpot,omitempty"`

	// CpuCostSpotFallback Average CPU cost of the workload that is on spot-fallback instances for the given time period.
	CpuCostSpotFallback *string `json:"cpuCostSpotFallback,omitempty"`

	// CpuCountOnDemand Average number of CPUs of the workload that is on on-demand instances for the given time period.
	CpuCountOnDemand *string `json:"cpuCountOnDemand,omitempty"`

	// CpuCountSpot Average number of CPUs of the workload that is on spot instances for the given time period.
	CpuCountSpot *string `json:"cpuCountSpot,omitempty"`

	// CpuCountSpotFallback Average number of CPUs of the workload that is on spot-fallback instances for the given time period.
	CpuCountSpotFallback *string `json:"cpuCountSpotFallback,omitempty"`

	// GpuCostOnDemand Average GPU cost of the workload that is on on-demand instances for the given time period.
	GpuCostOnDemand *string `json:"gpuCostOnDemand,omitempty"`

	// GpuCostSpot Average GPU cost of the workload that is on spot instances for the given time period.
	GpuCostSpot *string `json:"gpuCostSpot,omitempty"`

	// GpuCostSpotFallback Average GPU cost of the workload that is on spot-fallback instances for the given time period.
	GpuCostSpotFallback *string `json:"gpuCostSpotFallback,omitempty"`

	// GpuCountOnDemand Average number of requested GPUs of the workload that is on on-demand instances for the given time period.
	GpuCountOnDemand *string `json:"gpuCountOnDemand,omitempty"`

	// GpuCountSpot Average number of requested GPUs of the workload that is on spot instances for the given time period.
	GpuCountSpot *string `json:"gpuCountSpot,omitempty"`

	// GpuCountSpotFallback Average number of requested GPUs of the workload that is on spot-fallback instances for the given time period.
	GpuCountSpotFallback *string `json:"gpuCountSpotFallback,omitempty"`

	// PodCountOnDemand Average amount of pods for the workload that are on on-demand instances for the given time period.
	PodCountOnDemand *string `json:"podCountOnDemand,omitempty"`

	// PodCountSpot Average amount of pods for the workload that are on spot instances for the given time period.
	PodCountSpot *string `json:"podCountSpot,omitempty"`

	// PodCountSpotFallback Average amount of pods for the workload that are on spot-fallback instances for the given time period.
	PodCountSpotFallback *string `json:"podCountSpotFallback,omitempty"`

	// RamCostOnDemand Average RAM cost of the workload that is on on-demand instances for the given time period.
	RamCostOnDemand *string `json:"ramCostOnDemand,omitempty"`

	// RamCostSpot Average RAM cost of the workload that is on spot instances for the given time period.
	RamCostSpot *string `json:"ramCostSpot,omitempty"`

	// RamCostSpotFallback Average RAM cost of the workload that is on spot-fallback instances for the given time period.
	RamCostSpotFallback *string `json:"ramCostSpotFallback,omitempty"`

	// RamGibOnDemand Average requested RAM (GiB) of the workload that is on on-demand instances for the given time period.
	RamGibOnDemand *string `json:"ramGibOnDemand,omitempty"`

	// RamGibSpot Average requested RAM (GiB) of the workload that is on spot instances for the given time period.
	RamGibSpot *string `json:"ramGibSpot,omitempty"`

	// RamGibSpotFallback Average requested RAM (GiB) of the workload that is on spot_fallback instances for the given time period.
	RamGibSpotFallback *string `json:"ramGibSpotFallback,omitempty"`

	// Timestamp Timestamp of entry creation.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// UptimeMinutesOnDemand Number of minutes the workload was running on on-demand instances for the given time period.
	UptimeMinutesOnDemand *string `json:"uptimeMinutesOnDemand,omitempty"`

	// UptimeMinutesSpot Number of minutes the workload was running on spot instances for the given time period.
	UptimeMinutesSpot *string `json:"uptimeMinutesSpot,omitempty"`

	// UptimeMinutesSpotFallback Number of minutes the workload was running on spot-fallback instances for the given time period.
	UptimeMinutesSpotFallback *string `json:"uptimeMinutesSpotFallback,omitempty"`
}

// CostreportV1beta1WorkloadDataTransferCostItem Defines a workloads datatransfer cost for a given time.
type CostreportV1beta1WorkloadDataTransferCostItem struct {
	CloudApiBytes    *string `json:"cloudApiBytes,omitempty"`
	CloudApiCost     *string `json:"cloudApiCost,omitempty"`
	InterRegionBytes *string `json:"interRegionBytes,omitempty"`
	InterRegionCost  *string `json:"interRegionCost,omitempty"`
	InterZoneBytes   *string `json:"interZoneBytes,omitempty"`
	InterZoneCost    *string `json:"interZoneCost,omitempty"`
	InternetBytes    *string `json:"internetBytes,omitempty"`
	InternetCost     *string `json:"internetCost,omitempty"`
	IntraZoneBytes   *string `json:"intraZoneBytes,omitempty"`
	IntraZoneCost    *string `json:"intraZoneCost,omitempty"`

	// Timestamp Timestamp of datatransfer item aggregation.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CostreportV1beta1WorkloadDataTransferItem Defines a workload datatransfer details item.
type CostreportV1beta1WorkloadDataTransferItem struct {
	// EgressMetrics Egress datatransfer cost metrics of the workload.
	EgressMetrics *[]CostreportV1beta1WorkloadDataTransferCostItem `json:"egressMetrics,omitempty"`

	// IngressMetrics Ingress datatransfer cost metrics of the workload.
	IngressMetrics *[]CostreportV1beta1WorkloadDataTransferCostItem `json:"ingressMetrics,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace  *string `json:"namespace,omitempty"`
	TotalBytes *string `json:"totalBytes,omitempty"`
	TotalCost  *string `json:"totalCost,omitempty"`

	// WorkloadName Name of the workload.
	WorkloadName *string `json:"workloadName,omitempty"`

	// WorkloadType Type of the workload.
	WorkloadType *string `json:"workloadType,omitempty"`
}

// CostreportV1beta1WorkloadDestination Defines a traffic destination workload with costs.
type CostreportV1beta1WorkloadDestination struct {
	Egress  *CostreportV1beta1TrafficCost `json:"egress,omitempty"`
	Ingress *CostreportV1beta1TrafficCost `json:"ingress,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace *string `json:"namespace,omitempty"`

	// WorkloadName Name of the workload.
	WorkloadName *string `json:"workloadName,omitempty"`

	// WorkloadType Type of the workload.
	WorkloadType *string `json:"workloadType,omitempty"`
}

// CostreportV1beta1WorkloadEfficiency Defines the workload efficiency at a particular time.
type CostreportV1beta1WorkloadEfficiency struct {
	// CostImpact Defines cost impact of wasted resources per lifecycle.
	CostImpact *CostreportV1beta1CostImpact `json:"costImpact,omitempty"`

	// CpuEfficiency Defines cpu efficiency ratio of the workload. It is the average of all containers.
	CpuEfficiency string `json:"cpuEfficiency"`

	// Efficiency Defines the efficiency ratio of the workload. It is the average of all containers.
	Efficiency string `json:"efficiency"`

	// MemoryEfficiency Defines memory efficiency ratio of the workload. It is the average of all containers.
	MemoryEfficiency string `json:"memoryEfficiency"`

	// Timestamp Defines the time when the efficiency was calculated.
	Timestamp time.Time `json:"timestamp"`
}

// CostreportV1beta1WorkloadFilter Defines a filter for workload report.
type CostreportV1beta1WorkloadFilter struct {
	Labels         *[]CostreportV1beta1WorkloadFilterLabelValue `json:"labels,omitempty"`
	LabelsOperator *CostreportV1beta1FilterOperator             `json:"labelsOperator,omitempty"`
	Namespaces     *[]string                                    `json:"namespaces,omitempty"`
	WorkloadNames  *[]string                                    `json:"workloadNames,omitempty"`
	WorkloadTypes  *[]string                                    `json:"workloadTypes,omitempty"`
}

// CostreportV1beta1WorkloadFilterLabelValue defines model for costreport.v1beta1.WorkloadFilter.LabelValue.
type CostreportV1beta1WorkloadFilterLabelValue struct {
	// Label Label name.
	Label *string `json:"label,omitempty"`

	// Value Label Value.
	Value *string `json:"value,omitempty"`
}

// CostreportV1beta1WorkloadFilters defines model for costreport.v1beta1.WorkloadFilters.
type CostreportV1beta1WorkloadFilters struct {
	// Namespace Filter items by namespace.
	Namespace *string `json:"namespace,omitempty"`

	// WorkloadName Filter items by workload name.
	WorkloadName *string `json:"workloadName,omitempty"`

	// WorkloadType Filter items by workload type.
	WorkloadType *string `json:"workloadType,omitempty"`
}

// CostreportV1beta1WorkloadLabel defines model for costreport.v1beta1.WorkloadLabel.
type CostreportV1beta1WorkloadLabel struct {
	// Name Name of the label.
	Name *string `json:"name,omitempty"`

	// Value Value of the label.
	Value *string `json:"value,omitempty"`
}

// CostreportV1beta1WorkloadLabelFilters defines model for costreport.v1beta1.WorkloadLabelFilters.
type CostreportV1beta1WorkloadLabelFilters struct {
	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `json:"clusterIds,omitempty"`

	// LabelNameContains Filter workload label names by substring.
	LabelNameContains *string `json:"labelNameContains,omitempty"`

	// LabelValueContains Filter workload label values by substring.
	LabelValueContains *string                           `json:"labelValueContains,omitempty"`
	WorkloadFilters    *CostreportV1beta1WorkloadFilters `json:"workloadFilters,omitempty"`
}

// CostreportV1beta1WorkloadMetadata defines model for costreport.v1beta1.WorkloadMetadata.
type CostreportV1beta1WorkloadMetadata struct {
	ClusterId    *string                           `json:"clusterId,omitempty"`
	Labels       *[]CostreportV1beta1WorkloadLabel `json:"labels,omitempty"`
	Namespace    *string                           `json:"namespace,omitempty"`
	WorkloadName *string                           `json:"workloadName,omitempty"`
	WorkloadType *string                           `json:"workloadType,omitempty"`
}

// CostreportV1beta1WorkloadReportItem Defines a workload.
type CostreportV1beta1WorkloadReportItem struct {
	// CostMetrics Cost metrics of the workload.
	CostMetrics *[]CostreportV1beta1WorkloadCostItem `json:"costMetrics,omitempty"`

	// Labels Labels of the workload.
	Labels *[]CostreportV1beta1WorkloadLabel `json:"labels,omitempty"`

	// Namespace Namespace the workload is in.
	Namespace *string `json:"namespace,omitempty"`

	// WorkloadName Name of the workload.
	WorkloadName *string `json:"workloadName,omitempty"`

	// WorkloadType Type of the workload.
	WorkloadType *string `json:"workloadType,omitempty"`
}

// DedicatedinstanceV1beta1DedicatedInstance defines model for dedicatedinstance.v1beta1.DedicatedInstance.
type DedicatedinstanceV1beta1DedicatedInstance struct {
	InstanceType *string                                               `json:"instanceType,omitempty"`
	Name         *string                                               `json:"name,omitempty"`
	Total        *DedicatedinstanceV1beta1DedicatedInstanceConsumption `json:"total,omitempty"`
	Used         *DedicatedinstanceV1beta1DedicatedInstanceConsumption `json:"used,omitempty"`
}

// DedicatedinstanceV1beta1DedicatedInstanceConsumption defines model for dedicatedinstance.v1beta1.DedicatedInstanceConsumption.
type DedicatedinstanceV1beta1DedicatedInstanceConsumption struct {
	Cpu    *int32 `json:"cpu,omitempty"`
	Memory *int32 `json:"memory,omitempty"`
	Ssd    *int32 `json:"ssd,omitempty"`
}

// DedicatedinstanceV1beta1ListDedicatedInstancesResponse defines model for dedicatedinstance.v1beta1.ListDedicatedInstancesResponse.
type DedicatedinstanceV1beta1ListDedicatedInstancesResponse struct {
	DedicatedInstances *[]DedicatedinstanceV1beta1DedicatedInstance `json:"dedicatedInstances,omitempty"`
}

// ExternalclusterV1AKSClusterParams AKSClusterParams defines AKS-specific arguments.
type ExternalclusterV1AKSClusterParams struct {
	// MaxPodsPerNode Deprecated. This field is no longer updatable and node configuration equivalent should be used.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// NetworkPlugin Network plugin in use by the cluster. Can be `kubenet` or `azure`.
	NetworkPlugin *string `json:"networkPlugin,omitempty"`

	// NodeResourceGroup Node resource group of the cluster.
	NodeResourceGroup *string `json:"nodeResourceGroup,omitempty"`

	// Region Region of the cluster.
	Region *string `json:"region,omitempty"`

	// SubscriptionId Azure subscription ID where cluster runs.
	SubscriptionId *string `json:"subscriptionId,omitempty"`

	// ZoneNamePattern Zone name pattern in the cluster.
	ZoneNamePattern *string `json:"zoneNamePattern,omitempty"`
}

// ExternalclusterV1AddNodeResponse AddNodeResponse is the result of AddNodeRequest.
type ExternalclusterV1AddNodeResponse struct {
	// NodeId The ID of the node.
	NodeId string `json:"nodeId"`

	// OperationId Add node operation ID.
	OperationId string `json:"operationId"`
}

// ExternalclusterV1CloudEvent CloudEvent represents a remote event that happened in the cloud, e.g. "node added".
type ExternalclusterV1CloudEvent struct {
	// EventType Event type.
	EventType *string `json:"eventType,omitempty"`

	// Node Node provider ID, eg.: aws instance-id.
	Node *string `json:"node,omitempty"`

	// NodeId Cast node ID.
	NodeId *string `json:"nodeId"`

	// NodeState Node state.
	NodeState *string `json:"nodeState,omitempty"`
}

// ExternalclusterV1Cluster Cluster represents external kubernetes cluster.
type ExternalclusterV1Cluster struct {
	// AgentSnapshotReceivedAt The date agent snapshot was last received.
	AgentSnapshotReceivedAt *time.Time `json:"agentSnapshotReceivedAt,omitempty"`

	// AgentStatus Agent status.
	AgentStatus *string `json:"agentStatus,omitempty"`

	// Aks AKSClusterParams defines AKS-specific arguments.
	Aks *ExternalclusterV1AKSClusterParams `json:"aks,omitempty"`

	// AllRegionZones All available zones in cluster's region.
	AllRegionZones *[]ExternalclusterV1Zone `json:"allRegionZones,omitempty"`

	// ClusterNameId User friendly unique cluster identifier.
	ClusterNameId *string `json:"clusterNameId,omitempty"`

	// CreatedAt The date when cluster was registered.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CredentialsId The cluster's credentials ID.
	CredentialsId *string `json:"credentialsId,omitempty"`

	// DeletedAt The date when cluster was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// Eks EKSClusterParams defines EKS-specific arguments.
	Eks *ExternalclusterV1EKSClusterParams `json:"eks,omitempty"`

	// FirstOperationAt Timestamp when the first operation was performed for a given cluster, which marks when cluster optimisation started by CAST AI.
	FirstOperationAt *time.Time `json:"firstOperationAt,omitempty"`

	// Gke GKEClusterParams defines GKE-specific arguments.
	Gke *ExternalclusterV1GKEClusterParams `json:"gke,omitempty"`

	// Id The cluster's ID.
	Id *string `json:"id,omitempty"`

	// Kops KOPSClusterParams defines KOPS-specific arguments.
	Kops              *ExternalclusterV1KOPSClusterParams `json:"kops,omitempty"`
	KubernetesVersion *string                             `json:"kubernetesVersion"`

	// ManagedBy Method used to onboard the cluster, eg.: console, terraform.
	ManagedBy *string `json:"managedBy,omitempty"`

	// Name The name of the external cluster.
	Name *string `json:"name,omitempty"`

	// Openshift OpenShiftClusterParams defines OpenShift-specific arguments.
	Openshift *ExternalclusterV1OpenshiftClusterParams `json:"openshift,omitempty"`

	// OrganizationId The cluster's organization ID.
	OrganizationId *string `json:"organizationId,omitempty"`

	// ProviderNamespaceId Cluster location where cloud provider organizes cloud resources, eg.: GCP project ID, AWS account ID.
	ProviderNamespaceId *string `json:"providerNamespaceId,omitempty"`

	// ProviderType Cluster cloud provider type.
	ProviderType *string `json:"providerType,omitempty"`

	// ReconcileError Shows last reconcile error if any.
	ReconcileError *string                                `json:"reconcileError"`
	ReconcileInfo  *ExternalclusterV1ClusterReconcileInfo `json:"reconcileInfo,omitempty"`

	// ReconciledAt Timestamp when the last reconcile was performed.
	ReconciledAt *time.Time `json:"reconciledAt"`

	// Region Region represents cluster region.
	Region *ExternalclusterV1Region `json:"region,omitempty"`

	// SshPublicKey Deprecated. Node configuration equivalent should be used.
	SshPublicKey *string `json:"sshPublicKey"`

	// Status Current status of the cluster.
	Status *string `json:"status,omitempty"`

	// Subnets Cluster subnets.
	Subnets *[]ExternalclusterV1Subnet `json:"subnets,omitempty"`
	Tags    *map[string]string         `json:"tags,omitempty"`

	// Zones Cluster zones.
	Zones *[]ExternalclusterV1Zone `json:"zones,omitempty"`
}

// ExternalclusterV1ClusterReconcileInfo defines model for externalcluster.v1.Cluster.ReconcileInfo.
type ExternalclusterV1ClusterReconcileInfo struct {
	// Error Shows last reconcile error if any.
	Error *string `json:"error"`

	// ErrorCount Number of times the reconcile was retried.
	ErrorCount *int32  `json:"errorCount,omitempty"`
	Mode       *string `json:"mode,omitempty"`

	// ReconciledAt Timestamp when the last reconcile was performed.
	ReconciledAt *time.Time `json:"reconciledAt"`

	// RetryAt Timestamp when the reconcile was retried.
	RetryAt *time.Time `json:"retryAt"`

	// StartedAt Timestamp when the reconcile was started.
	StartedAt *time.Time `json:"startedAt"`

	// Status Reconcile status.
	Status *string `json:"status"`
}

// ExternalclusterV1ClusterUpdate defines model for externalcluster.v1.ClusterUpdate.
type ExternalclusterV1ClusterUpdate struct {
	// Credentials JSON encoded cluster credentials string.
	Credentials *string `json:"credentials,omitempty"`

	// Eks UpdateEKSClusterParams defines updatable EKS cluster configuration.
	Eks *ExternalclusterV1UpdateEKSClusterParams `json:"eks,omitempty"`
}

// ExternalclusterV1CreateAssumeRolePrincipalResponse defines model for externalcluster.v1.CreateAssumeRolePrincipalResponse.
type ExternalclusterV1CreateAssumeRolePrincipalResponse struct {
	Arn *string `json:"arn,omitempty"`
}

// ExternalclusterV1CreateClusterTokenResponse defines model for externalcluster.v1.CreateClusterTokenResponse.
type ExternalclusterV1CreateClusterTokenResponse struct {
	Token *string `json:"token,omitempty"`
}

// ExternalclusterV1DeleteAssumeRolePrincipalResponse defines model for externalcluster.v1.DeleteAssumeRolePrincipalResponse.
type ExternalclusterV1DeleteAssumeRolePrincipalResponse = map[string]interface{}

// ExternalclusterV1DeleteNodeResponse DeleteNodeResponse is the result of DeleteNodeRequest.
type ExternalclusterV1DeleteNodeResponse struct {
	// OperationId Node delete operation ID.
	OperationId *string `json:"operationId,omitempty"`
}

// ExternalclusterV1DisconnectConfig defines model for externalcluster.v1.DisconnectConfig.
type ExternalclusterV1DisconnectConfig struct {
	// DeleteProvisionedNodes Whether CAST provisioned nodes should be deleted.
	DeleteProvisionedNodes *bool `json:"deleteProvisionedNodes,omitempty"`

	// KeepKubernetesResources Whether CAST Kubernetes resources should be kept.
	KeepKubernetesResources *bool `json:"keepKubernetesResources,omitempty"`
}

// ExternalclusterV1DrainConfig defines model for externalcluster.v1.DrainConfig.
type ExternalclusterV1DrainConfig struct {
	// Force If set to true, pods will be forcefully deleted after drain timeout.
	Force *bool `json:"force,omitempty"`

	// TimeoutSeconds Node drain timeout in seconds. Defaults to 600s if not set.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// ExternalclusterV1DrainNodeResponse DrainNodeResponse is the result of DrainNodeRequest.
type ExternalclusterV1DrainNodeResponse struct {
	// OperationId Drain node operation ID.
	OperationId string `json:"operationId"`
}

// ExternalclusterV1EKSClusterParams EKSClusterParams defines EKS-specific arguments.
type ExternalclusterV1EKSClusterParams struct {
	// AccountId AWS Account ID where cluster runs.
	AccountId     *string `json:"accountId,omitempty"`
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`

	// ClusterName Name of the cluster.
	ClusterName  *string `json:"clusterName,omitempty"`
	DnsClusterIp *string `json:"dnsClusterIp,omitempty"`

	// InstanceProfileArn Deprecated. Output only. Cluster's instance profile ARN used for CAST provisioned nodes.
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty"`

	// Region Region of the cluster.
	Region *string `json:"region,omitempty"`

	// SecurityGroups Deprecated. Output only. Cluster's security groups configuration.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Subnets Deprecated. Output only. Cluster's subnets configuration.
	Subnets *[]string `json:"subnets,omitempty"`

	// Tags Deprecated. Output only. CAST provisioned nodes tags configuration.
	Tags *map[string]string `json:"tags,omitempty"`
}

// ExternalclusterV1GKEClusterParams GKEClusterParams defines GKE-specific arguments.
type ExternalclusterV1GKEClusterParams struct {
	// ClusterName Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// Location Location of the cluster.
	Location *string `json:"location,omitempty"`

	// MaxPodsPerNode Max pods per node. Default is 110.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// ProjectId GCP project ID where cluster runs.
	ProjectId *string `json:"projectId,omitempty"`

	// Region Region of the cluster.
	Region *string `json:"region,omitempty"`
}

// ExternalclusterV1GPUConfig GPUConfig describes instance GPU configuration.
//
// Required while provisioning GCP N1 instance types with GPU.
// Eg.: n1-standard-2 with 8 x NVIDIA Tesla K80
type ExternalclusterV1GPUConfig struct {
	// Count Number of GPUs.
	Count *int32 `json:"count,omitempty"`

	// Type GPU type.
	Type *string `json:"type,omitempty"`
}

// ExternalclusterV1GPUDevice defines model for externalcluster.v1.GPUDevice.
type ExternalclusterV1GPUDevice struct {
	Count        *int32  `json:"count,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	MemoryMib    *int32  `json:"memoryMib,omitempty"`
}

// ExternalclusterV1GPUInfo defines model for externalcluster.v1.GPUInfo.
type ExternalclusterV1GPUInfo struct {
	GpuDevices *[]ExternalclusterV1GPUDevice `json:"gpuDevices,omitempty"`
}

// ExternalclusterV1GetAssumeRolePrincipalResponse defines model for externalcluster.v1.GetAssumeRolePrincipalResponse.
type ExternalclusterV1GetAssumeRolePrincipalResponse struct {
	Arn *string `json:"arn,omitempty"`
}

// ExternalclusterV1GetAssumeRoleUserResponse defines model for externalcluster.v1.GetAssumeRoleUserResponse.
type ExternalclusterV1GetAssumeRoleUserResponse struct {
	Arn *string `json:"arn,omitempty"`
}

// ExternalclusterV1GetCleanupScriptResponse GetCleanupScriptResponse is the result of GetCleanupScriptRequest.
type ExternalclusterV1GetCleanupScriptResponse struct {
	Script *string `json:"script,omitempty"`
}

// ExternalclusterV1GetCredentialsScriptResponse GetCredentialsScriptResponse is the result of GetCredentialsScriptRequest.
type ExternalclusterV1GetCredentialsScriptResponse struct {
	Script *string `json:"script,omitempty"`
}

// ExternalclusterV1HandleCloudEventResponse HandleCloudEventResponse is the result of HandleCloudEventRequest.
type ExternalclusterV1HandleCloudEventResponse = map[string]interface{}

// ExternalclusterV1KOPSClusterParams KOPSClusterParams defines KOPS-specific arguments.
type ExternalclusterV1KOPSClusterParams struct {
	// Cloud Cloud provider of the cluster.
	Cloud *string `json:"cloud,omitempty"`

	// ClusterName Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// Region Region of the cluster.
	Region *string `json:"region,omitempty"`

	// StateStore KOPS state store url.
	StateStore *string `json:"stateStore,omitempty"`
}

// ExternalclusterV1ListClustersResponse ListClustersResponse is the result of ListClustersRequest.
type ExternalclusterV1ListClustersResponse struct {
	Items *[]ExternalclusterV1Cluster `json:"items,omitempty"`
}

// ExternalclusterV1ListNodesResponse defines model for externalcluster.v1.ListNodesResponse.
type ExternalclusterV1ListNodesResponse struct {
	Items      *[]ExternalclusterV1Node `json:"items,omitempty"`
	NextCursor *string                  `json:"nextCursor,omitempty"`
}

// ExternalclusterV1Node Node represents a single VM that run as Kubernetes master or worker.
type ExternalclusterV1Node struct {
	AddedBy     *string            `json:"addedBy,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
	Cloud       *string            `json:"cloud,omitempty"`

	// CreatedAt created_at represents timestamp of when node was created in cloud infrastructure.
	CreatedAt *time.Time                `json:"createdAt,omitempty"`
	GpuInfo   *ExternalclusterV1GPUInfo `json:"gpuInfo,omitempty"`
	Id        *string                   `json:"id,omitempty"`

	// InstanceArchitecture Deprecated. Use node_info architecture field.
	InstanceArchitecture *string `json:"instanceArchitecture"`
	InstanceId           *string `json:"instanceId"`

	// InstanceLabels Output only. Cloud provider instance tags/labels.
	InstanceLabels *map[string]string `json:"instanceLabels,omitempty"`

	// InstanceName Output only. Cloud provider instance name.
	InstanceName  *string `json:"instanceName"`
	InstancePrice *string `json:"instancePrice"`
	InstanceType  *string `json:"instanceType,omitempty"`

	// JoinedAt joined_at represents timestamp of when node has joined kubernetes cluster.
	JoinedAt *time.Time         `json:"joinedAt,omitempty"`
	Labels   *map[string]string `json:"labels,omitempty"`
	Name     *string            `json:"name,omitempty"`

	// Network NodeNetwork represents node network.
	Network             *ExternalclusterV1NodeNetwork `json:"network,omitempty"`
	NodeConfigurationId *string                       `json:"nodeConfigurationId"`
	NodeInfo            *ExternalclusterV1NodeInfo    `json:"nodeInfo,omitempty"`
	ProviderId          *string                       `json:"providerId"`
	Resources           *ExternalclusterV1Resources   `json:"resources,omitempty"`

	// Role NodeType defines the role of the VM when joining the Kubernetes cluster. Default value is not allowed.
	Role *ExternalclusterV1NodeType `json:"role,omitempty"`

	// SpotConfig NodeSpotConfig defines if node should be created as spot instance, and params for creation.
	SpotConfig *ExternalclusterV1NodeSpotConfig `json:"spotConfig,omitempty"`

	// State NodeState contains feedback information about progress on the node provisioning.
	State         *ExternalclusterV1NodeState `json:"state,omitempty"`
	SubnetId      *string                     `json:"subnetId"`
	Taints        *[]ExternalclusterV1Taint   `json:"taints,omitempty"`
	Unschedulable *bool                       `json:"unschedulable,omitempty"`
	Zone          *string                     `json:"zone,omitempty"`
}

// ExternalclusterV1NodeAffinity NodeAffinity provides control over the assignment of individual nodes to dedicated host instances.
type ExternalclusterV1NodeAffinity struct {
	// Affinity THe affinity rules required for choosing the group.
	Affinity *[]K8sSelectorV1KubernetesNodeAffinity `json:"affinity,omitempty"`

	// DedicatedGroup The name of the dedicated group.
	DedicatedGroup *string `json:"dedicatedGroup"`
}

// ExternalclusterV1NodeConfig defines model for externalcluster.v1.NodeConfig.
type ExternalclusterV1NodeConfig struct {
	// ConfigurationId ID reference of Node configuration (template) to be used for node creation. Supersedes Configuration Name.
	ConfigurationId *string `json:"configurationId"`

	// ConfigurationName Name reference of Node configuration (template)to be used for node creation.
	// Superseded if Configuration ID reference is provided.
	// Request will fail if several configurations with same name exists for a given cluster.
	ConfigurationName *string `json:"configurationName"`

	// GpuConfig GPUConfig describes instance GPU configuration.
	//
	// Required while provisioning GCP N1 instance types with GPU.
	// Eg.: n1-standard-2 with 8 x NVIDIA Tesla K80
	GpuConfig *ExternalclusterV1GPUConfig `json:"gpuConfig,omitempty"`

	// InstanceType Instance type of the node.
	InstanceType string `json:"instanceType"`

	// KubernetesLabels Node Kubernetes labels.
	KubernetesLabels *map[string]string `json:"kubernetesLabels,omitempty"`

	// KubernetesTaints Node Kubernetes taints.
	KubernetesTaints *[]ExternalclusterV1Taint `json:"kubernetesTaints,omitempty"`

	// NodeAffinity NodeAffinity provides control over the assignment of individual nodes to dedicated host instances.
	NodeAffinity *ExternalclusterV1NodeAffinity `json:"nodeAffinity,omitempty"`

	// SpotConfig NodeSpotConfig defines if node should be created as spot instance, and params for creation.
	SpotConfig *ExternalclusterV1NodeSpotConfig `json:"spotConfig,omitempty"`

	// SubnetId Node subnet ID.
	SubnetId *string `json:"subnetId"`

	// Volume NodeVolume defines node's local root volume configuration.
	Volume *ExternalclusterV1NodeVolume `json:"volume,omitempty"`

	// Zone Zone of the node.
	Zone *string `json:"zone"`
}

// ExternalclusterV1NodeInfo defines model for externalcluster.v1.NodeInfo.
type ExternalclusterV1NodeInfo struct {
	Architecture            *string `json:"architecture,omitempty"`
	ContainerRuntimeVersion *string `json:"containerRuntimeVersion,omitempty"`
	KernelVersion           *string `json:"kernelVersion,omitempty"`
	KubeProxyVersion        *string `json:"kubeProxyVersion,omitempty"`
	KubeletVersion          *string `json:"kubeletVersion,omitempty"`
	OperatingSystem         *string `json:"operatingSystem,omitempty"`
	OsImage                 *string `json:"osImage,omitempty"`
}

// ExternalclusterV1NodeNetwork NodeNetwork represents node network.
type ExternalclusterV1NodeNetwork struct {
	PrivateIp *string `json:"privateIp,omitempty"`
	PublicIp  *string `json:"publicIp,omitempty"`
}

// ExternalclusterV1NodeSpotConfig NodeSpotConfig defines if node should be created as spot instance, and params for creation.
type ExternalclusterV1NodeSpotConfig struct {
	// IsSpot Whether node should be created as spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// Price Spot instance price. Applicable only for AWS nodes.
	Price *string `json:"price,omitempty"`
}

// ExternalclusterV1NodeState NodeState contains feedback information about progress on the node provisioning.
type ExternalclusterV1NodeState struct {
	Phase *string `json:"phase,omitempty"`
}

// ExternalclusterV1NodeType NodeType defines the role of the VM when joining the Kubernetes cluster. Default value is not allowed.
type ExternalclusterV1NodeType string

// ExternalclusterV1NodeVolume NodeVolume defines node's local root volume configuration.
type ExternalclusterV1NodeVolume struct {
	// RaidConfig RaidConfig allow You have two or more devices, of approximately the same size, and you want to combine their storage capacity
	// and also combine their performance by accessing them in parallel.
	RaidConfig *ExternalclusterV1RaidConfig `json:"raidConfig,omitempty"`

	// Size Volume size in GiB.
	Size *int32 `json:"size,omitempty"`
}

// ExternalclusterV1OpenshiftClusterParams OpenShiftClusterParams defines OpenShift-specific arguments.
type ExternalclusterV1OpenshiftClusterParams struct {
	// Cloud Cloud provider of the cluster.
	Cloud *string `json:"cloud,omitempty"`

	// ClusterName Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`
	InternalId  *string `json:"internalId,omitempty"`

	// Region Region of the cluster.
	Region *string `json:"region,omitempty"`
}

// ExternalclusterV1RaidConfig RaidConfig allow You have two or more devices, of approximately the same size, and you want to combine their storage capacity
// and also combine their performance by accessing them in parallel.
type ExternalclusterV1RaidConfig struct {
	// ChunkSize Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored
	// for the type of data written by the workloads in the node. If not provided it will default to 64KB.
	ChunkSize *int32 `json:"chunkSize"`
}

// ExternalclusterV1ReconcileClusterResponse ReconcileClusterResponse is the result of ReconcileClusterRequest.
type ExternalclusterV1ReconcileClusterResponse = map[string]interface{}

// ExternalclusterV1Region Region represents cluster region.
type ExternalclusterV1Region struct {
	// DisplayName Display name of the region.
	DisplayName *string `json:"displayName,omitempty"`

	// Name Name of the region.
	Name *string `json:"name,omitempty"`
}

// ExternalclusterV1RegisterClusterRequest RegisterClusterRequest registers cluster.
type ExternalclusterV1RegisterClusterRequest struct {
	// Aks AKSClusterParams defines AKS-specific arguments.
	Aks *ExternalclusterV1AKSClusterParams `json:"aks,omitempty"`

	// Eks EKSClusterParams defines EKS-specific arguments.
	Eks *ExternalclusterV1EKSClusterParams `json:"eks,omitempty"`

	// Gke GKEClusterParams defines GKE-specific arguments.
	Gke *ExternalclusterV1GKEClusterParams `json:"gke,omitempty"`

	// Id The ID of the cluster.
	Id *string `json:"id,omitempty"`

	// Kops KOPSClusterParams defines KOPS-specific arguments.
	Kops *ExternalclusterV1KOPSClusterParams `json:"kops,omitempty"`

	// Name The name of the cluster.
	Name string `json:"name"`

	// Openshift OpenShiftClusterParams defines OpenShift-specific arguments.
	Openshift *ExternalclusterV1OpenshiftClusterParams `json:"openshift,omitempty"`

	// OrganizationId Organization of the cluster.
	OrganizationId *string `json:"organizationId,omitempty"`
}

// ExternalclusterV1Resources defines model for externalcluster.v1.Resources.
type ExternalclusterV1Resources struct {
	BandwidthCapacityMbps *int32 `json:"bandwidthCapacityMbps,omitempty"`
	CpuAllocatableMilli   *int32 `json:"cpuAllocatableMilli,omitempty"`
	CpuCapacityMilli      *int32 `json:"cpuCapacityMilli,omitempty"`
	CpuRequestsMilli      *int32 `json:"cpuRequestsMilli,omitempty"`
	MemAllocatableMib     *int32 `json:"memAllocatableMib,omitempty"`
	MemCapacityMib        *int32 `json:"memCapacityMib,omitempty"`
	MemRequestsMib        *int32 `json:"memRequestsMib,omitempty"`
}

// ExternalclusterV1Subnet Subnet represents cluster subnet.
type ExternalclusterV1Subnet struct {
	// Cidr Cidr block of the subnet.
	Cidr *string `json:"cidr,omitempty"`

	// Id The ID of the subnet.
	Id *string `json:"id,omitempty"`

	// Name Deprecated. Subnet name is not filled and should not be used.
	Name *string `json:"name,omitempty"`

	// Public Public defines if subnet is publicly routable.
	// Optional. Populated for EKS provider only.
	Public *bool `json:"public"`

	// ZoneName Subnet's zone name.
	ZoneName *string `json:"zoneName,omitempty"`
}

// ExternalclusterV1Taint Taint defines node taint in kubernetes cluster.
type ExternalclusterV1Taint struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

// ExternalclusterV1UpdateClusterTagsResponse UpdateClusterTagsResponse result of cluster tags update.
type ExternalclusterV1UpdateClusterTagsResponse = map[string]interface{}

// ExternalclusterV1UpdateEKSClusterParams UpdateEKSClusterParams defines updatable EKS cluster configuration.
type ExternalclusterV1UpdateEKSClusterParams struct {
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
}

// ExternalclusterV1Zone Cluster zone.
type ExternalclusterV1Zone struct {
	// Id ID of the zone.
	Id *string `json:"id,omitempty"`

	// Name Zone name.
	Name *string `json:"name,omitempty"`
}

// InsightsV1AgentSyncStateFilter defines model for insights.v1.AgentSyncStateFilter.
type InsightsV1AgentSyncStateFilter struct {
	ImagesIds *[]string `json:"imagesIds,omitempty"`
}

// InsightsV1AgentSyncStateImages defines model for insights.v1.AgentSyncStateImages.
type InsightsV1AgentSyncStateImages struct {
	FullResourcesResyncRequired *bool                     `json:"fullResourcesResyncRequired,omitempty"`
	ScannedImages               *[]InsightsV1ScannedImage `json:"scannedImages,omitempty"`
}

// InsightsV1AttackPath defines model for insights.v1.AttackPath.
type InsightsV1AttackPath struct {
	Environment *InsightsV1AttackPathEnvironment `json:"environment,omitempty"`

	// Id Attack path uuid.
	Id *string `json:"id,omitempty"`

	// Name Attack path name, eg. Internet exposed admin-ui service with high severity vulnerabilities.
	Name *string `json:"name,omitempty"`

	// RiskFactors Risk factors involved in attack path, eg. internet_exposed, vulnerabilities, sensitive_data.
	RiskFactors   *[]string                   `json:"riskFactors,omitempty"`
	SeverityLevel *string                     `json:"severityLevel,omitempty"`
	Stats         *InsightsV1AttackPathStats  `json:"stats,omitempty"`
	Target        *InsightsV1AttackPathTarget `json:"target,omitempty"`
}

// InsightsV1AttackPathEnvironment defines model for insights.v1.AttackPathEnvironment.
type InsightsV1AttackPathEnvironment struct {
	ClusterId *string `json:"clusterId,omitempty"`
}

// InsightsV1AttackPathGraph defines model for insights.v1.AttackPathGraph.
type InsightsV1AttackPathGraph struct {
	Edges    *[]InsightsV1AttackPathGraphEdge   `json:"edges,omitempty"`
	Vertices *[]InsightsV1AttackPathGraphVertex `json:"vertices,omitempty"`
}

// InsightsV1AttackPathGraphEdge defines model for insights.v1.AttackPathGraphEdge.
type InsightsV1AttackPathGraphEdge struct {
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// InsightsV1AttackPathGraphVertex defines model for insights.v1.AttackPathGraphVertex.
type InsightsV1AttackPathGraphVertex struct {
	ClusterResource *InsightsV1AttackPathGraphVertexClusterResourceMeta `json:"clusterResource,omitempty"`

	// Id Graph vertex id which is unique in single graph context.
	Id       *string                                      `json:"id,omitempty"`
	Image    *InsightsV1AttackPathGraphVertexImageMeta    `json:"image,omitempty"`
	Internet *InsightsV1AttackPathGraphVertexInternetMeta `json:"internet,omitempty"`
	Name     *string                                      `json:"name,omitempty"`

	// Type Type, eg. application, ingress, service, image.
	Type *string `json:"type,omitempty"`
}

// InsightsV1AttackPathGraphVertexClusterResourceMeta defines model for insights.v1.AttackPathGraphVertex.ClusterResourceMeta.
type InsightsV1AttackPathGraphVertexClusterResourceMeta struct {
	// AffectedIngressRules Affected ingress rules.
	AffectedIngressRules *[]InsightsV1AttackPathGraphVertexIngressRule `json:"affectedIngressRules,omitempty"`

	// Kind Kubernetes resource kind, eg. Deployment, Service, DaemonSet.
	Kind *string `json:"kind,omitempty"`

	// Name Kubernetes resource name.
	Name *string `json:"name,omitempty"`

	// Namespace Kubernetes namespace.
	Namespace *string `json:"namespace,omitempty"`
}

// InsightsV1AttackPathGraphVertexImageMeta defines model for insights.v1.AttackPathGraphVertex.ImageMeta.
type InsightsV1AttackPathGraphVertexImageMeta struct {
	VulnCount *int32 `json:"vulnCount,omitempty"`
}

// InsightsV1AttackPathGraphVertexIngressRule defines model for insights.v1.AttackPathGraphVertex.IngressRule.
type InsightsV1AttackPathGraphVertexIngressRule struct {
	// Host Host that this rule applies to, or "*" for any host.
	Host *string `json:"host,omitempty"`

	// Paths Paths that are routed to the specified service.
	Paths *[]string `json:"paths,omitempty"`

	// Service The service that this rule routes to.
	Service *string `json:"service,omitempty"`
}

// InsightsV1AttackPathGraphVertexInternetMeta defines model for insights.v1.AttackPathGraphVertex.InternetMeta.
type InsightsV1AttackPathGraphVertexInternetMeta struct {
	PublicAddresses *[]string `json:"publicAddresses,omitempty"`
}

// InsightsV1AttackPathStats defines model for insights.v1.AttackPathStats.
type InsightsV1AttackPathStats struct {
	AffectedResourcesCount *int32 `json:"affectedResourcesCount,omitempty"`
}

// InsightsV1AttackPathTarget defines model for insights.v1.AttackPathTarget.
type InsightsV1AttackPathTarget struct {
	Kind      *string `json:"kind,omitempty"`
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// InsightsV1BaseImage defines model for insights.v1.BaseImage.
type InsightsV1BaseImage struct {
	Digest       *string        `json:"digest,omitempty"`
	SharedLayers *int32         `json:"sharedLayers,omitempty"`
	Tag          *InsightsV1Tag `json:"tag,omitempty"`
}

// InsightsV1BestPracticesStandard Standard in which check should be returned.
//
//   - cast: default standard
//   - cisAks12: cis aks 12
//   - cisEks12: cis eks 12
//   - cisGke13: cis gke 13
//   - cisAks13: cis aks 13
//   - cisEks13: cis eks 13
//   - cisGke14: cis gke 14
//   - cisAks14: cis aks 14
type InsightsV1BestPracticesStandard string

// InsightsV1CVE defines model for insights.v1.CVE.
type InsightsV1CVE struct {
	Description *string  `json:"description,omitempty"`
	Link        *string  `json:"link,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Score       *float32 `json:"score,omitempty"`
}

// InsightsV1CheckClusterResource defines model for insights.v1.CheckClusterResource.
type InsightsV1CheckClusterResource struct {
	Resource *InsightsV1ClusterResource `json:"resource,omitempty"`

	// Status - resource_affected: Resource is affected. It fails this check.
	//  - resource_excepted: Resource is excepted. It failed this check, but there is a matching exception.
	//  - resource_unaffected: Resource is unaffected. It passes this check.
	Status *InsightsV1CheckClusterResourceStatus `json:"status,omitempty"`
}

// InsightsV1CheckClusterResourceStatus - resource_affected: Resource is affected. It fails this check.
//   - resource_excepted: Resource is excepted. It failed this check, but there is a matching exception.
//   - resource_unaffected: Resource is unaffected. It passes this check.
type InsightsV1CheckClusterResourceStatus string

// InsightsV1CheckEnforcement defines model for insights.v1.CheckEnforcement.
type InsightsV1CheckEnforcement struct {
	ClusterId     *string `json:"clusterId,omitempty"`
	EnforcementId *string `json:"enforcementId,omitempty"`
}

// InsightsV1CheckExceptionsGroup defines model for insights.v1.CheckExceptionsGroup.
type InsightsV1CheckExceptionsGroup struct {
	Clusters   *[]string `json:"clusters,omitempty"`
	Kinds      *[]string `json:"kinds,omitempty"`
	Names      *[]string `json:"names,omitempty"`
	Namespaces *[]string `json:"namespaces,omitempty"`
}

// InsightsV1CheckExceptionsPayload defines model for insights.v1.CheckExceptionsPayload.
type InsightsV1CheckExceptionsPayload struct {
	Groups  *[]InsightsV1CheckExceptionsGroup `json:"groups,omitempty"`
	Version *time.Time                        `json:"version,omitempty"`
}

// InsightsV1Cluster defines model for insights.v1.Cluster.
type InsightsV1Cluster struct {
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

// InsightsV1ClusterResource defines model for insights.v1.ClusterResource.
type InsightsV1ClusterResource struct {
	ApiVersion  *string `json:"apiVersion,omitempty"`
	ClusterId   *string `json:"clusterId,omitempty"`
	ClusterName *string `json:"clusterName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Kind        *string `json:"kind,omitempty"`
	Name        *string `json:"name,omitempty"`
	Namespace   *string `json:"namespace,omitempty"`
}

// InsightsV1ComplianceDetails defines model for insights.v1.ComplianceDetails.
type InsightsV1ComplianceDetails struct {
	Compliant    *int32 `json:"compliant,omitempty"`
	Critical     *int32 `json:"critical,omitempty"`
	High         *int32 `json:"high,omitempty"`
	Low          *int32 `json:"low,omitempty"`
	Medium       *int32 `json:"medium,omitempty"`
	NonCompliant *int32 `json:"nonCompliant,omitempty"`
}

// InsightsV1ConfigureClusterSecuritySettingsResponse defines model for insights.v1.ConfigureClusterSecuritySettingsResponse.
type InsightsV1ConfigureClusterSecuritySettingsResponse = map[string]interface{}

// InsightsV1ContainerImage defines model for insights.v1.ContainerImage.
type InsightsV1ContainerImage struct {
	AffectedResources              *int32                     `json:"affectedResources,omitempty"`
	Clusters                       *int32                     `json:"clusters,omitempty"`
	Digest                         *string                    `json:"digest,omitempty"`
	Fixes                          *int32                     `json:"fixes,omitempty"`
	ScanErrorMsg                   *string                    `json:"scanErrorMsg,omitempty"`
	ScanStatus                     *InsightsV1ImageScanStatus `json:"scanStatus,omitempty"`
	Status                         *InsightsV1ImageStatus     `json:"status,omitempty"`
	Tags                           *[]InsightsV1Tag           `json:"tags,omitempty"`
	VulnerabilitiesBySeverityLevel *map[string]int32          `json:"vulnerabilitiesBySeverityLevel,omitempty"`
}

// InsightsV1ContainerImagePackage defines model for insights.v1.ContainerImagePackage.
type InsightsV1ContainerImagePackage struct {
	Fixes                          *int32            `json:"fixes,omitempty"`
	Id                             *string           `json:"id,omitempty"`
	LayerDigest                    *string           `json:"layerDigest,omitempty"`
	Name                           *string           `json:"name,omitempty"`
	Source                         *string           `json:"source,omitempty"`
	Version                        *string           `json:"version,omitempty"`
	VulnerabilitiesBySeverityLevel *map[string]int32 `json:"vulnerabilitiesBySeverityLevel,omitempty"`
}

// InsightsV1ContainerImageVulnerability defines model for insights.v1.ContainerImageVulnerability.
type InsightsV1ContainerImageVulnerability struct {
	CreatedAt    *time.Time         `json:"createdAt,omitempty"`
	ExternalLink *string            `json:"externalLink,omitempty"`
	FixedVersion *string            `json:"fixedVersion,omitempty"`
	LayerDigest  *string            `json:"layerDigest,omitempty"`
	Package      *InsightsV1Package `json:"package,omitempty"`
	PkgVulnId    *string            `json:"pkgVulnId,omitempty"`

	// SeverityLevel Each invariant is defined in camel case in order to avoid breaking changes
	// when replacing string fields in existing responses with this enum.
	// Camel case was chosen because message field names in generated code are always in
	// camel case and there is no way to change that. On the other hand, enum field names
	// are carried over to the generated code without any modifications.
	SeverityLevel *InsightsV1VulnerabilitySeverity `json:"severityLevel,omitempty"`
	SeverityScore *float32                         `json:"severityScore,omitempty"`
	Title         *string                          `json:"title,omitempty"`
	VulnId        *string                          `json:"vulnId,omitempty"`
}

// InsightsV1CreateIntegrationRequestJira defines model for insights.v1.CreateIntegrationRequest.Jira.
type InsightsV1CreateIntegrationRequestJira struct {
	Name       *string `json:"name,omitempty"`
	ProjectKey *string `json:"projectKey,omitempty"`
	Token      *string `json:"token,omitempty"`
	Url        *string `json:"url,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// InsightsV1CreateIntegrationRequestPayload defines model for insights.v1.CreateIntegrationRequest.Payload.
type InsightsV1CreateIntegrationRequestPayload struct {
	Jira *InsightsV1CreateIntegrationRequestJira `json:"jira,omitempty"`
}

// InsightsV1CreateIntegrationResponse defines model for insights.v1.CreateIntegrationResponse.
type InsightsV1CreateIntegrationResponse struct {
	Integration *InsightsV1Integration `json:"integration,omitempty"`
}

// InsightsV1CreateTicketRequestType Type of the item in the Cast console.
type InsightsV1CreateTicketRequestType string

// InsightsV1CreateTicketResponse defines model for insights.v1.CreateTicketResponse.
type InsightsV1CreateTicketResponse struct {
	Name *string `json:"name,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// InsightsV1DeleteImagesRequest defines model for insights.v1.DeleteImagesRequest.
type InsightsV1DeleteImagesRequest struct {
	TagNames *[]string `json:"tagNames,omitempty"`
}

// InsightsV1DeleteImagesResponse defines model for insights.v1.DeleteImagesResponse.
type InsightsV1DeleteImagesResponse = map[string]interface{}

// InsightsV1DeleteIntegrationResponse defines model for insights.v1.DeleteIntegrationResponse.
type InsightsV1DeleteIntegrationResponse = map[string]interface{}

// InsightsV1DeletePolicyEnforcementResponse defines model for insights.v1.DeletePolicyEnforcementResponse.
type InsightsV1DeletePolicyEnforcementResponse = map[string]interface{}

// InsightsV1EnforceCheckPolicyResponse defines model for insights.v1.EnforceCheckPolicyResponse.
type InsightsV1EnforceCheckPolicyResponse struct {
	EnforcementByCluster *map[string]string `json:"enforcementByCluster,omitempty"`
}

// InsightsV1ExceptedImage defines model for insights.v1.ExceptedImage.
type InsightsV1ExceptedImage struct {
	Package *InsightsV1ExceptedPackage `json:"package,omitempty"`
	TagName string                     `json:"tagName"`
}

// InsightsV1ExceptedPackage defines model for insights.v1.ExceptedPackage.
type InsightsV1ExceptedPackage struct {
	Name          string                           `json:"name"`
	Version       *string                          `json:"version,omitempty"`
	Vulnerability *InsightsV1ExceptedVulnerability `json:"vulnerability,omitempty"`
}

// InsightsV1ExceptedVulnerability defines model for insights.v1.ExceptedVulnerability.
type InsightsV1ExceptedVulnerability struct {
	Id string `json:"id"`
}

// InsightsV1GetAgentStatusResponse defines model for insights.v1.GetAgentStatusResponse.
type InsightsV1GetAgentStatusResponse struct {
	Installed         *bool `json:"installed,omitempty"`
	PolicyEnforcement *bool `json:"policyEnforcement,omitempty"`
}

// InsightsV1GetAgentSyncStateResponse defines model for insights.v1.GetAgentSyncStateResponse.
type InsightsV1GetAgentSyncStateResponse struct {
	Images *InsightsV1AgentSyncStateImages `json:"images,omitempty"`
}

// InsightsV1GetAgentsStatusRequest defines model for insights.v1.GetAgentsStatusRequest.
type InsightsV1GetAgentsStatusRequest struct {
	ClusterIds *[]string `json:"clusterIds,omitempty"`
}

// InsightsV1GetAgentsStatusResponse defines model for insights.v1.GetAgentsStatusResponse.
type InsightsV1GetAgentsStatusResponse struct {
	AgentStatuses *map[string]bool                                         `json:"agentStatuses,omitempty"`
	Statuses      *map[string]InsightsV1GetAgentsStatusResponseAgentStatus `json:"statuses,omitempty"`
}

// InsightsV1GetAgentsStatusResponseAgentStatus defines model for insights.v1.GetAgentsStatusResponse.AgentStatus.
type InsightsV1GetAgentsStatusResponseAgentStatus struct {
	Installed         *bool `json:"installed,omitempty"`
	PolicyEnforcement *bool `json:"policyEnforcement,omitempty"`
}

// InsightsV1GetAttackPathDetailsResponse defines model for insights.v1.GetAttackPathDetailsResponse.
type InsightsV1GetAttackPathDetailsResponse struct {
	Details *InsightsV1AttackPath      `json:"details,omitempty"`
	Graph   *InsightsV1AttackPathGraph `json:"graph,omitempty"`
}

// InsightsV1GetAttackPathsOverviewResponse defines model for insights.v1.GetAttackPathsOverviewResponse.
type InsightsV1GetAttackPathsOverviewResponse struct {
	AttackPaths         *int32 `json:"attackPaths,omitempty"`
	CriticalAttackPaths *int32 `json:"criticalAttackPaths,omitempty"`
	HighAttackPaths     *int32 `json:"highAttackPaths,omitempty"`
	LowAttackPaths      *int32 `json:"lowAttackPaths,omitempty"`
	MediumAttackPaths   *int32 `json:"mediumAttackPaths,omitempty"`
}

// InsightsV1GetAttackPathsResponse defines model for insights.v1.GetAttackPathsResponse.
type InsightsV1GetAttackPathsResponse struct {
	Items *[]InsightsV1AttackPath `json:"items,omitempty"`
}

// InsightsV1GetBestPracticesCheckDetailsResponse defines model for insights.v1.GetBestPracticesCheckDetailsResponse.
type InsightsV1GetBestPracticesCheckDetailsResponse struct {
	// Category Category of insight.
	Category *string `json:"category,omitempty"`

	// Cvss3vector CVSSV3 vulnerability vector.
	Cvss3vector *string `json:"cvss3vector,omitempty"`

	// Description Check detailed description.
	Description *string                       `json:"description,omitempty"`
	Enforceable *bool                         `json:"enforceable,omitempty"`
	EnforcedOn  *[]InsightsV1CheckEnforcement `json:"enforcedOn,omitempty"`

	// Labels Check labels.
	Labels         *[]string `json:"labels,omitempty"`
	Manual         *bool     `json:"manual,omitempty"`
	MdCheckDetails *string   `json:"mdCheckDetails,omitempty"`

	// Name Human readable rule name.
	Name *string `json:"name,omitempty"`

	// RuleId Machine readable rule name.
	RuleId *string `json:"ruleId,omitempty"`

	// SeverityLevel Each invariant is defined in camel case in order to avoid breaking changes
	// when replacing string fields in existing responses with this enum.
	// Camel case was chosen because message field names in generated code are always in
	// camel case and there is no way to change that. On the other hand, enum field names
	// are carried over to the generated code without any modifications.
	SeverityLevel *InsightsV1VulnerabilitySeverity `json:"severityLevel,omitempty"`

	// SeverityScore Rule's severity rating [0.0,10.0].
	SeverityScore *float32          `json:"severityScore,omitempty"`
	Ticket        *InsightsV1Ticket `json:"ticket,omitempty"`
}

// InsightsV1GetBestPracticesOverviewResponse defines model for insights.v1.GetBestPracticesOverviewResponse.
type InsightsV1GetBestPracticesOverviewResponse struct {
	FailedChecks *int32                       `json:"failedChecks,omitempty"`
	Nodes        *InsightsV1ComplianceDetails `json:"nodes,omitempty"`
	Other        *InsightsV1ComplianceDetails `json:"other,omitempty"`
	PassedChecks *int32                       `json:"passedChecks,omitempty"`
	Workloads    *InsightsV1ComplianceDetails `json:"workloads,omitempty"`
}

// InsightsV1GetBestPracticesReportFiltersResponse defines model for insights.v1.GetBestPracticesReportFiltersResponse.
type InsightsV1GetBestPracticesReportFiltersResponse struct {
	Filters *map[string]InsightsV1GetBestPracticesReportFiltersResponseClusterFilters `json:"filters,omitempty"`
}

// InsightsV1GetBestPracticesReportFiltersResponseClusterFilters defines model for insights.v1.GetBestPracticesReportFiltersResponse.ClusterFilters.
type InsightsV1GetBestPracticesReportFiltersResponseClusterFilters struct {
	Categories     *[]string                          `json:"categories,omitempty"`
	Labels         *[]string                          `json:"labels,omitempty"`
	Namespaces     *[]string                          `json:"namespaces,omitempty"`
	SeverityLevels *[]InsightsV1VulnerabilitySeverity `json:"severityLevels,omitempty"`
}

// InsightsV1GetBestPracticesReportResponse defines model for insights.v1.GetBestPracticesReportResponse.
type InsightsV1GetBestPracticesReportResponse struct {
	// Checks Filtered checks.
	Checks *[]InsightsV1GetBestPracticesReportResponseCheckItem `json:"checks,omitempty"`
}

// InsightsV1GetBestPracticesReportResponseCheckItem defines model for insights.v1.GetBestPracticesReportResponse.CheckItem.
type InsightsV1GetBestPracticesReportResponseCheckItem struct {
	Clusters *map[string]InsightsV1GetBestPracticesReportResponseCheckItemCluster `json:"clusters,omitempty"`

	// ClustersCount Count of clusters having this check.
	ClustersCount *int32 `json:"clustersCount,omitempty"`

	// Cvss3vector CVSSV3 vulnerability vector.
	Cvss3vector *string `json:"cvss3vector,omitempty"`
	Excepted    *int32  `json:"excepted,omitempty"`

	// Failed Number of objects that did not pass the check.
	Failed *int32 `json:"failed,omitempty"`

	// Labels Check labels.
	Labels *[]string `json:"labels,omitempty"`
	Manual *bool     `json:"manual,omitempty"`

	// Name Human readable rule name.
	Name *string `json:"name,omitempty"`

	// Provider Check provider.
	Provider *string `json:"provider,omitempty"`

	// RuleId Machine readable rule name.
	RuleId *string `json:"ruleId,omitempty"`

	// SeverityLevel Each invariant is defined in camel case in order to avoid breaking changes
	// when replacing string fields in existing responses with this enum.
	// Camel case was chosen because message field names in generated code are always in
	// camel case and there is no way to change that. On the other hand, enum field names
	// are carried over to the generated code without any modifications.
	SeverityLevel *InsightsV1VulnerabilitySeverity `json:"severityLevel,omitempty"`
	SeverityScore *float32                         `json:"severityScore,omitempty"`

	// Total Total number of objects that were checked.
	Total *int32 `json:"total,omitempty"`

	// Type Category of insight.
	Type *string `json:"type,omitempty"`
}

// InsightsV1GetBestPracticesReportResponseCheckItemCluster defines model for insights.v1.GetBestPracticesReportResponse.CheckItem.Cluster.
type InsightsV1GetBestPracticesReportResponseCheckItemCluster struct {
	Namespaces *[]string `json:"namespaces,omitempty"`
}

// InsightsV1GetBestPracticesReportSummaryResponse defines model for insights.v1.GetBestPracticesReportSummaryResponse.
type InsightsV1GetBestPracticesReportSummaryResponse struct {
	// ChecksFailed Number of checks that failed.
	ChecksFailed *int32 `json:"checksFailed,omitempty"`
	ChecksManual *int32 `json:"checksManual,omitempty"`

	// ChecksPassed Number of checks that passed.
	ChecksPassed *int32 `json:"checksPassed,omitempty"`

	// ChecksTotal Total checks performed.
	ChecksTotal *int32 `json:"checksTotal,omitempty"`

	// FailedChecksBySeverityLevel Checks count by severity level.
	FailedChecksBySeverityLevel *map[string]int32 `json:"failedChecksBySeverityLevel,omitempty"`

	// LastScannedAt Timestamp of last scan.
	LastScannedAt       *time.Time `json:"lastScannedAt,omitempty"`
	ResourcesAffected   *int32     `json:"resourcesAffected,omitempty"`
	ResourcesManual     *int32     `json:"resourcesManual,omitempty"`
	ResourcesTotal      *int32     `json:"resourcesTotal,omitempty"`
	ResourcesUnaffected *int32     `json:"resourcesUnaffected,omitempty"`
}

// InsightsV1GetCheckExceptionsResponse defines model for insights.v1.GetCheckExceptionsResponse.
type InsightsV1GetCheckExceptionsResponse struct {
	Groups  *[]InsightsV1CheckExceptionsGroup `json:"groups,omitempty"`
	Version *time.Time                        `json:"version,omitempty"`
}

// InsightsV1GetCheckResourcesResponse defines model for insights.v1.GetCheckResourcesResponse.
type InsightsV1GetCheckResourcesResponse struct {
	Count          *int32                            `json:"count,omitempty"`
	NextCursor     *string                           `json:"nextCursor,omitempty"`
	PreviousCursor *string                           `json:"previousCursor,omitempty"`
	Resources      *[]InsightsV1CheckClusterResource `json:"resources,omitempty"`
}

// InsightsV1GetChecksResourcesRequest defines model for insights.v1.GetChecksResourcesRequest.
type InsightsV1GetChecksResourcesRequest struct {
	ClusterIds *[]string `json:"clusterIds,omitempty"`
	Excepted   *bool     `json:"excepted,omitempty"`
	Namespaces *[]string `json:"namespaces,omitempty"`
	RuleIds    *[]string `json:"ruleIds,omitempty"`
}

// InsightsV1GetChecksResourcesResponse defines model for insights.v1.GetChecksResourcesResponse.
type InsightsV1GetChecksResourcesResponse struct {
	Resources *[]InsightsV1ClusterResource `json:"resources,omitempty"`
}

// InsightsV1GetContainerImageDetailsResponse defines model for insights.v1.GetContainerImageDetailsResponse.
type InsightsV1GetContainerImageDetailsResponse struct {
	Architecture     *string                    `json:"architecture,omitempty"`
	Bases            *[]InsightsV1BaseImage     `json:"bases,omitempty"`
	Clusters         *int32                     `json:"clusters,omitempty"`
	Digest           *string                    `json:"digest,omitempty"`
	ExceptedAt       *time.Time                 `json:"exceptedAt,omitempty"`
	ExceptedReason   *string                    `json:"exceptedReason,omitempty"`
	InferredLanguage *string                    `json:"inferredLanguage,omitempty"`
	LastSeen         *time.Time                 `json:"lastSeen,omitempty"`
	Layers           *[]InsightsV1Layer         `json:"layers,omitempty"`
	ScanStatus       *InsightsV1ImageScanStatus `json:"scanStatus,omitempty"`
	Size             *string                    `json:"size,omitempty"`
	Status           *InsightsV1ImageStatus     `json:"status,omitempty"`
	Tags             *[]InsightsV1Tag           `json:"tags,omitempty"`
	Ticket           *InsightsV1Ticket          `json:"ticket,omitempty"`
	Vulnerabilities  *map[string]int32          `json:"vulnerabilities,omitempty"`
}

// InsightsV1GetContainerImageDigestsResponse defines model for insights.v1.GetContainerImageDigestsResponse.
type InsightsV1GetContainerImageDigestsResponse struct {
	Items *[]InsightsV1GetContainerImageDigestsResponseImage `json:"items,omitempty"`
}

// InsightsV1GetContainerImageDigestsResponseImage defines model for insights.v1.GetContainerImageDigestsResponse.Image.
type InsightsV1GetContainerImageDigestsResponseImage struct {
	Architecture    *string                    `json:"architecture,omitempty"`
	CreatedAt       *time.Time                 `json:"createdAt,omitempty"`
	Digest          *string                    `json:"digest,omitempty"`
	ScanStatus      *InsightsV1ImageScanStatus `json:"scanStatus,omitempty"`
	Status          *InsightsV1ImageStatus     `json:"status,omitempty"`
	Tags            *[]InsightsV1Tag           `json:"tags,omitempty"`
	Vulnerabilities *int32                     `json:"vulnerabilities,omitempty"`
}

// InsightsV1GetContainerImagePackageVulnerabilityDetailsResponse defines model for insights.v1.GetContainerImagePackageVulnerabilityDetailsResponse.
type InsightsV1GetContainerImagePackageVulnerabilityDetailsResponse struct {
	AffectedVersion  *string                                                                        `json:"affectedVersion,omitempty"`
	AffectedVersions *[]string                                                                      `json:"affectedVersions,omitempty"`
	Cvss             *map[string]InsightsV1GetContainerImagePackageVulnerabilityDetailsResponseCVSS `json:"cvss,omitempty"`
	Cwes             *[]string                                                                      `json:"cwes,omitempty"`
	DefaultSource    *string                                                                        `json:"defaultSource,omitempty"`
	Description      *string                                                                        `json:"description,omitempty"`
	Id               *string                                                                        `json:"id,omitempty"`
	Package          *InsightsV1PackageDetails                                                      `json:"package,omitempty"`
	PatchedVersion   *string                                                                        `json:"patchedVersion,omitempty"`

	// SeverityLevel Each invariant is defined in camel case in order to avoid breaking changes
	// when replacing string fields in existing responses with this enum.
	// Camel case was chosen because message field names in generated code are always in
	// camel case and there is no way to change that. On the other hand, enum field names
	// are carried over to the generated code without any modifications.
	SeverityLevel *InsightsV1VulnerabilitySeverity `json:"severityLevel,omitempty"`
	Sources       *[]string                        `json:"sources,omitempty"`
	Ticket        *InsightsV1Ticket                `json:"ticket,omitempty"`
	Title         *string                          `json:"title,omitempty"`
}

// InsightsV1GetContainerImagePackageVulnerabilityDetailsResponseCVSS defines model for insights.v1.GetContainerImagePackageVulnerabilityDetailsResponse.CVSS.
type InsightsV1GetContainerImagePackageVulnerabilityDetailsResponseCVSS struct {
	Scorev2 *float32 `json:"scorev2,omitempty"`
	Scorev3 *float32 `json:"scorev3,omitempty"`

	// SeverityLevel Each invariant is defined in camel case in order to avoid breaking changes
	// when replacing string fields in existing responses with this enum.
	// Camel case was chosen because message field names in generated code are always in
	// camel case and there is no way to change that. On the other hand, enum field names
	// are carried over to the generated code without any modifications.
	SeverityLevel *InsightsV1VulnerabilitySeverity `json:"severityLevel,omitempty"`
	Vectorv2      *string                          `json:"vectorv2,omitempty"`
	Vectorv3      *string                          `json:"vectorv3,omitempty"`
}

// InsightsV1GetContainerImagePackagesResponse defines model for insights.v1.GetContainerImagePackagesResponse.
type InsightsV1GetContainerImagePackagesResponse struct {
	Items *[]InsightsV1ContainerImagePackage `json:"items,omitempty"`
}

// InsightsV1GetContainerImageResourcesResponse defines model for insights.v1.GetContainerImageResourcesResponse.
type InsightsV1GetContainerImageResourcesResponse struct {
	Items *[]InsightsV1ImageResource `json:"items,omitempty"`
}

// InsightsV1GetContainerImageVulnerabilitiesResponse defines model for insights.v1.GetContainerImageVulnerabilitiesResponse.
type InsightsV1GetContainerImageVulnerabilitiesResponse struct {
	Items *[]InsightsV1ContainerImageVulnerability `json:"items,omitempty"`
}

// InsightsV1GetContainerImagesFiltersResponse defines model for insights.v1.GetContainerImagesFiltersResponse.
type InsightsV1GetContainerImagesFiltersResponse struct {
	Labels *[]InsightsV1GetContainerImagesFiltersResponseLabels `json:"labels,omitempty"`
}

// InsightsV1GetContainerImagesFiltersResponseLabels defines model for insights.v1.GetContainerImagesFiltersResponse.Labels.
type InsightsV1GetContainerImagesFiltersResponseLabels struct {
	Label  *string   `json:"label,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// InsightsV1GetContainerImagesResponse defines model for insights.v1.GetContainerImagesResponse.
type InsightsV1GetContainerImagesResponse struct {
	Items *[]InsightsV1ContainerImage `json:"items,omitempty"`
}

// InsightsV1GetContainerImagesSummaryResponse defines model for insights.v1.GetContainerImagesSummaryResponse.
type InsightsV1GetContainerImagesSummaryResponse struct {
	VulnerabilitiesBySeverity *map[string]int32 `json:"vulnerabilitiesBySeverity,omitempty"`
}

// InsightsV1GetDailySummaryResponse defines model for insights.v1.GetDailySummaryResponse.
type InsightsV1GetDailySummaryResponse struct {
	Vulnerabilities *[]InsightsV1VulnerabilitiesSummary `json:"vulnerabilities,omitempty"`
}

// InsightsV1GetExceptedChecksResponse defines model for insights.v1.GetExceptedChecksResponse.
type InsightsV1GetExceptedChecksResponse struct {
	// Checks Excepted checks.
	Checks *[]InsightsV1GetExceptedChecksResponseItem `json:"checks,omitempty"`
}

// InsightsV1GetExceptedChecksResponseItem defines model for insights.v1.GetExceptedChecksResponse.Item.
type InsightsV1GetExceptedChecksResponseItem struct {
	Clusters *map[string]InsightsV1GetExceptedChecksResponseItemCluster `json:"clusters,omitempty"`

	// Cvss3vector CVSSV3 vulnerability vector.
	Cvss3vector       *string `json:"cvss3vector,omitempty"`
	ExceptedResources *int32  `json:"exceptedResources,omitempty"`

	// Labels Check labels.
	Labels *[]string `json:"labels,omitempty"`
	Manual *bool     `json:"manual,omitempty"`

	// Name Human readable rule name.
	Name *string `json:"name,omitempty"`

	// RuleId Machine readable rule name.
	RuleId *string `json:"ruleId,omitempty"`

	// SeverityLevel Each invariant is defined in camel case in order to avoid breaking changes
	// when replacing string fields in existing responses with this enum.
	// Camel case was chosen because message field names in generated code are always in
	// camel case and there is no way to change that. On the other hand, enum field names
	// are carried over to the generated code without any modifications.
	SeverityLevel *InsightsV1VulnerabilitySeverity `json:"severityLevel,omitempty"`
	SeverityScore *float32                         `json:"severityScore,omitempty"`

	// Type Category of insight.
	Type *string `json:"type,omitempty"`
}

// InsightsV1GetExceptedChecksResponseItemCluster defines model for insights.v1.GetExceptedChecksResponse.Item.Cluster.
type InsightsV1GetExceptedChecksResponseItemCluster struct {
	Namespaces *[]string `json:"namespaces,omitempty"`
}

// InsightsV1GetImageSecurityOverviewResponse defines model for insights.v1.GetImageSecurityOverviewResponse.
type InsightsV1GetImageSecurityOverviewResponse struct {
	CriticalFixes           *int32 `json:"criticalFixes,omitempty"`
	CriticalVulnerabilities *int32 `json:"criticalVulnerabilities,omitempty"`
	HighFixes               *int32 `json:"highFixes,omitempty"`
	HighVulnerabilities     *int32 `json:"highVulnerabilities,omitempty"`
	LowFixes                *int32 `json:"lowFixes,omitempty"`
	LowVulnerabilities      *int32 `json:"lowVulnerabilities,omitempty"`
	MediumFixes             *int32 `json:"mediumFixes,omitempty"`
	MediumVulnerabilities   *int32 `json:"mediumVulnerabilities,omitempty"`
	TotalImageRepositories  *int32 `json:"totalImageRepositories,omitempty"`
}

// InsightsV1GetIntegrationResponse defines model for insights.v1.GetIntegrationResponse.
type InsightsV1GetIntegrationResponse struct {
	Integration *InsightsV1Integration `json:"integration,omitempty"`
}

// InsightsV1GetNodesOverviewResponse defines model for insights.v1.GetNodesOverviewResponse.
type InsightsV1GetNodesOverviewResponse struct {
	ManagedNodes     *int32    `json:"managedNodes,omitempty"`
	NodeAges         *[]string `json:"nodeAges,omitempty"`
	ScheduledUpdates *int32    `json:"scheduledUpdates,omitempty"`
	UnmanagedNodes   *int32    `json:"unmanagedNodes,omitempty"`
}

// InsightsV1GetPublicImageAlternativesResponse defines model for insights.v1.GetPublicImageAlternativesResponse.
type InsightsV1GetPublicImageAlternativesResponse struct {
	Items *[]InsightsV1GetPublicImageAlternativesResponseItem `json:"items,omitempty"`
}

// InsightsV1GetPublicImageAlternativesResponseItem defines model for insights.v1.GetPublicImageAlternativesResponse.Item.
type InsightsV1GetPublicImageAlternativesResponseItem struct {
	Name                      *string           `json:"name,omitempty"`
	TagId                     *string           `json:"tagId,omitempty"`
	VulnerabilitiesBySeverity *map[string]int32 `json:"vulnerabilitiesBySeverity,omitempty"`
}

// InsightsV1GetResourceDetailsResponse defines model for insights.v1.GetResourceDetailsResponse.
type InsightsV1GetResourceDetailsResponse struct {
	Checks  *[]InsightsV1GetResourceDetailsResponseCheck `json:"checks,omitempty"`
	Details *InsightsV1ClusterResource                   `json:"details,omitempty"`
}

// InsightsV1GetResourceDetailsResponseCheck defines model for insights.v1.GetResourceDetailsResponse.Check.
type InsightsV1GetResourceDetailsResponseCheck struct {
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Standard *string `json:"standard,omitempty"`
}

// InsightsV1ImageExceptionChangesRequest defines model for insights.v1.ImageExceptionChangesRequest.
type InsightsV1ImageExceptionChangesRequest struct {
	Added   []InsightsV1ExceptedImage `json:"added"`
	Deleted []InsightsV1ExceptedImage `json:"deleted"`
	Reason  *string                   `json:"reason,omitempty"`
}

// InsightsV1ImageExceptionChangesResponse defines model for insights.v1.ImageExceptionChangesResponse.
type InsightsV1ImageExceptionChangesResponse struct {
	Created *int64 `json:"created,omitempty"`
	Deleted *int64 `json:"deleted,omitempty"`
}

// InsightsV1ImageResource defines model for insights.v1.ImageResource.
type InsightsV1ImageResource struct {
	Cluster   *string    `json:"cluster,omitempty"`
	ClusterId *string    `json:"clusterId,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	Kind      *string    `json:"kind,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Namespace *string    `json:"namespace,omitempty"`
}

// InsightsV1ImageScanStatus defines model for insights.v1.ImageScanStatus.
type InsightsV1ImageScanStatus string

// InsightsV1ImageStatus defines model for insights.v1.ImageStatus.
type InsightsV1ImageStatus string

// InsightsV1IngestAgentLogResponse defines model for insights.v1.IngestAgentLogResponse.
type InsightsV1IngestAgentLogResponse = map[string]interface{}

// InsightsV1Integration defines model for insights.v1.Integration.
type InsightsV1Integration struct {
	// CreatedAt Creation timestamp.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`

	// Metadata JSON encoded integration metadata.
	Metadata *[]byte                    `json:"metadata,omitempty"`
	Name     *string                    `json:"name,omitempty"`
	Type     *InsightsV1IntegrationType `json:"type,omitempty"`

	// UpdatedAt Update timestamp.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// InsightsV1IntegrationType defines model for insights.v1.Integration.Type.
type InsightsV1IntegrationType string

// InsightsV1Layer defines model for insights.v1.Layer.
type InsightsV1Layer struct {
	Command *string `json:"command,omitempty"`
	Digest  *string `json:"digest,omitempty"`
	Size    *string `json:"size,omitempty"`
}

// InsightsV1ListIntegrationsResponse defines model for insights.v1.ListIntegrationsResponse.
type InsightsV1ListIntegrationsResponse struct {
	Integrations *[]InsightsV1Integration `json:"integrations,omitempty"`
}

// InsightsV1LogEvent defines model for insights.v1.LogEvent.
type InsightsV1LogEvent struct {
	Fields  *map[string]string `json:"fields,omitempty"`
	Level   *string            `json:"level,omitempty"`
	Message *string            `json:"message,omitempty"`
	Time    *time.Time         `json:"time,omitempty"`
}

// InsightsV1Package defines model for insights.v1.Package.
type InsightsV1Package struct {
	Name    *string `json:"name,omitempty"`
	Source  *string `json:"source,omitempty"`
	Version *string `json:"version,omitempty"`
}

// InsightsV1PackageDetails defines model for insights.v1.PackageDetails.
type InsightsV1PackageDetails struct {
	Name    *string           `json:"name,omitempty"`
	Paths   *[]string         `json:"paths,omitempty"`
	Source  *string           `json:"source,omitempty"`
	Ticket  *InsightsV1Ticket `json:"ticket,omitempty"`
	Version *string           `json:"version,omitempty"`
}

// InsightsV1PostAgentTelemetryResponse defines model for insights.v1.PostAgentTelemetryResponse.
type InsightsV1PostAgentTelemetryResponse struct {
	DisabledFeatures *[]string `json:"disabledFeatures,omitempty"`
	EnforcedRules    *[]string `json:"enforcedRules,omitempty"`
	FullResync       *bool     `json:"fullResync,omitempty"`
	NodeIds          *[]string `json:"nodeIds,omitempty"`
}

// InsightsV1PreviewExceptionGroupsResourcesResponse defines model for insights.v1.PreviewExceptionGroupsResourcesResponse.
type InsightsV1PreviewExceptionGroupsResourcesResponse struct {
	Resources *[]InsightsV1ClusterResource `json:"resources,omitempty"`
}

// InsightsV1SaveCheckExceptionsResponse defines model for insights.v1.SaveCheckExceptionsResponse.
type InsightsV1SaveCheckExceptionsResponse = map[string]interface{}

// InsightsV1ScannedImage defines model for insights.v1.ScannedImage.
type InsightsV1ScannedImage struct {
	Architecture *string   `json:"architecture,omitempty"`
	Id           *string   `json:"id,omitempty"`
	ResourceIds  *[]string `json:"resourceIds,omitempty"`
}

// InsightsV1ScheduleBestPracticesScanRequest defines model for insights.v1.ScheduleBestPracticesScanRequest.
type InsightsV1ScheduleBestPracticesScanRequest struct {
	ClusterId *string `json:"clusterId,omitempty"`
}

// InsightsV1ScheduleBestPracticesScanResponse defines model for insights.v1.ScheduleBestPracticesScanResponse.
type InsightsV1ScheduleBestPracticesScanResponse = map[string]interface{}

// InsightsV1SecurityFeature - SECURITY_FEATURE_UNKNOWN: Unknown security feature
//   - IMAGE_SCANNING: Image scanning is enabled on the cluster
//   - KUBE_BENCH: Kubebench is enabled on the cluster
//   - RUNTIME_SECURITY: Runtime security is enabled on the cluster
type InsightsV1SecurityFeature string

// InsightsV1Tag defines model for insights.v1.Tag.
type InsightsV1Tag struct {
	Id      *string `json:"id,omitempty"`
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// InsightsV1Ticket defines model for insights.v1.Ticket.
type InsightsV1Ticket struct {
	Name *string `json:"name,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// InsightsV1UpdateIntegrationRequestJira defines model for insights.v1.UpdateIntegrationRequest.Jira.
type InsightsV1UpdateIntegrationRequestJira struct {
	Name       *string `json:"name,omitempty"`
	ProjectKey *string `json:"projectKey,omitempty"`
	Token      *string `json:"token,omitempty"`
	Url        *string `json:"url,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// InsightsV1UpdateIntegrationRequestPayload defines model for insights.v1.UpdateIntegrationRequest.Payload.
type InsightsV1UpdateIntegrationRequestPayload struct {
	Jira *InsightsV1UpdateIntegrationRequestJira `json:"jira,omitempty"`
}

// InsightsV1UpdateIntegrationResponse defines model for insights.v1.UpdateIntegrationResponse.
type InsightsV1UpdateIntegrationResponse struct {
	Integration *InsightsV1Integration `json:"integration,omitempty"`
}

// InsightsV1VulnerabilitiesSummary defines model for insights.v1.VulnerabilitiesSummary.
type InsightsV1VulnerabilitiesSummary struct {
	Clusters *[]InsightsV1Cluster `json:"clusters,omitempty"`
	Cves     *[]InsightsV1CVE     `json:"cves,omitempty"`
	Name     *string              `json:"name,omitempty"`
	Path     *string              `json:"path,omitempty"`
}

// InsightsV1VulnerabilitySeverity Each invariant is defined in camel case in order to avoid breaking changes
// when replacing string fields in existing responses with this enum.
// Camel case was chosen because message field names in generated code are always in
// camel case and there is no way to change that. On the other hand, enum field names
// are carried over to the generated code without any modifications.
type InsightsV1VulnerabilitySeverity string

// InventoryblacklistV1AddBlacklistRequest Defines request object to add autoscaler inventory's blacklist item.
type InventoryblacklistV1AddBlacklistRequest struct {
	// ClusterId Cluster id, that will only be set if instance type or family is blacklisted for specific cluster.
	ClusterId *string `json:"clusterId"`

	// ExpiresAt The date time when the disabling is due to be expired.
	// This is for the situations when disabling is done by the platform due to
	// cloud availability.
	ExpiresAt *time.Time `json:"expiresAt"`

	// InstanceFamily Instance type family name, such as: 'c2d'.
	// Either this or instance type must be set.
	InstanceFamily *string `json:"instanceFamily"`

	// InstanceType Instance type name, such as: 'c2d-highmem-32'.
	// Either this or instance family must be set.
	InstanceType *string `json:"instanceType"`

	// Lifecycle Defines inventory blacklist instance type lifecycles.
	//
	//  - all: All instance type lifecycles.
	//  - spot: Spot instance type lifecycle.
	//  - on_demand: On-demand instance type lifecycle.
	Lifecycle *InventoryblacklistV1InventoryBlacklistLifecycle `json:"lifecycle,omitempty"`

	// OrganizationId Organization id for which the instance type or family is blacklisted.
	OrganizationId *string `json:"organizationId"`

	// Reason Reason for disabling instance type or family.
	Reason *string `json:"reason,omitempty"`
}

// InventoryblacklistV1AddBlacklistResponse Defines response object of added autoscaler inventory's blacklist item.
type InventoryblacklistV1AddBlacklistResponse struct {
	// ClusterId Cluster id, that will only be set if instance type or family is blacklisted for specific cluster.
	// Either this or organization id must be set.
	ClusterId *string `json:"clusterId"`

	// DisabledAt Organization id for which the instance type or family is blacklisted.
	DisabledAt *time.Time `json:"disabledAt,omitempty"`

	// ExpiresAt The date time when the disabling is due to be expired.
	// This is for the situations when disabling is done by the platform due to cloud availability.
	ExpiresAt *time.Time `json:"expiresAt"`

	// Id The ID of the blacklisted item.
	Id *string `json:"id,omitempty"`

	// InstanceFamily Instance type family name, such as: 'c2d'.
	// Either this or instance type must be set.
	InstanceFamily *string `json:"instanceFamily"`

	// InstanceType Instance type name, such as: 'c2d-highmem-32'.
	// Either this or instance family must be set.
	InstanceType *string `json:"instanceType"`

	// Lifecycle Defines inventory blacklist instance type lifecycles.
	//
	//  - all: All instance type lifecycles.
	//  - spot: Spot instance type lifecycle.
	//  - on_demand: On-demand instance type lifecycle.
	Lifecycle *InventoryblacklistV1InventoryBlacklistLifecycle `json:"lifecycle,omitempty"`

	// OrganizationId Organization id for which the instance type or family is blacklisted.
	// Either this or cluster id must be set.
	OrganizationId *string `json:"organizationId,omitempty"`

	// Reason Reason for disabling instance type or family.
	Reason *string `json:"reason,omitempty"`
}

// InventoryblacklistV1InventoryBlacklistItem Defines BlacklistItem, which describes the properties for blacklisted instance type or family.
type InventoryblacklistV1InventoryBlacklistItem struct {
	// ClusterId Cluster id, that will only be set if instance type or family is blacklisted for specific cluster.
	ClusterId *string `json:"clusterId"`

	// DisabledAt The date time when the instance type or family was disabled.
	DisabledAt *time.Time `json:"disabledAt,omitempty"`

	// ExpiresAt The date time when the disabling is due to be expired.
	// This is for the situations when disabling is done by the platform due to cloud availability.
	ExpiresAt *time.Time `json:"expiresAt"`

	// InstanceFamily Instance type family name, such as: 'c2d'.
	// Either this or instance type must be set.
	InstanceFamily *string `json:"instanceFamily"`

	// InstanceType Instance type name, such as: 'c2d-highmem-32'.
	// Either this or instance family must be set.
	InstanceType *string `json:"instanceType"`

	// Lifecycle Defines inventory blacklist instance type lifecycles.
	//
	//  - all: All instance type lifecycles.
	//  - spot: Spot instance type lifecycle.
	//  - on_demand: On-demand instance type lifecycle.
	Lifecycle *InventoryblacklistV1InventoryBlacklistLifecycle `json:"lifecycle,omitempty"`

	// OrganizationId Organization id for which the instance type or family is blacklisted.
	OrganizationId *string `json:"organizationId,omitempty"`

	// Reason Reason for disabling instance type or family.
	Reason *string `json:"reason,omitempty"`
}

// InventoryblacklistV1InventoryBlacklistLifecycle Defines inventory blacklist instance type lifecycles.
//
//   - all: All instance type lifecycles.
//   - spot: Spot instance type lifecycle.
//   - on_demand: On-demand instance type lifecycle.
type InventoryblacklistV1InventoryBlacklistLifecycle string

// InventoryblacklistV1ListBlacklistsResponse Defines response object of fetched cluster autoscaler blacklist.
type InventoryblacklistV1ListBlacklistsResponse struct {
	// Items Blacklisted instances of inventory items for that cluster or organization.
	Items *[]InventoryblacklistV1InventoryBlacklistItem `json:"items,omitempty"`
}

// InventoryblacklistV1RemoveBlacklistRequest Defines request object to remove autoscaler inventory's blacklisted items.
type InventoryblacklistV1RemoveBlacklistRequest struct {
	// ClusterId Cluster id, that will only be set if instance type or family is
	// blacklisted for specific cluster.
	ClusterId *string `json:"clusterId"`

	// InstanceFamily Organization id for which the instance type or family is blacklisted.
	// Instance type family name, such as: 'c2d'.
	// Either this or instance type must be set.
	InstanceFamily *string `json:"instanceFamily"`

	// InstanceType Instance type name, such as: 'c2d-highmem-32'.
	// Either this or instance family must be set.
	InstanceType *string `json:"instanceType"`

	// Lifecycle Defines inventory blacklist instance type lifecycles.
	//
	//  - all: All instance type lifecycles.
	//  - spot: Spot instance type lifecycle.
	//  - on_demand: On-demand instance type lifecycle.
	Lifecycle *InventoryblacklistV1InventoryBlacklistLifecycle `json:"lifecycle,omitempty"`

	// OrganizationId Organization id for which the instance type or family is blacklisted.
	OrganizationId *string `json:"organizationId"`
}

// InventoryblacklistV1RemoveBlacklistResponse Defines response object of removed autoscaler inventory's blacklist response.
type InventoryblacklistV1RemoveBlacklistResponse = map[string]interface{}

// K8sSelectorV1KubernetesNodeAffinity defines model for k8s_selector.v1.KubernetesNodeAffinity.
type K8sSelectorV1KubernetesNodeAffinity struct {
	Key string `json:"key"`

	// Operator - IN: In values
	//  - NotInt: Not int values
	//  - Exists: Just exist
	//  - DoesNotExist: Values does not exist
	//  - Gt: Greater then
	//  - Lt: Lower then
	Operator K8sSelectorV1Operator `json:"operator"`
	Values   []string              `json:"values"`
}

// K8sSelectorV1Operator - IN: In values
//   - NotInt: Not int values
//   - Exists: Just exist
//   - DoesNotExist: Values does not exist
//   - Gt: Greater then
//   - Lt: Lower then
type K8sSelectorV1Operator string

// LlmoptimizationV1APIKeyUsageItem defines model for llmoptimization.v1.APIKeyUsageItem.
type LlmoptimizationV1APIKeyUsageItem struct {
	DailyCost             string                      `json:"dailyCost"`
	DailyCostPerMilTokens string                      `json:"dailyCostPerMilTokens"`
	RequestCount          int32                       `json:"requestCount"`
	Timestamp             string                      `json:"timestamp"`
	TokenCount            LlmoptimizationV1TokenCount `json:"tokenCount"`
}

// LlmoptimizationV1APIKeysSavingsItem defines model for llmoptimization.v1.APIKeysSavingsItem.
type LlmoptimizationV1APIKeysSavingsItem struct {
	Alias                 string                      `json:"alias"`
	Costs                 LlmoptimizationV1Costs      `json:"costs"`
	Id                    string                      `json:"id"`
	RecommendedModelCosts LlmoptimizationV1Costs      `json:"recommendedModelCosts"`
	RequestCount          int32                       `json:"requestCount"`
	TokenCount            LlmoptimizationV1TokenCount `json:"tokenCount"`
}

// LlmoptimizationV1CategoryUsageItem defines model for llmoptimization.v1.CategoryUsageItem.
type LlmoptimizationV1CategoryUsageItem struct {
	CostPerApiKey         map[string]string           `json:"costPerApiKey"`
	DailyCost             string                      `json:"dailyCost"`
	DailyCostPerMilTokens string                      `json:"dailyCostPerMilTokens"`
	RequestCount          int32                       `json:"requestCount"`
	Timestamp             string                      `json:"timestamp"`
	TokenCount            LlmoptimizationV1TokenCount `json:"tokenCount"`
}

// LlmoptimizationV1Costs defines model for llmoptimization.v1.Costs.
type LlmoptimizationV1Costs struct {
	Daily             string `json:"daily"`
	PerMilTokens      string `json:"perMilTokens"`
	PerMilTokensIn    string `json:"perMilTokensIn"`
	PerMilTokensOut   string `json:"perMilTokensOut"`
	Total             string `json:"total"`
	TotalPerTokensIn  string `json:"totalPerTokensIn"`
	TotalPerTokensOut string `json:"totalPerTokensOut"`
}

// LlmoptimizationV1GetChatCompletionsAPIKeyUsageReportResponse defines model for llmoptimization.v1.GetChatCompletionsAPIKeyUsageReportResponse.
type LlmoptimizationV1GetChatCompletionsAPIKeyUsageReportResponse struct {
	Items       *[]LlmoptimizationV1APIKeyUsageItem `json:"items,omitempty"`
	StepSeconds *int32                              `json:"stepSeconds,omitempty"`
}

// LlmoptimizationV1GetChatCompletionsAPIKeysSavingsReportResponse defines model for llmoptimization.v1.GetChatCompletionsAPIKeysSavingsReportResponse.
type LlmoptimizationV1GetChatCompletionsAPIKeysSavingsReportResponse struct {
	Items *[]LlmoptimizationV1APIKeysSavingsItem `json:"items,omitempty"`
}

// LlmoptimizationV1GetChatCompletionsCategoryRecommendationsReportResponse defines model for llmoptimization.v1.GetChatCompletionsCategoryRecommendationsReportResponse.
type LlmoptimizationV1GetChatCompletionsCategoryRecommendationsReportResponse struct {
	Recommendation *LlmoptimizationV1RecommendationsItem    `json:"recommendation,omitempty"`
	Summary        *LlmoptimizationV1RecommendationsSummary `json:"summary,omitempty"`
}

// LlmoptimizationV1GetChatCompletionsCategoryUsageReportResponse defines model for llmoptimization.v1.GetChatCompletionsCategoryUsageReportResponse.
type LlmoptimizationV1GetChatCompletionsCategoryUsageReportResponse struct {
	Items       *[]LlmoptimizationV1CategoryUsageItem `json:"items,omitempty"`
	StepSeconds *int32                                `json:"stepSeconds,omitempty"`
}

// LlmoptimizationV1GetChatCompletionsRecommendationsReportResponse defines model for llmoptimization.v1.GetChatCompletionsRecommendationsReportResponse.
type LlmoptimizationV1GetChatCompletionsRecommendationsReportResponse struct {
	IsOnboarded *bool                                    `json:"isOnboarded,omitempty"`
	Items       *[]LlmoptimizationV1RecommendationsItem  `json:"items,omitempty"`
	Summary     *LlmoptimizationV1RecommendationsSummary `json:"summary,omitempty"`
}

// LlmoptimizationV1GetChatCompletionsUsageReportResponse defines model for llmoptimization.v1.GetChatCompletionsUsageReportResponse.
type LlmoptimizationV1GetChatCompletionsUsageReportResponse struct {
	Items       *[]LlmoptimizationV1UsageItem `json:"items,omitempty"`
	StepSeconds *int32                        `json:"stepSeconds,omitempty"`
}

// LlmoptimizationV1GetSettingsResponse defines model for llmoptimization.v1.GetSettingsResponse.
type LlmoptimizationV1GetSettingsResponse struct {
	Settings *LlmoptimizationV1Settings `json:"settings,omitempty"`
}

// LlmoptimizationV1RecommendationsItem defines model for llmoptimization.v1.RecommendationsItem.
type LlmoptimizationV1RecommendationsItem struct {
	Category              string                      `json:"category"`
	Costs                 LlmoptimizationV1Costs      `json:"costs"`
	Id                    string                      `json:"id"`
	RecommendedModelCosts LlmoptimizationV1Costs      `json:"recommendedModelCosts"`
	RequestCount          int32                       `json:"requestCount"`
	Routing               LlmoptimizationV1Routing    `json:"routing"`
	TokenCount            LlmoptimizationV1TokenCount `json:"tokenCount"`
}

// LlmoptimizationV1RecommendationsSummary defines model for llmoptimization.v1.RecommendationsSummary.
type LlmoptimizationV1RecommendationsSummary struct {
	Costs                 LlmoptimizationV1Costs `json:"costs"`
	RecommendedModelCosts LlmoptimizationV1Costs `json:"recommendedModelCosts"`
}

// LlmoptimizationV1Routing defines model for llmoptimization.v1.Routing.
type LlmoptimizationV1Routing struct {
	From LlmoptimizationV1RoutingModel `json:"from"`
	To   LlmoptimizationV1RoutingModel `json:"to"`
}

// LlmoptimizationV1RoutingModel defines model for llmoptimization.v1.RoutingModel.
type LlmoptimizationV1RoutingModel struct {
	FineTuned bool   `json:"fineTuned"`
	Model     string `json:"model"`
}

// LlmoptimizationV1Settings defines model for llmoptimization.v1.Settings.
type LlmoptimizationV1Settings struct {
	PromptSharingEnabled bool `json:"promptSharingEnabled"`
}

// LlmoptimizationV1TokenCount defines model for llmoptimization.v1.TokenCount.
type LlmoptimizationV1TokenCount struct {
	In  int32 `json:"in"`
	Out int32 `json:"out"`
}

// LlmoptimizationV1UpsertSettingsRequest defines model for llmoptimization.v1.UpsertSettingsRequest.
type LlmoptimizationV1UpsertSettingsRequest struct {
	Settings *LlmoptimizationV1Settings `json:"settings,omitempty"`
}

// LlmoptimizationV1UpsertSettingsResponse defines model for llmoptimization.v1.UpsertSettingsResponse.
type LlmoptimizationV1UpsertSettingsResponse struct {
	Settings *LlmoptimizationV1Settings `json:"settings,omitempty"`
}

// LlmoptimizationV1UsageItem defines model for llmoptimization.v1.UsageItem.
type LlmoptimizationV1UsageItem struct {
	CostPerApiKey         map[string]string `json:"costPerApiKey"`
	CostPerCategory       map[string]string `json:"costPerCategory"`
	DailyCost             string            `json:"dailyCost"`
	DailyCostPerMilTokens string            `json:"dailyCostPerMilTokens"`
	Timestamp             string            `json:"timestamp"`
}

// NodeconfigV1AKSConfig defines model for nodeconfig.v1.AKSConfig.
type NodeconfigV1AKSConfig struct {
	// MaxPodsPerNode Maximum number of pods that can be run on a node, which affects how many IP addresses you will need for each node.
	// Defaults to 30. Values between 10 and 250 are allowed.
	// Setting values above 110 will require specific CNI configuration. Please refer to Microsoft documentation for additional guidance.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// OsDiskType OsDiskType represent possible values for AKS node os disk type(this is subset of all available Azure disk types).
	OsDiskType *NodeconfigV1AKSConfigOsDiskType `json:"osDiskType,omitempty"`
}

// NodeconfigV1AKSConfigOsDiskType OsDiskType represent possible values for AKS node os disk type(this is subset of all available Azure disk types).
type NodeconfigV1AKSConfigOsDiskType string

// NodeconfigV1ContainerRuntime List of supported container runtimes kubelet should use.
type NodeconfigV1ContainerRuntime string

// NodeconfigV1DeleteConfigurationResponse defines model for nodeconfig.v1.DeleteConfigurationResponse.
type NodeconfigV1DeleteConfigurationResponse = map[string]interface{}

// NodeconfigV1EKSConfig defines model for nodeconfig.v1.EKSConfig.
type NodeconfigV1EKSConfig struct {
	// DnsClusterIp IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface.
	DnsClusterIp *string `json:"dnsClusterIp"`
	ImdsHopLimit *int32  `json:"imdsHopLimit"`
	ImdsV1       *bool   `json:"imdsV1"`

	// InstanceProfileArn Cluster's instance profile ARN used for CAST provisioned nodes.
	InstanceProfileArn string `json:"instanceProfileArn"`

	// KeyPairId AWS key pair ID to be used for provisioned nodes. Has priority over sshPublicKey.
	KeyPairId *string `json:"keyPairId"`

	// SecurityGroups Cluster's security groups configuration.
	SecurityGroups *[]string                `json:"securityGroups,omitempty"`
	TargetGroup    *NodeconfigV1TargetGroup `json:"targetGroup,omitempty"`

	// VolumeIops EBS volume IOPS value to be used for provisioned nodes.
	VolumeIops      *int32  `json:"volumeIops"`
	VolumeKmsKeyArn *string `json:"volumeKmsKeyArn"`

	// VolumeThroughput EBS volume throughput in MiB/s to be used for provisioned nodes.
	VolumeThroughput *int32 `json:"volumeThroughput"`

	// VolumeType EBS volume type to be used for provisioned nodes. Defaults to gp3.
	VolumeType *string `json:"volumeType"`
}

// NodeconfigV1GKEConfig defines model for nodeconfig.v1.GKEConfig.
type NodeconfigV1GKEConfig struct {
	// DiskType Type of boot disk attached to the node. For available types please read official GCP docs(https://cloud.google.com/compute/docs/disks#pdspecs).
	DiskType *string `json:"diskType"`

	// MaxPodsPerNode Maximum number of pods that can be run on a node, which affects how many IP addresses you will need for each node. Defaults to 110.
	// For Standard GKE clusters, you can run a maximum of 256 Pods on a node with a /23 range, not 512 as you might expect. This provides a buffer so that Pods don't become unschedulable due to a
	// transient lack of IP addresses in the Pod IP range for a given node. For all ranges, at most half as many Pods can be scheduled as IP addresses in the range.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// NetworkTags Network tags to be added on a VM. Each tag must be 1-63 characters long, start with a lowercase letter and end with either a number or a lowercase letter.
	NetworkTags *[]string `json:"networkTags,omitempty"`
}

// NodeconfigV1GetSuggestedConfigurationResponse defines model for nodeconfig.v1.GetSuggestedConfigurationResponse.
type NodeconfigV1GetSuggestedConfigurationResponse struct {
	SecurityGroups *[]NodeconfigV1SecurityGroup `json:"securityGroups,omitempty"`
	Subnets        *[]NodeconfigV1SubnetDetails `json:"subnets,omitempty"`
}

// NodeconfigV1KOPSConfig defines model for nodeconfig.v1.KOPSConfig.
type NodeconfigV1KOPSConfig struct {
	// KeyPairId AWS key pair ID to be used for provisioned nodes. Has priority over sshPublicKey.
	KeyPairId *string `json:"keyPairId"`
}

// NodeconfigV1ListConfigurationsResponse defines model for nodeconfig.v1.ListConfigurationsResponse.
type NodeconfigV1ListConfigurationsResponse struct {
	Items *[]NodeconfigV1NodeConfiguration `json:"items,omitempty"`
}

// NodeconfigV1NewNodeConfiguration defines model for nodeconfig.v1.NewNodeConfiguration.
type NodeconfigV1NewNodeConfiguration struct {
	Aks *NodeconfigV1AKSConfig `json:"aks,omitempty"`

	// ContainerRuntime List of supported container runtimes kubelet should use.
	ContainerRuntime *NodeconfigV1ContainerRuntime `json:"containerRuntime,omitempty"`

	// DiskCpuRatio Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. The root volume will have a minimum of 100GiB and will be further increased based on value.
	DiskCpuRatio *int32 `json:"diskCpuRatio,omitempty"`

	// DockerConfig Optional docker daemon configuration properties. Provide only properties that you want to override. Available values https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file
	DockerConfig *map[string]interface{} `json:"dockerConfig,omitempty"`

	// DrainTimeoutSec Drain timeout in seconds. Defaults to 0.
	DrainTimeoutSec *int32                 `json:"drainTimeoutSec"`
	Eks             *NodeconfigV1EKSConfig `json:"eks,omitempty"`
	Gke             *NodeconfigV1GKEConfig `json:"gke,omitempty"`

	// Image Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Kubernetes version if possible.
	Image *string `json:"image"`

	// InitScript Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded.
	InitScript *string                 `json:"initScript"`
	Kops       *NodeconfigV1KOPSConfig `json:"kops,omitempty"`

	// KubeletConfig Optional kubelet configuration properties. Applicable for EKS only.
	KubeletConfig *map[string]interface{} `json:"kubeletConfig,omitempty"`

	// MinDiskSize Minimal disk size in GiB. Defaults to 100.
	MinDiskSize *int32 `json:"minDiskSize"`

	// Name The name of the node configuration.
	Name string `json:"name"`

	// SshPublicKey Optional SSH public key to be used for provisioned nodes. Value should be base64 encoded.
	SshPublicKey *string `json:"sshPublicKey"`

	// Subnets Subnet ids to be used for provisioned nodes.
	Subnets *[]string `json:"subnets,omitempty"`

	// Tags Tags to be added on cloud instances for provisioned nodes.
	Tags *map[string]string `json:"tags,omitempty"`
}

// NodeconfigV1NodeConfiguration defines model for nodeconfig.v1.NodeConfiguration.
type NodeconfigV1NodeConfiguration struct {
	Aks *NodeconfigV1AKSConfig `json:"aks,omitempty"`

	// ContainerRuntime List of supported container runtimes kubelet should use.
	ContainerRuntime *NodeconfigV1ContainerRuntime `json:"containerRuntime,omitempty"`

	// CreatedAt The date when node configuration was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Default Whether node configuration is the default one.
	Default *bool `json:"default,omitempty"`

	// DiskCpuRatio Disk to CPU ratio.
	DiskCpuRatio *int32 `json:"diskCpuRatio,omitempty"`

	// DockerConfig Optional docker daemon configuration properties. Applicable for EKS only.
	DockerConfig *map[string]interface{} `json:"dockerConfig"`

	// DrainTimeoutSec Drain timeout in seconds. Defaults to 0.
	DrainTimeoutSec *int32                 `json:"drainTimeoutSec"`
	Eks             *NodeconfigV1EKSConfig `json:"eks,omitempty"`
	Gke             *NodeconfigV1GKEConfig `json:"gke,omitempty"`

	// Id The node configuration ID.
	Id *string `json:"id,omitempty"`

	// Image Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Kubernetes version if possible.
	Image *string `json:"image"`

	// InitScript Base64 encoded init script to be run on your instance at launch.
	InitScript *string                 `json:"initScript"`
	Kops       *NodeconfigV1KOPSConfig `json:"kops,omitempty"`

	// KubeletConfig Optional kubelet configuration properties. Applicable for EKS only.
	KubeletConfig *map[string]interface{} `json:"kubeletConfig"`

	// MinDiskSize Minimal disk size in GiB.
	MinDiskSize *int32 `json:"minDiskSize,omitempty"`

	// Name The name of the node configuration.
	Name *string `json:"name,omitempty"`

	// SshPublicKey Base64 encoded ssh public key to be used for provisioned nodes.
	SshPublicKey *string `json:"sshPublicKey"`

	// Subnets Subnet ids to be used for provisioned nodes.
	Subnets *[]string `json:"subnets,omitempty"`

	// Tags Tags to be added on cloud instances for provisioned nodes.
	Tags *map[string]string `json:"tags,omitempty"`

	// UpdatedAt The date when node configuration was updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Version The version of the node configuration.
	Version *int32 `json:"version,omitempty"`
}

// NodeconfigV1NodeConfigurationUpdate defines model for nodeconfig.v1.NodeConfigurationUpdate.
type NodeconfigV1NodeConfigurationUpdate struct {
	Aks *NodeconfigV1AKSConfig `json:"aks,omitempty"`

	// ContainerRuntime List of supported container runtimes kubelet should use.
	ContainerRuntime *NodeconfigV1ContainerRuntime `json:"containerRuntime,omitempty"`

	// DiskCpuRatio Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. The root volume will have a minimum of 100GiB and will be further increased based on value.
	DiskCpuRatio *int32 `json:"diskCpuRatio,omitempty"`

	// DockerConfig Optional docker daemon configuration properties. Provide only properties that you want to override. Available values https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file
	DockerConfig *map[string]interface{} `json:"dockerConfig,omitempty"`

	// DrainTimeoutSec Drain timeout in seconds. Defaults to 0.
	DrainTimeoutSec *int32                 `json:"drainTimeoutSec"`
	Eks             *NodeconfigV1EKSConfig `json:"eks,omitempty"`
	Gke             *NodeconfigV1GKEConfig `json:"gke,omitempty"`

	// Image Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Kubernetes version if possible.
	Image *string `json:"image"`

	// InitScript Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded.
	InitScript *string                 `json:"initScript"`
	Kops       *NodeconfigV1KOPSConfig `json:"kops,omitempty"`

	// KubeletConfig Optional kubelet configuration properties. Applicable for EKS only.
	KubeletConfig *map[string]interface{} `json:"kubeletConfig,omitempty"`

	// MinDiskSize Minimal disk size in GiB. Defaults to 100.
	MinDiskSize *int32 `json:"minDiskSize"`

	// SshPublicKey Optional SSH public key to be used for provisioned nodes. Value should be base64 encoded.
	SshPublicKey *string `json:"sshPublicKey"`

	// Subnets Subnet ids to be used for provisioned nodes.
	Subnets *[]string `json:"subnets,omitempty"`

	// Tags Tags to be added on cloud instances for provisioned nodes.
	Tags *map[string]string `json:"tags,omitempty"`
}

// NodeconfigV1SecurityGroup defines model for nodeconfig.v1.SecurityGroup.
type NodeconfigV1SecurityGroup struct {
	// Description A description of the security group.
	Description *string `json:"description,omitempty"`

	// Id The ID of the security group.
	Id *string `json:"id,omitempty"`

	// Name The name of the security group.
	Name *string `json:"name,omitempty"`

	// Tags Tags of the security group.
	Tags *map[string]string `json:"tags,omitempty"`
}

// NodeconfigV1SubnetDetails SubnetDetails contains all subnet attributes relevant for node configuration.
type NodeconfigV1SubnetDetails struct {
	// AvailableIpAddressCount Available Ip Address populated for EKS provider only.
	AvailableIpAddressCount *int32 `json:"availableIpAddressCount"`

	// Cidr Cidr block of the subnet.
	Cidr *string `json:"cidr,omitempty"`

	// Id The ID of the subnet.
	Id *string `json:"id,omitempty"`

	// Tags Tags of the subnet.
	Tags *map[string]string `json:"tags,omitempty"`

	// Zone Cluster zone.
	Zone *ExternalclusterV1Zone `json:"zone,omitempty"`
}

// NodeconfigV1TargetGroup defines model for nodeconfig.v1.TargetGroup.
type NodeconfigV1TargetGroup struct {
	// Arn ARN of the target group.
	Arn *string `json:"arn,omitempty"`

	// Port Port of the target group.
	Port *int32 `json:"port"`
}

// NodetemplatesV1AvailableInstanceType defines model for nodetemplates.v1.AvailableInstanceType.
type NodetemplatesV1AvailableInstanceType struct {
	Architecture           *string                                                     `json:"architecture,omitempty"`
	AvailableGpuDevices    *[]NodetemplatesV1AvailableInstanceTypeGPUDevice            `json:"availableGpuDevices,omitempty"`
	Cpu                    *string                                                     `json:"cpu,omitempty"`
	CpuCost                *float64                                                    `json:"cpuCost,omitempty"`
	Family                 *string                                                     `json:"family,omitempty"`
	IsBareMetal            *bool                                                       `json:"isBareMetal,omitempty"`
	IsComputeOptimized     *bool                                                       `json:"isComputeOptimized,omitempty"`
	Memory                 *string                                                     `json:"memory,omitempty"`
	Name                   *string                                                     `json:"name,omitempty"`
	Os                     *NodetemplatesV1AvailableInstanceTypeOs                     `json:"os,omitempty"`
	StorageOptimizedOption *NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption `json:"storageOptimizedOption,omitempty"`
}

// NodetemplatesV1AvailableInstanceTypeGPUDevice defines model for nodetemplates.v1.AvailableInstanceType.GPUDevice.
type NodetemplatesV1AvailableInstanceTypeGPUDevice struct {
	Count        *int32  `json:"count,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// NodetemplatesV1AvailableInstanceTypeOs defines model for nodetemplates.v1.AvailableInstanceType.Os.
type NodetemplatesV1AvailableInstanceTypeOs string

// NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption defines model for nodetemplates.v1.AvailableInstanceType.StorageOptimizedOption.
type NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption string

// NodetemplatesV1DeleteNodeTemplateResponse defines model for nodetemplates.v1.DeleteNodeTemplateResponse.
type NodetemplatesV1DeleteNodeTemplateResponse = map[string]interface{}

// NodetemplatesV1FilterInstanceTypesResponse defines model for nodetemplates.v1.FilterInstanceTypesResponse.
type NodetemplatesV1FilterInstanceTypesResponse struct {
	AvailableInstanceTypes *[]NodetemplatesV1AvailableInstanceType `json:"availableInstanceTypes,omitempty"`
}

// NodetemplatesV1GenerateNodeTemplatesResponse defines model for nodetemplates.v1.GenerateNodeTemplatesResponse.
type NodetemplatesV1GenerateNodeTemplatesResponse struct {
	Items *[]NodetemplatesV1NodeTemplateListItem `json:"items,omitempty"`
}

// NodetemplatesV1Label defines model for nodetemplates.v1.Label.
type NodetemplatesV1Label struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NodetemplatesV1ListNodeTemplatesResponse defines model for nodetemplates.v1.ListNodeTemplatesResponse.
type NodetemplatesV1ListNodeTemplatesResponse struct {
	Items *[]NodetemplatesV1NodeTemplateListItem `json:"items,omitempty"`
}

// NodetemplatesV1NewNodeTemplate defines model for nodetemplates.v1.NewNodeTemplate.
type NodetemplatesV1NewNodeTemplate struct {
	ConfigurationId                          *string                             `json:"configurationId,omitempty"`
	Constraints                              *NodetemplatesV1TemplateConstraints `json:"constraints,omitempty"`
	CustomInstancesEnabled                   *bool                               `json:"customInstancesEnabled"`
	CustomInstancesWithExtendedMemoryEnabled *bool                               `json:"customInstancesWithExtendedMemoryEnabled"`
	CustomLabel                              *NodetemplatesV1Label               `json:"customLabel,omitempty"`

	// CustomLabels Custom labels for the template.
	// The passed values will be ignored if the field custom_label is present.
	CustomLabels *map[string]string `json:"customLabels,omitempty"`

	// CustomTaints Custom taints for the template.
	CustomTaints *[]NodetemplatesV1TaintWithOptionalEffect `json:"customTaints,omitempty"`

	// IsDefault Flag whether this template is the default template for the cluster.
	IsDefault *bool `json:"isDefault,omitempty"`

	// IsEnabled This field is used to enable/disable autoscaling for the template.
	IsEnabled         *bool                                    `json:"isEnabled"`
	Name              *string                                  `json:"name,omitempty"`
	RebalancingConfig *NodetemplatesV1RebalancingConfiguration `json:"rebalancingConfig,omitempty"`

	// ShouldTaint Marks whether the templated nodes will have a taint template taint.
	// Based on the template constraints, the template may still have additional taints.
	// For example, if both lifecycles (spot, on-demand) are enabled, to use spot nodes, the spot nodes of this template will have the spot taint.
	ShouldTaint *bool `json:"shouldTaint"`
}

// NodetemplatesV1NodeTemplate defines model for nodetemplates.v1.NodeTemplate.
type NodetemplatesV1NodeTemplate struct {
	ConfigurationId                          *string                             `json:"configurationId,omitempty"`
	ConfigurationName                        *string                             `json:"configurationName,omitempty"`
	Constraints                              *NodetemplatesV1TemplateConstraints `json:"constraints,omitempty"`
	CustomInstancesEnabled                   *bool                               `json:"customInstancesEnabled,omitempty"`
	CustomInstancesWithExtendedMemoryEnabled *bool                               `json:"customInstancesWithExtendedMemoryEnabled,omitempty"`
	CustomLabel                              *NodetemplatesV1Label               `json:"customLabel,omitempty"`

	// CustomLabels Custom labels for the template.
	CustomLabels *map[string]string `json:"customLabels,omitempty"`

	// CustomTaints Custom taints for the template.
	CustomTaints *[]NodetemplatesV1Taint `json:"customTaints,omitempty"`

	// IsDefault Flag whether this template is the default template for the cluster.
	IsDefault *bool `json:"isDefault,omitempty"`

	// IsEnabled This field is used to enable/disable autoscaling for the template.
	IsEnabled         *bool                                    `json:"isEnabled,omitempty"`
	Name              *string                                  `json:"name,omitempty"`
	RebalancingConfig *NodetemplatesV1RebalancingConfiguration `json:"rebalancingConfig,omitempty"`

	// ShouldTaint Marks whether the templated nodes will have a taint.
	ShouldTaint *bool   `json:"shouldTaint,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// NodetemplatesV1NodeTemplateListItem defines model for nodetemplates.v1.NodeTemplateListItem.
type NodetemplatesV1NodeTemplateListItem struct {
	Stats    *NodetemplatesV1NodeTemplateListItemStats `json:"stats,omitempty"`
	Template *NodetemplatesV1NodeTemplate              `json:"template,omitempty"`
}

// NodetemplatesV1NodeTemplateListItemStats defines model for nodetemplates.v1.NodeTemplateListItem.Stats.
type NodetemplatesV1NodeTemplateListItemStats struct {
	CountFallback *int32 `json:"countFallback,omitempty"`
	CountOnDemand *int32 `json:"countOnDemand,omitempty"`
	CountSpot     *int32 `json:"countSpot,omitempty"`
}

// NodetemplatesV1RebalancingConfiguration defines model for nodetemplates.v1.RebalancingConfiguration.
type NodetemplatesV1RebalancingConfiguration struct {
	// MinNodes Minimum amount of nodes to create for template
	// Note, this setting is only relevant for very small clusters, for larger clusters it's recommended to leave this at 0.
	MinNodes *int32 `json:"minNodes"`
}

// NodetemplatesV1Taint Taint is used in responses.
type NodetemplatesV1Taint struct {
	// Effect TaintEffect is a node taint effect.
	Effect *NodetemplatesV1TaintEffect `json:"effect,omitempty"`
	Key    *string                     `json:"key,omitempty"`
	Value  *string                     `json:"value,omitempty"`
}

// NodetemplatesV1TaintEffect TaintEffect is a node taint effect.
type NodetemplatesV1TaintEffect string

// NodetemplatesV1TaintWithOptionalEffect TaintWithOptionalEffect is used when creating/updating a node template.
// We are adding support for specifying taint effect on node templates and effect should be optional to be backwards compatible.
type NodetemplatesV1TaintWithOptionalEffect struct {
	// Effect TaintEffect is a node taint effect.
	Effect *NodetemplatesV1TaintEffect `json:"effect,omitempty"`
	Key    string                      `json:"key"`
	Value  *string                     `json:"value"`
}

// NodetemplatesV1TemplateConstraints defines model for nodetemplates.v1.TemplateConstraints.
type NodetemplatesV1TemplateConstraints struct {
	Architectures    *[]string `json:"architectures,omitempty"`
	BareMetal        *bool     `json:"bareMetal"`
	ComputeOptimized *bool     `json:"computeOptimized"`

	// CustomPriority Custom sorting priority - instances matching defined rules will take priority over other candidates.
	CustomPriority *[]NodetemplatesV1TemplateConstraintsCustomPriority `json:"customPriority,omitempty"`

	// DedicatedNodeAffinity Dedicated node affinity - creates preference for instances to be created on sole tenancy or dedicated nodes.
	//
	// Dedicated node affinity - creates preference for instances to be created on sole tenancy or dedicated nodes. This
	// feature is only available for GCP clusters and sole tenancy nodes with local SSDs or GPUs are not supported. If
	// the sole tenancy or dedicated nodes don't have capacity for selected instance type, the Autoscaler will fall back
	// to multi-tenant instance types available for this Node Template. Other instance constraints are applied when
	// the Autoscaler picks available instance types that can be created on the sole tenancy or dedicated
	// node (example: setting min CPU to 16).
	//
	// When using dedicated node affinity, with a shared sole tenancy node group in GCP following rules and limitations apply:
	// - Use Resource URI/FQDN of the sole tenancy node group as the name (example: /projects/test-123/zones/europe-west1b/nodeGroups/test-node-group).
	// - The GKE cluster must use Shared VPC (https://cloud.google.com/vpc/docs/shared-vpc).
	// - The sole tenancy node group must be shared with the GKE cluster's project or organization.
	// - The CAST's service account must have the necessary permissions to create and operate instances
	//   on the sole tenancy node group's project.
	DedicatedNodeAffinity *[]NodetemplatesV1TemplateConstraintsDedicatedNodeAffinity `json:"dedicatedNodeAffinity,omitempty"`

	// EnableSpotDiversity Enable/disable spot diversity policy. When enabled, autoscaler will try to balance between diverse and cost optimal instance types.
	EnableSpotDiversity *bool `json:"enableSpotDiversity"`

	// FallbackRestoreRateSeconds Fallback restore rate in seconds: defines how much time should pass before spot fallback should be attempted to be restored to real spot.
	FallbackRestoreRateSeconds *int32                                                       `json:"fallbackRestoreRateSeconds"`
	Gpu                        *NodetemplatesV1TemplateConstraintsGPUConstraints            `json:"gpu,omitempty"`
	InstanceFamilies           *NodetemplatesV1TemplateConstraintsInstanceFamilyConstraints `json:"instanceFamilies,omitempty"`

	// IsGpuOnly This template is gpu only. Setting this to true, will result in only instances with GPUs being considered.
	// In addition, this ensures that all of the added instances for this template won't have any nvidia taints.
	IsGpuOnly *bool  `json:"isGpuOnly"`
	MaxCpu    *int32 `json:"maxCpu"`
	MaxMemory *int32 `json:"maxMemory"`
	MinCpu    *int32 `json:"minCpu"`
	MinMemory *int32 `json:"minMemory"`

	// OnDemand Should include on-demand instances in the considered pool.
	OnDemand *bool     `json:"onDemand"`
	Os       *[]string `json:"os,omitempty"`

	// Spot Should include spot instances in the considered pool.
	// Note 1: if both spot and on-demand are false, then on-demand is assumed.
	// Note 2: if both spot and on-demand are true, then you can specify which lifecycle you want by adding
	//  nodeSelector:
	//        scheduling.cast.ai/spot: "true"
	// selector, or an equivalent affinity to the pod manifest and
	//  tolerations:
	//      - key: scheduling.cast.ai/spot
	//        operator: Exists
	// toleration.
	Spot *bool `json:"spot"`

	// SpotDiversityPriceIncreaseLimitPercent Allowed node configuration price increase when diversifying instance types. E.g. if the value is 10%, then the overall price of diversified instance types can be 10% higher than the price of the
	// optimal configuration.
	SpotDiversityPriceIncreaseLimitPercent *int32 `json:"spotDiversityPriceIncreaseLimitPercent"`

	// SpotInterruptionPredictionsEnabled Enable/disable spot interruption predictions.
	SpotInterruptionPredictionsEnabled *bool `json:"spotInterruptionPredictionsEnabled"`

	// SpotInterruptionPredictionsType Spot interruption predictions type. Can be either "aws-rebalance-recommendations" or "interruption-predictions".
	SpotInterruptionPredictionsType *string `json:"spotInterruptionPredictionsType"`
	StorageOptimized                *bool   `json:"storageOptimized"`

	// UseSpotFallbacks Spot instance fallback constraint - when true, on-demand instances will be created, when spots are unavailable.
	UseSpotFallbacks *bool `json:"useSpotFallbacks"`
}

// NodetemplatesV1TemplateConstraintsCustomPriority defines model for nodetemplates.v1.TemplateConstraints.CustomPriority.
type NodetemplatesV1TemplateConstraintsCustomPriority struct {
	Families *[]string `json:"families,omitempty"`
	OnDemand *bool     `json:"onDemand"`
	Spot     *bool     `json:"spot"`
}

// NodetemplatesV1TemplateConstraintsDedicatedNodeAffinity defines model for nodetemplates.v1.TemplateConstraints.DedicatedNodeAffinity.
type NodetemplatesV1TemplateConstraintsDedicatedNodeAffinity struct {
	AzName        *string   `json:"azName,omitempty"`
	InstanceTypes *[]string `json:"instanceTypes,omitempty"`
	Name          *string   `json:"name,omitempty"`
}

// NodetemplatesV1TemplateConstraintsGPUConstraints defines model for nodetemplates.v1.TemplateConstraints.GPUConstraints.
type NodetemplatesV1TemplateConstraintsGPUConstraints struct {
	ExcludeNames  *[]string `json:"excludeNames,omitempty"`
	IncludeNames  *[]string `json:"includeNames,omitempty"`
	Manufacturers *[]string `json:"manufacturers,omitempty"`
	MaxCount      *int32    `json:"maxCount"`
	MinCount      *int32    `json:"minCount"`
}

// NodetemplatesV1TemplateConstraintsInstanceFamilyConstraints defines model for nodetemplates.v1.TemplateConstraints.InstanceFamilyConstraints.
type NodetemplatesV1TemplateConstraintsInstanceFamilyConstraints struct {
	Exclude *[]string `json:"exclude,omitempty"`
	Include *[]string `json:"include,omitempty"`
}

// NodetemplatesV1UpdateNodeTemplate defines model for nodetemplates.v1.UpdateNodeTemplate.
type NodetemplatesV1UpdateNodeTemplate struct {
	ConfigurationId                          *string                             `json:"configurationId,omitempty"`
	Constraints                              *NodetemplatesV1TemplateConstraints `json:"constraints,omitempty"`
	CustomInstancesEnabled                   *bool                               `json:"customInstancesEnabled"`
	CustomInstancesWithExtendedMemoryEnabled *bool                               `json:"customInstancesWithExtendedMemoryEnabled"`
	CustomLabel                              *NodetemplatesV1Label               `json:"customLabel,omitempty"`

	// CustomLabels Custom labels for the template.
	// The passed values will be ignored if the field custom_label is present.
	CustomLabels *map[string]string `json:"customLabels,omitempty"`

	// CustomTaints Custom taints for the template.
	CustomTaints *[]NodetemplatesV1TaintWithOptionalEffect `json:"customTaints,omitempty"`

	// IsDefault Flag whether this template is the default template for the cluster.
	IsDefault *bool `json:"isDefault,omitempty"`

	// IsEnabled This field is used to enable/disable autoscaling for the template.
	IsEnabled         *bool                                    `json:"isEnabled"`
	RebalancingConfig *NodetemplatesV1RebalancingConfiguration `json:"rebalancingConfig,omitempty"`

	// ShouldTaint Marks whether the templated nodes will have a taint.
	ShouldTaint *bool `json:"shouldTaint"`
}

// PoliciesV1ClusterLimitsCpu Defines the minimum and maximum amount of vCPUs for cluster's worker nodes.
type PoliciesV1ClusterLimitsCpu struct {
	// MaxCores Defines the maximum allowed amount of vCPUs in the whole cluster.
	MaxCores *int32 `json:"maxCores,omitempty"`

	// MinCores Defines the minimum allowed amount of CPUs in the whole cluster.
	MinCores *int32 `json:"minCores,omitempty"`
}

// PoliciesV1ClusterLimitsPolicy Defines minimum and maximum amount of CPU the cluster can have.
type PoliciesV1ClusterLimitsPolicy struct {
	// Cpu Defines the minimum and maximum amount of vCPUs for cluster's worker nodes.
	Cpu *PoliciesV1ClusterLimitsCpu `json:"cpu,omitempty"`

	// Enabled Enable/disable cluster size limits policy.
	Enabled *bool `json:"enabled"`
}

// PoliciesV1Evictor Defines the CAST AI Evictor component settings. Evictor watches the pods running in your cluster and looks for
// ways to compact them into fewer nodes, making nodes empty, which will be removed by the the empty worker nodes
// policy.
type PoliciesV1Evictor struct {
	// AggressiveMode Enable/disable aggressive mode. By default, Evictor does not target nodes that are running unreplicated pods.
	// This mode will make the Evictor start considering application with just a single replica.
	AggressiveMode *bool `json:"aggressiveMode"`

	// Allowed * We have detected an already existing Evictor installation. If you want CAST AI to manage the Evictor instead,
	//   then you will need to remove the current installation first.
	//
	// Deprecated; use "status" instead.
	Allowed *bool `json:"allowed"`

	// CycleInterval Configure the interval duration between Evictor operations. This property can be used to lower or raise the
	// frequency of the Evictor's find-and-drain operations.
	CycleInterval *string `json:"cycleInterval"`

	// DryRun Enable/disable dry-run. This property allows you to prevent the Evictor from carrying any operations out and
	// preview the actions it would take.
	DryRun *bool `json:"dryRun"`

	// Enabled Enable/disable the Evictor policy. This will either install or uninstall the Evictor component in your cluster.
	Enabled *bool `json:"enabled"`

	// IgnorePodDisruptionBudgets If enabled then Evictor will attempt to evict pods that have pod disruption budgets configured.
	IgnorePodDisruptionBudgets *bool `json:"ignorePodDisruptionBudgets"`

	// NodeGracePeriodMinutes Configure the node grace period which controls the duration which must pass after a node has been created before
	// Evictor starts considering that node.
	NodeGracePeriodMinutes *int32 `json:"nodeGracePeriodMinutes"`

	// PodEvictionFailureBackOffInterval Configure the pod eviction failure back off interval. If pod eviction fails then Evictor will attempt
	// to evict it again after the amount of time specified here.
	PodEvictionFailureBackOffInterval *string `json:"podEvictionFailureBackOffInterval"`

	// ScopedMode Enable/disable scoped mode. By default, Evictor targets all nodes in the cluster. This mode will constrain in to
	// just the nodes which were created by CAST AI.
	ScopedMode *bool                    `json:"scopedMode"`
	Status     *PoliciesV1EvictorStatus `json:"status,omitempty"`
}

// PoliciesV1EvictorStatus defines model for policies.v1.EvictorStatus.
type PoliciesV1EvictorStatus string

// PoliciesV1GetClusterNodeConstraintsResponse Defines cluster node constraints response.
type PoliciesV1GetClusterNodeConstraintsResponse struct {
	// ClusterId The ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// Items A list of viable CPU:Memory combinations.
	Items *[]PoliciesV1GetClusterNodeConstraintsResponseCpuRam `json:"items,omitempty"`
}

// PoliciesV1GetClusterNodeConstraintsResponseCpuRam A viable CPU:Memory combination.
type PoliciesV1GetClusterNodeConstraintsResponseCpuRam struct {
	// CpuCores Number of CPUs.
	CpuCores *int32 `json:"cpuCores,omitempty"`

	// RamMib Number of memory in MiB.
	RamMib *int32 `json:"ramMib,omitempty"`
}

// PoliciesV1Headroom Defines Headroom for Unschedulable Pods.
type PoliciesV1Headroom struct {
	// CpuPercentage Defines percentage of additional CPU capacity to be added.
	CpuPercentage *int32 `json:"cpuPercentage,omitempty"`

	// Enabled Defines whether Headroom is enabled.
	Enabled          *bool  `json:"enabled"`
	MemoryPercentage *int32 `json:"memoryPercentage,omitempty"`
}

// PoliciesV1NodeConstraints Defines the NodeConstraints that will be applied when autoscaling with UnschedulablePodsPolicy.
type PoliciesV1NodeConstraints struct {
	// Enabled Defines whether NodeConstraints are enabled.
	Enabled *bool `json:"enabled"`

	// MaxCpuCores Defines max CPU cores for the node to pick.
	MaxCpuCores *int32 `json:"maxCpuCores,omitempty"`

	// MaxRamMib Defines max RAM in MiB for the node to pick.
	MaxRamMib *int32 `json:"maxRamMib,omitempty"`

	// MinCpuCores Defines min CPU cores for the node to pick.
	MinCpuCores *int32 `json:"minCpuCores,omitempty"`

	// MinRamMib Defines min RAM in MiB for the node to pick.
	MinRamMib *int32 `json:"minRamMib,omitempty"`
}

// PoliciesV1NodeDownscaler Node Downscaler defines policies for removing nodes based on the configured conditions.
type PoliciesV1NodeDownscaler struct {
	// EmptyNodes Defines whether Node Downscaler should opt in for removing empty worker nodes when possible.
	EmptyNodes *PoliciesV1NodeDownscalerEmptyNodes `json:"emptyNodes,omitempty"`

	// Enabled Enable/disable node downscaler policy.
	Enabled *bool `json:"enabled"`

	// Evictor Defines the CAST AI Evictor component settings. Evictor watches the pods running in your cluster and looks for
	// ways to compact them into fewer nodes, making nodes empty, which will be removed by the the empty worker nodes
	// policy.
	Evictor *PoliciesV1Evictor `json:"evictor,omitempty"`
}

// PoliciesV1NodeDownscalerEmptyNodes Defines whether Node Downscaler should opt in for removing empty worker nodes when possible.
type PoliciesV1NodeDownscalerEmptyNodes struct {
	// DelaySeconds * increasing the value will make the cluster more responsive to dynamic
	// * workloads in the expense of higher cluster cost.
	DelaySeconds *int32 `json:"delaySeconds"`

	// Enabled Enable/disable the empty worker nodes policy.
	Enabled *bool `json:"enabled"`
}

// PoliciesV1Policies Defines the autoscaling policies details.
type PoliciesV1Policies struct {
	// ClusterLimits Defines minimum and maximum amount of CPU the cluster can have.
	ClusterLimits *PoliciesV1ClusterLimitsPolicy `json:"clusterLimits,omitempty"`

	// Enabled Enable/disable all policies.
	Enabled *bool `json:"enabled"`

	// IsScopedMode Run autoscaler in scoped mode. Only specifically marked pods will be considered for autoscaling, and only nodes
	// provisioned by autoscaler will be considered for downscaling.
	IsScopedMode *bool `json:"isScopedMode"`

	// NodeDownscaler Node Downscaler defines policies for removing nodes based on the configured conditions.
	NodeDownscaler *PoliciesV1NodeDownscaler `json:"nodeDownscaler,omitempty"`

	// NodeTemplatesPartialMatchingEnabled Marks whether partial matching should be used when deciding which custom node template to select.
	NodeTemplatesPartialMatchingEnabled *bool `json:"nodeTemplatesPartialMatchingEnabled"`

	// SpotInstances Policy defining whether autoscaler can use spot instances for provisioning additional workloads.
	SpotInstances *PoliciesV1SpotInstances `json:"spotInstances,omitempty"`

	// UnschedulablePods Policy defining autoscaler's behavior when unscedulable pods were detected.
	UnschedulablePods *PoliciesV1UnschedulablePodsPolicy `json:"unschedulablePods,omitempty"`
}

// PoliciesV1SpotBackups Policy defining whether autoscaler can use spot backups instead of spot instances when spot instances are not
// available.
type PoliciesV1SpotBackups struct {
	// Enabled Enable/disable spot backups policy.
	Enabled *bool `json:"enabled"`

	// SpotBackupRestoreRateSeconds Defines interval on how often spot backups restore to real spot should occur.
	SpotBackupRestoreRateSeconds *int32 `json:"spotBackupRestoreRateSeconds"`
}

// PoliciesV1SpotInstances Policy defining whether autoscaler can use spot instances for provisioning additional workloads.
type PoliciesV1SpotInstances struct {
	// Enabled Enable/disable spot instances policy.
	Enabled *bool `json:"enabled"`

	// MaxReclaimRate Max allowed reclaim rate when choosing spot instance type. E.g. if the value is 10%, instance types having 10% or
	// higher reclaim rate will not be considered. Set to zero to use all instance types regardless of reclaim rate.
	MaxReclaimRate *int32 `json:"maxReclaimRate"`

	// SpotBackups Policy defining whether autoscaler can use spot backups instead of spot instances when spot instances are not
	// available.
	SpotBackups *PoliciesV1SpotBackups `json:"spotBackups,omitempty"`

	// SpotDiversityEnabled Enable/disable spot diversity policy.
	//
	// When enabled, autoscaler will try to balance between diverse and cost optimal instance types.
	SpotDiversityEnabled *bool `json:"spotDiversityEnabled"`

	// SpotDiversityPriceIncreaseLimitPercent Allowed node configuration price increase when diversifying instance types.
	// E.g. if the value is 10%, then the overall price of diversified instance types can be 10% higher than the price of the optimal configuration.
	SpotDiversityPriceIncreaseLimitPercent *int32 `json:"spotDiversityPriceIncreaseLimitPercent"`

	// SpotInterruptionPredictions SpotInterruptionPredictions allows to configure the handling of SPOT interrupt predictions.
	SpotInterruptionPredictions *PoliciesV1SpotInterruptionPredictions `json:"spotInterruptionPredictions,omitempty"`
}

// PoliciesV1SpotInterruptionPredictions SpotInterruptionPredictions allows to configure the handling of SPOT interrupt predictions.
type PoliciesV1SpotInterruptionPredictions struct {
	// Enabled Enable/disable spot interruption predictions.
	Enabled *bool `json:"enabled,omitempty"`

	// Type SpotInterruptionPredictionsType defines the type of the SPOT interruption predictions to enable.
	Type *PoliciesV1SpotInterruptionPredictionsType `json:"type,omitempty"`
}

// PoliciesV1SpotInterruptionPredictionsType SpotInterruptionPredictionsType defines the type of the SPOT interruption predictions to enable.
type PoliciesV1SpotInterruptionPredictionsType string

// PoliciesV1UnschedulablePodsPolicy Policy defining autoscaler's behavior when unscedulable pods were detected.
type PoliciesV1UnschedulablePodsPolicy struct {
	// CustomInstancesEnabled Defines custom instance usage settings.
	CustomInstancesEnabled *bool `json:"customInstancesEnabled"`

	// DiskGibToCpuRatio Defines default ratio of 1 CPU to Volume GiB  which will be summed with minimum value when creating new nodes.
	// If set to 5, the ration would be: 1 CPU : 5 GiB.
	// For example a node with 16 CPU would have (16 * 5 GiB) + minimum(100GiB) = 180 GiB volume size.
	// Deprecated. Input only (for backwards-compatibility, ignored).
	DiskGibToCpuRatio *int32 `json:"diskGibToCpuRatio"`

	// Enabled Enable/disable unschedulable pods detection policy.
	Enabled *bool `json:"enabled"`

	// Headroom Defines Headroom for Unschedulable Pods.
	Headroom *PoliciesV1Headroom `json:"headroom,omitempty"`

	// HeadroomSpot Defines Headroom for Unschedulable Pods.
	HeadroomSpot *PoliciesV1Headroom `json:"headroomSpot,omitempty"`

	// NodeConstraints Defines the NodeConstraints that will be applied when autoscaling with UnschedulablePodsPolicy.
	NodeConstraints *PoliciesV1NodeConstraints `json:"nodeConstraints,omitempty"`
}

// RuntimeV1AckAnomaliesResponse defines model for runtime.v1.AckAnomaliesResponse.
type RuntimeV1AckAnomaliesResponse = map[string]interface{}

// RuntimeV1Anomaly defines model for runtime.v1.Anomaly.
type RuntimeV1Anomaly struct {
	AckedAt                 *time.Time            `json:"ackedAt,omitempty"`
	AssignedUser            *string               `json:"assignedUser,omitempty"`
	ClosedAt                *time.Time            `json:"closedAt,omitempty"`
	ClosedReason            *RuntimeV1CloseReason `json:"closedReason,omitempty"`
	ClosedReasonDescription *string               `json:"closedReasonDescription,omitempty"`
	ClusterId               *string               `json:"clusterId,omitempty"`
	CreatedAt               *time.Time            `json:"createdAt,omitempty"`
	Id                      *string               `json:"id,omitempty"`

	// Name Human readable name of the anomaly.
	Name      *string                 `json:"name,omitempty"`
	Namespace *string                 `json:"namespace,omitempty"`
	Status    *RuntimeV1AnomalyStatus `json:"status,omitempty"`
	Type      *string                 `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updatedAt,omitempty"`
	Workload  *string                 `json:"workload,omitempty"`
}

// RuntimeV1AnomalyEvent defines model for runtime.v1.AnomalyEvent.
type RuntimeV1AnomalyEvent struct {
	ContainerName *string              `json:"containerName,omitempty"`
	Dns           *RuntimeV1DNSAnomaly `json:"dns,omitempty"`

	// EventName Human readable name of the event related to anomaly..
	EventName *string               `json:"eventName,omitempty"`
	EventType *string               `json:"eventType,omitempty"`
	Exec      *RuntimeV1ExecAnomaly `json:"exec,omitempty"`
	File      *RuntimeV1FileAnomaly `json:"file,omitempty"`
	Id        *string               `json:"id,omitempty"`

	// Namespace Kubernetes Fields.
	Namespace *string `json:"namespace,omitempty"`
	PodName   *string `json:"podName,omitempty"`

	// Process Process name.
	Process *string `json:"process,omitempty"`

	// RuleName Human readable rule name which triggered anomaly.
	RuleName  *string              `json:"ruleName,omitempty"`
	Tcp       *RuntimeV1TCPAnomaly `json:"tcp,omitempty"`
	Timestamp *time.Time           `json:"timestamp,omitempty"`
}

// RuntimeV1AnomalyStatus defines model for runtime.v1.AnomalyStatus.
type RuntimeV1AnomalyStatus string

// RuntimeV1CloseAnomaliesResponse defines model for runtime.v1.CloseAnomaliesResponse.
type RuntimeV1CloseAnomaliesResponse = map[string]interface{}

// RuntimeV1CloseReason defines model for runtime.v1.CloseReason.
type RuntimeV1CloseReason string

// RuntimeV1DNSAnomaly defines model for runtime.v1.DNSAnomaly.
type RuntimeV1DNSAnomaly struct {
	Answers  *[]string `json:"answers,omitempty"`
	Question *string   `json:"question,omitempty"`
}

// RuntimeV1ExecAnomaly defines model for runtime.v1.ExecAnomaly.
type RuntimeV1ExecAnomaly struct {
	Args     *[]string `json:"args,omitempty"`
	FilePath *string   `json:"filePath,omitempty"`
}

// RuntimeV1FileAnomaly defines model for runtime.v1.FileAnomaly.
type RuntimeV1FileAnomaly struct {
	FilePath  *string `json:"filePath,omitempty"`
	Operation *string `json:"operation,omitempty"`
}

// RuntimeV1GetAnomaliesOverviewResponse defines model for runtime.v1.GetAnomaliesOverviewResponse.
type RuntimeV1GetAnomaliesOverviewResponse struct {
	Acked  *int32 `json:"acked,omitempty"`
	Closed *int32 `json:"closed,omitempty"`
	Open   *int32 `json:"open,omitempty"`
}

// RuntimeV1GetAnomaliesResponse defines model for runtime.v1.GetAnomaliesResponse.
type RuntimeV1GetAnomaliesResponse struct {
	Anomalies      *[]RuntimeV1Anomaly `json:"anomalies,omitempty"`
	Count          *int32              `json:"count,omitempty"`
	NextCursor     *string             `json:"nextCursor,omitempty"`
	PreviousCursor *string             `json:"previousCursor,omitempty"`
}

// RuntimeV1GetAnomalyResponse defines model for runtime.v1.GetAnomalyResponse.
type RuntimeV1GetAnomalyResponse struct {
	Anomaly *RuntimeV1Anomaly        `json:"anomaly,omitempty"`
	Events  *[]RuntimeV1AnomalyEvent `json:"events,omitempty"`
}

// RuntimeV1GetKvisordScriptResponse defines model for runtime.v1.GetKvisordScriptResponse.
type RuntimeV1GetKvisordScriptResponse struct {
	Script *string `json:"script,omitempty"`
}

// RuntimeV1TCPAnomaly defines model for runtime.v1.TCPAnomaly.
type RuntimeV1TCPAnomaly struct {
	DstDomain *string `json:"dstDomain,omitempty"`
	DstIp     *string `json:"dstIp,omitempty"`
	DstPort   *int64  `json:"dstPort,omitempty"`
}

// ScheduledrebalancingV1DeleteRebalancingJobResponse defines model for scheduledrebalancing.v1.DeleteRebalancingJobResponse.
type ScheduledrebalancingV1DeleteRebalancingJobResponse = map[string]interface{}

// ScheduledrebalancingV1DeleteRebalancingScheduleResponse defines model for scheduledrebalancing.v1.DeleteRebalancingScheduleResponse.
type ScheduledrebalancingV1DeleteRebalancingScheduleResponse = map[string]interface{}

// ScheduledrebalancingV1ExecutionConditions Defines the conditions which must be met in order to fully execute the plan.
type ScheduledrebalancingV1ExecutionConditions struct {
	// AchievedSavingsPercentage Identifies the minimum percentage of predicted savings that should be achieved.
	// The rebalancing plan will not proceed after creating the nodes if the achieved savings percentage
	// is not achieved.
	// This field's value will not be considered if the initially predicted savings are negative.
	AchievedSavingsPercentage *int32 `json:"achievedSavingsPercentage,omitempty"`
	Enabled                   *bool  `json:"enabled,omitempty"`
}

// ScheduledrebalancingV1JobStatus JobStatus defines rebalancing job's last execution status.
type ScheduledrebalancingV1JobStatus string

// ScheduledrebalancingV1LaunchConfiguration defines model for scheduledrebalancing.v1.LaunchConfiguration.
type ScheduledrebalancingV1LaunchConfiguration struct {
	// NodeTtlSeconds Specifies amount of time since node creation before the node is allowed to be considered for automated rebalancing.
	NodeTtlSeconds *int32 `json:"nodeTtlSeconds,omitempty"`

	// NumTargetedNodes Maximum number of nodes that will be selected for rebalancing.
	NumTargetedNodes   *int32                                    `json:"numTargetedNodes,omitempty"`
	RebalancingOptions *ScheduledrebalancingV1RebalancingOptions `json:"rebalancingOptions,omitempty"`
	Selector           *ScheduledrebalancingV1NodeSelector       `json:"selector,omitempty"`
}

// ScheduledrebalancingV1ListAvailableRebalancingTZResponse defines model for scheduledrebalancing.v1.ListAvailableRebalancingTZResponse.
type ScheduledrebalancingV1ListAvailableRebalancingTZResponse struct {
	TimeZones *[]ScheduledrebalancingV1TimeZone `json:"timeZones,omitempty"`
}

// ScheduledrebalancingV1ListRebalancingJobsResponse defines model for scheduledrebalancing.v1.ListRebalancingJobsResponse.
type ScheduledrebalancingV1ListRebalancingJobsResponse struct {
	Jobs *[]ScheduledrebalancingV1RebalancingJob `json:"jobs,omitempty"`
}

// ScheduledrebalancingV1ListRebalancingSchedulesResponse defines model for scheduledrebalancing.v1.ListRebalancingSchedulesResponse.
type ScheduledrebalancingV1ListRebalancingSchedulesResponse struct {
	Schedules *[]ScheduledrebalancingV1RebalancingSchedule `json:"schedules,omitempty"`
}

// ScheduledrebalancingV1Node defines model for scheduledrebalancing.v1.Node.
type ScheduledrebalancingV1Node struct {
	Id *string `json:"id,omitempty"`
}

// ScheduledrebalancingV1NodeSelector defines model for scheduledrebalancing.v1.NodeSelector.
type ScheduledrebalancingV1NodeSelector struct {
	// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms *[]ScheduledrebalancingV1NodeSelectorTerm `json:"nodeSelectorTerms,omitempty"`
}

// ScheduledrebalancingV1NodeSelectorRequirement A node selector requirement is a selector that contains values, a key, and an operator
// that relates the key and values.
type ScheduledrebalancingV1NodeSelectorRequirement struct {
	// Key The label key that the selector applies to.
	Key *string `json:"key"`

	// Operator Represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string   `json:"operator"`
	Values   *[]string `json:"values,omitempty"`
}

// ScheduledrebalancingV1NodeSelectorTerm defines model for scheduledrebalancing.v1.NodeSelectorTerm.
type ScheduledrebalancingV1NodeSelectorTerm struct {
	MatchExpressions *[]ScheduledrebalancingV1NodeSelectorRequirement `json:"matchExpressions,omitempty"`
	MatchFields      *[]ScheduledrebalancingV1NodeSelectorRequirement `json:"matchFields,omitempty"`
}

// ScheduledrebalancingV1PreviewRebalancingScheduleResponse defines model for scheduledrebalancing.v1.PreviewRebalancingScheduleResponse.
type ScheduledrebalancingV1PreviewRebalancingScheduleResponse struct {
	AffectedNodes *[]ScheduledrebalancingV1Node `json:"affectedNodes,omitempty"`
	WillTriggerAt *[]time.Time                  `json:"willTriggerAt,omitempty"`
}

// ScheduledrebalancingV1RebalancingJob defines model for scheduledrebalancing.v1.RebalancingJob.
type ScheduledrebalancingV1RebalancingJob struct {
	ClusterId *string `json:"clusterId,omitempty"`

	// Enabled Specifies if job is currently enabled; disabled jobs are not triggered.
	Enabled               *bool      `json:"enabled"`
	Id                    *string    `json:"id,omitempty"`
	LastTriggerAt         *time.Time `json:"lastTriggerAt"`
	NextTriggerAt         *time.Time `json:"nextTriggerAt"`
	RebalancingPlanId     *string    `json:"rebalancingPlanId,omitempty"`
	RebalancingScheduleId *string    `json:"rebalancingScheduleId,omitempty"`

	// Status JobStatus defines rebalancing job's last execution status.
	Status *ScheduledrebalancingV1JobStatus `json:"status,omitempty"`
}

// ScheduledrebalancingV1RebalancingOptions defines model for scheduledrebalancing.v1.RebalancingOptions.
type ScheduledrebalancingV1RebalancingOptions struct {
	// EvictGracefully Defines whether the nodes that failed to get drained until a predefined timeout, will be kept with a
	// rebalancing.cast.ai/status=drain-failed annotation instead of forcefully drained.
	EvictGracefully *bool `json:"evictGracefully"`

	// ExecutionConditions Defines the conditions which must be met in order to fully execute the plan.
	ExecutionConditions   *ScheduledrebalancingV1ExecutionConditions `json:"executionConditions,omitempty"`
	KeepDrainTimeoutNodes *bool                                      `json:"keepDrainTimeoutNodes"`

	// MinNodes Minimum number of nodes that should be kept in the cluster after rebalancing.
	MinNodes *int32 `json:"minNodes,omitempty"`
}

// ScheduledrebalancingV1RebalancingSchedule defines model for scheduledrebalancing.v1.RebalancingSchedule.
type ScheduledrebalancingV1RebalancingSchedule struct {
	Id                  *string                                   `json:"id,omitempty"`
	Jobs                *[]ScheduledrebalancingV1RebalancingJob   `json:"jobs,omitempty"`
	LastTriggerAt       *time.Time                                `json:"lastTriggerAt"`
	LaunchConfiguration ScheduledrebalancingV1LaunchConfiguration `json:"launchConfiguration"`
	Name                string                                    `json:"name"`
	NextTriggerAt       *time.Time                                `json:"nextTriggerAt,omitempty"`
	Schedule            ScheduledrebalancingV1Schedule            `json:"schedule"`
	TriggerConditions   ScheduledrebalancingV1TriggerConditions   `json:"triggerConditions"`
}

// ScheduledrebalancingV1RebalancingScheduleUpdate defines model for scheduledrebalancing.v1.RebalancingScheduleUpdate.
type ScheduledrebalancingV1RebalancingScheduleUpdate struct {
	LaunchConfiguration *ScheduledrebalancingV1LaunchConfiguration `json:"launchConfiguration,omitempty"`
	Name                *string                                    `json:"name,omitempty"`
	Schedule            *ScheduledrebalancingV1Schedule            `json:"schedule,omitempty"`
	TriggerConditions   *ScheduledrebalancingV1TriggerConditions   `json:"triggerConditions,omitempty"`
}

// ScheduledrebalancingV1Schedule defines model for scheduledrebalancing.v1.Schedule.
type ScheduledrebalancingV1Schedule struct {
	Cron string `json:"cron"`
}

// ScheduledrebalancingV1TimeZone defines model for scheduledrebalancing.v1.TimeZone.
type ScheduledrebalancingV1TimeZone struct {
	Name   *string `json:"name,omitempty"`
	Offset *string `json:"offset,omitempty"`
}

// ScheduledrebalancingV1TriggerConditions defines model for scheduledrebalancing.v1.TriggerConditions.
type ScheduledrebalancingV1TriggerConditions struct {
	SavingsPercentage *float32 `json:"savingsPercentage,omitempty"`
}

// WorkloadoptimizationV1ApplyType defines model for workloadoptimization.v1.ApplyType.
type WorkloadoptimizationV1ApplyType string

// WorkloadoptimizationV1AssignScalingPolicyWorkloadsResponse defines model for workloadoptimization.v1.AssignScalingPolicyWorkloadsResponse.
type WorkloadoptimizationV1AssignScalingPolicyWorkloadsResponse = map[string]interface{}

// WorkloadoptimizationV1ConfigurationChangedEvent defines model for workloadoptimization.v1.ConfigurationChangedEvent.
type WorkloadoptimizationV1ConfigurationChangedEvent struct {
	// ManagementOption Defines possible options for workload management.
	// READ_ONLY - workload watched (metrics collected), but no actions may be performed by CAST AI.
	// MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
	ManagementOption     WorkloadoptimizationV1ManagementOption     `json:"managementOption"`
	RecommendationConfig WorkloadoptimizationV1RecommendationConfig `json:"recommendationConfig"`
}

// WorkloadoptimizationV1Container defines model for workloadoptimization.v1.Container.
type WorkloadoptimizationV1Container struct {
	// Name Name of the container.
	Name           string                           `json:"name"`
	Recommendation *WorkloadoptimizationV1Resources `json:"recommendation,omitempty"`
	Resources      *WorkloadoptimizationV1Resources `json:"resources,omitempty"`
}

// WorkloadoptimizationV1DeleteWorkloadScalingPolicyResponse defines model for workloadoptimization.v1.DeleteWorkloadScalingPolicyResponse.
type WorkloadoptimizationV1DeleteWorkloadScalingPolicyResponse = map[string]interface{}

// WorkloadoptimizationV1Event defines model for workloadoptimization.v1.Event.
type WorkloadoptimizationV1Event struct {
	ConfigurationChanged  *WorkloadoptimizationV1ConfigurationChangedEvent  `json:"configurationChanged,omitempty"`
	OomKill               *WorkloadoptimizationV1OOMKillEvent               `json:"oomKill,omitempty"`
	RecommendationApplied *WorkloadoptimizationV1RecommendationAppliedEvent `json:"recommendationApplied,omitempty"`
	Surge                 *WorkloadoptimizationV1SurgeEvent                 `json:"surge,omitempty"`
}

// WorkloadoptimizationV1EventContainer defines model for workloadoptimization.v1.EventContainer.
type WorkloadoptimizationV1EventContainer struct {
	Name      string                          `json:"name"`
	Resources WorkloadoptimizationV1Resources `json:"resources"`
}

// WorkloadoptimizationV1EventType EventType defines possible types for workload events.
type WorkloadoptimizationV1EventType string

// WorkloadoptimizationV1GetAgentStatusResponse defines model for workloadoptimization.v1.GetAgentStatusResponse.
type WorkloadoptimizationV1GetAgentStatusResponse struct {
	// Status AgentStatus defines the status of workload-autoscaler.
	Status WorkloadoptimizationV1GetAgentStatusResponseAgentStatus `json:"status"`
}

// WorkloadoptimizationV1GetAgentStatusResponseAgentStatus AgentStatus defines the status of workload-autoscaler.
type WorkloadoptimizationV1GetAgentStatusResponseAgentStatus string

// WorkloadoptimizationV1GetInstallCmdResponse defines model for workloadoptimization.v1.GetInstallCmdResponse.
type WorkloadoptimizationV1GetInstallCmdResponse struct {
	Script string `json:"script"`
}

// WorkloadoptimizationV1GetWorkloadResponse defines model for workloadoptimization.v1.GetWorkloadResponse.
type WorkloadoptimizationV1GetWorkloadResponse struct {
	Metrics  *WorkloadoptimizationV1WorkloadMetrics `json:"metrics,omitempty"`
	Workload WorkloadoptimizationV1Workload         `json:"workload"`
}

// WorkloadoptimizationV1InitiatedBy defines model for workloadoptimization.v1.InitiatedBy.
type WorkloadoptimizationV1InitiatedBy struct {
	Email *string `json:"email"`
	Id    string  `json:"id"`
	Name  *string `json:"name"`
}

// WorkloadoptimizationV1KeyValuePair defines model for workloadoptimization.v1.KeyValuePair.
type WorkloadoptimizationV1KeyValuePair struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// WorkloadoptimizationV1ListWorkloadEventsResponse defines model for workloadoptimization.v1.ListWorkloadEventsResponse.
type WorkloadoptimizationV1ListWorkloadEventsResponse struct {
	Items []WorkloadoptimizationV1WorkloadEvent `json:"items"`

	// NextCursor The token to request the next page of results.
	NextCursor *string `json:"nextCursor"`
}

// WorkloadoptimizationV1ListWorkloadScalingPoliciesResponse defines model for workloadoptimization.v1.ListWorkloadScalingPoliciesResponse.
type WorkloadoptimizationV1ListWorkloadScalingPoliciesResponse struct {
	Items []WorkloadoptimizationV1WorkloadScalingPolicy `json:"items"`
}

// WorkloadoptimizationV1ListWorkloadsResponse defines model for workloadoptimization.v1.ListWorkloadsResponse.
type WorkloadoptimizationV1ListWorkloadsResponse struct {
	Workloads []WorkloadoptimizationV1Workload `json:"workloads"`
}

// WorkloadoptimizationV1ManagementOption Defines possible options for workload management.
// READ_ONLY - workload watched (metrics collected), but no actions may be performed by CAST AI.
// MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
type WorkloadoptimizationV1ManagementOption string

// WorkloadoptimizationV1NewWorkloadScalingPolicy defines model for workloadoptimization.v1.NewWorkloadScalingPolicy.
type WorkloadoptimizationV1NewWorkloadScalingPolicy struct {
	ApplyType              WorkloadoptimizationV1ApplyType              `json:"applyType"`
	Name                   string                                       `json:"name"`
	RecommendationPolicies WorkloadoptimizationV1RecommendationPolicies `json:"recommendationPolicies"`
}

// WorkloadoptimizationV1OOMKillEvent defines model for workloadoptimization.v1.OOMKillEvent.
type WorkloadoptimizationV1OOMKillEvent struct {
	Containers []WorkloadoptimizationV1EventContainer `json:"containers"`
}

// WorkloadoptimizationV1RecommendationAppliedEvent defines model for workloadoptimization.v1.RecommendationAppliedEvent.
type WorkloadoptimizationV1RecommendationAppliedEvent struct {
	Current  WorkloadoptimizationV1RecommendationAppliedEventChange `json:"current"`
	Previous WorkloadoptimizationV1RecommendationAppliedEventChange `json:"previous"`
}

// WorkloadoptimizationV1RecommendationAppliedEventChange defines model for workloadoptimization.v1.RecommendationAppliedEvent.Change.
type WorkloadoptimizationV1RecommendationAppliedEventChange struct {
	Containers *[]WorkloadoptimizationV1EventContainer `json:"containers,omitempty"`
}

// WorkloadoptimizationV1RecommendationConfig defines model for workloadoptimization.v1.RecommendationConfig.
type WorkloadoptimizationV1RecommendationConfig struct {
	Cpu    WorkloadoptimizationV1ResourceConfig `json:"cpu"`
	Memory WorkloadoptimizationV1ResourceConfig `json:"memory"`
}

// WorkloadoptimizationV1RecommendationPolicies defines model for workloadoptimization.v1.RecommendationPolicies.
type WorkloadoptimizationV1RecommendationPolicies struct {
	Cpu WorkloadoptimizationV1ResourcePolicies `json:"cpu"`

	// ManagementOption Defines possible options for workload management.
	// READ_ONLY - workload watched (metrics collected), but no actions may be performed by CAST AI.
	// MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
	ManagementOption WorkloadoptimizationV1ManagementOption `json:"managementOption"`
	Memory           WorkloadoptimizationV1ResourcePolicies `json:"memory"`
}

// WorkloadoptimizationV1ResourceConfig defines model for workloadoptimization.v1.ResourceConfig.
type WorkloadoptimizationV1ResourceConfig struct {
	// ApplyThreshold The threshold of when to apply the recommendation - when diff of current requests and recommendation is greater than this, apply the recommendation.
	ApplyThreshold *float32 `json:"applyThreshold"`

	// Args The arguments for the function - i.e. for a quantile, this should be a [0, 1] float.
	Args []string `json:"args"`

	// Function The function which to use when calculating the resource recommendation.
	// QUANTILE - the quantile function.
	// MAX - the max function.
	Function WorkloadoptimizationV1ResourceConfigFunction `json:"function"`

	// Max Max values for the recommendation. For memory - this is in MiB, for CPU - this is in cores.
	// If not set, there will be no upper bound for the recommendation (default behaviour).
	Max *float64 `json:"max"`

	// Min Min values for the recommendation. For memory - this is in MiB, for CPU - this is in cores.
	// If not set, there will be no lower bound for the recommendation (default behaviour).
	Min *float64 `json:"min"`

	// Overhead The overhead for the recommendation, the formula is: (1 + overhead) * function(args).
	Overhead float32 `json:"overhead"`
}

// WorkloadoptimizationV1ResourceConfigFunction The function which to use when calculating the resource recommendation.
// QUANTILE - the quantile function.
// MAX - the max function.
type WorkloadoptimizationV1ResourceConfigFunction string

// WorkloadoptimizationV1ResourceConfigUpdate defines model for workloadoptimization.v1.ResourceConfigUpdate.
type WorkloadoptimizationV1ResourceConfigUpdate struct {
	// Max Max values for the recommendation. For memory - this is in MiB, for CPU - this is in cores.
	// If not set, there will be no upper bound for the recommendation (default behaviour).
	Max *float64 `json:"max"`

	// Min Min values for the recommendation. For memory - this is in MiB, for CPU - this is in cores.
	// If not set, there will be no lower bound for the recommendation (default behaviour).
	Min *float64 `json:"min"`
}

// WorkloadoptimizationV1ResourceMetrics defines model for workloadoptimization.v1.ResourceMetrics.
type WorkloadoptimizationV1ResourceMetrics struct {
	Max       float64   `json:"max"`
	Min       float64   `json:"min"`
	P25       float64   `json:"p25"`
	P50       float64   `json:"p50"`
	P75       float64   `json:"p75"`
	Rec       float64   `json:"rec"`
	Req       float64   `json:"req"`
	Timestamp time.Time `json:"timestamp"`
}

// WorkloadoptimizationV1ResourcePolicies defines model for workloadoptimization.v1.ResourcePolicies.
type WorkloadoptimizationV1ResourcePolicies struct {
	// ApplyThreshold The threshold of when to apply the recommendation - when diff of current requests and recommendation is greater than this, apply the recommendation.
	ApplyThreshold float32 `json:"applyThreshold"`

	// Args The arguments for the function - i.e. for a quantile, this should be a [0, 1] float.
	Args []string `json:"args"`

	// Function The function which to use when calculating the resource recommendation.
	// QUANTILE - the quantile function.
	// MAX - the max function.
	Function WorkloadoptimizationV1ResourcePoliciesFunction `json:"function"`

	// Overhead The overhead for the recommendation, the formula is: (1 + overhead) * function(args).
	Overhead float32 `json:"overhead"`
}

// WorkloadoptimizationV1ResourcePoliciesFunction The function which to use when calculating the resource recommendation.
// QUANTILE - the quantile function.
// MAX - the max function.
type WorkloadoptimizationV1ResourcePoliciesFunction string

// WorkloadoptimizationV1ResourceQuantity defines model for workloadoptimization.v1.ResourceQuantity.
type WorkloadoptimizationV1ResourceQuantity struct {
	CpuCores  *float64 `json:"cpuCores"`
	MemoryGib *float64 `json:"memoryGib"`
}

// WorkloadoptimizationV1Resources defines model for workloadoptimization.v1.Resources.
type WorkloadoptimizationV1Resources struct {
	Limits   *WorkloadoptimizationV1ResourceQuantity `json:"limits,omitempty"`
	Requests *WorkloadoptimizationV1ResourceQuantity `json:"requests,omitempty"`
}

// WorkloadoptimizationV1SurgeContainer defines model for workloadoptimization.v1.SurgeContainer.
type WorkloadoptimizationV1SurgeContainer struct {
	Name  string                                 `json:"name"`
	Surge WorkloadoptimizationV1ResourceQuantity `json:"surge"`
}

// WorkloadoptimizationV1SurgeEvent defines model for workloadoptimization.v1.SurgeEvent.
type WorkloadoptimizationV1SurgeEvent struct {
	Containers []WorkloadoptimizationV1SurgeContainer `json:"containers"`
}

// WorkloadoptimizationV1UpdateWorkload defines model for workloadoptimization.v1.UpdateWorkload.
type WorkloadoptimizationV1UpdateWorkload struct {
	// ManagementOption Defines possible options for workload management.
	// READ_ONLY - workload watched (metrics collected), but no actions may be performed by CAST AI.
	// MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
	ManagementOption     *WorkloadoptimizationV1ManagementOption     `json:"managementOption,omitempty"`
	RecommendationConfig *WorkloadoptimizationV1RecommendationConfig `json:"recommendationConfig,omitempty"`
	ScalingPolicyId      *string                                     `json:"scalingPolicyId"`
	WorkloadConfig       *WorkloadoptimizationV1WorkloadConfigUpdate `json:"workloadConfig,omitempty"`
}

// WorkloadoptimizationV1UpdateWorkloadResponse defines model for workloadoptimization.v1.UpdateWorkloadResponse.
type WorkloadoptimizationV1UpdateWorkloadResponse struct {
	Workload *WorkloadoptimizationV1Workload `json:"workload,omitempty"`
}

// WorkloadoptimizationV1UpdateWorkloadScalingPolicy defines model for workloadoptimization.v1.UpdateWorkloadScalingPolicy.
type WorkloadoptimizationV1UpdateWorkloadScalingPolicy struct {
	ApplyType              WorkloadoptimizationV1ApplyType              `json:"applyType"`
	Name                   string                                       `json:"name"`
	RecommendationPolicies WorkloadoptimizationV1RecommendationPolicies `json:"recommendationPolicies"`
}

// WorkloadoptimizationV1Workload defines model for workloadoptimization.v1.Workload.
type WorkloadoptimizationV1Workload struct {
	// Annotations Annotations as defined on the workload manifest. These are annotations from the controller meta, not the pod meta.
	Annotations []WorkloadoptimizationV1KeyValuePair `json:"annotations"`
	ClusterId   string                               `json:"clusterId"`

	// Containers Workload containers.
	Containers []WorkloadoptimizationV1Container `json:"containers"`
	CreatedAt  time.Time                         `json:"createdAt"`

	// DesiredPodCount Desired pod count stores the number of pods the workload should have, as defined on the workload spec.
	DesiredPodCount int32 `json:"desiredPodCount"`

	// Error Workload error state (if any).
	// Errors can happen if CAST AI is unable to apply the recommendation for the workload.
	Error *string `json:"error"`
	Group string  `json:"group"`
	Id    string  `json:"id"`
	Kind  string  `json:"kind"`

	// Labels Labels as defined on the workload manifest. These are labels from the controller meta, not the pod meta.
	Labels []WorkloadoptimizationV1KeyValuePair `json:"labels"`

	// ManagementOption Defines possible options for workload management.
	// READ_ONLY - workload watched (metrics collected), but no actions may be performed by CAST AI.
	// MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
	ManagementOption WorkloadoptimizationV1ManagementOption `json:"managementOption"`
	Name             string                                 `json:"name"`
	Namespace        string                                 `json:"namespace"`
	OrganizationId   string                                 `json:"organizationId"`

	// PodCount Pod count stores the *running* count of pods of the workload.
	PodCount int32 `json:"podCount"`

	// RecommendationConfidence Defines the confidence of the recommendation. Value between 0 and 1. 1 means max confidence, 0 means no confidence.
	// This value indicates how many metrics were collected versus expected for the workload, given the recommendation configuration.
	RecommendationConfidence *float32                                   `json:"recommendationConfidence"`
	RecommendationConfig     WorkloadoptimizationV1RecommendationConfig `json:"recommendationConfig"`
	ScalingPolicyId          string                                     `json:"scalingPolicyId"`
	UpdatedAt                time.Time                                  `json:"updatedAt"`
	Version                  string                                     `json:"version"`
	WorkloadConfig           WorkloadoptimizationV1WorkloadConfig       `json:"workloadConfig"`
}

// WorkloadoptimizationV1WorkloadConfig defines model for workloadoptimization.v1.WorkloadConfig.
type WorkloadoptimizationV1WorkloadConfig struct {
	Cpu WorkloadoptimizationV1ResourceConfig `json:"cpu"`

	// ManagementOption Defines possible options for workload management.
	// READ_ONLY - workload watched (metrics collected), but no actions may be performed by CAST AI.
	// MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
	ManagementOption WorkloadoptimizationV1ManagementOption `json:"managementOption"`
	Memory           WorkloadoptimizationV1ResourceConfig   `json:"memory"`
}

// WorkloadoptimizationV1WorkloadConfigUpdate defines model for workloadoptimization.v1.WorkloadConfigUpdate.
type WorkloadoptimizationV1WorkloadConfigUpdate struct {
	Cpu *WorkloadoptimizationV1ResourceConfigUpdate `json:"cpu,omitempty"`

	// ManagementOption Defines possible options for workload management.
	// READ_ONLY - workload watched (metrics collected), but no actions may be performed by CAST AI.
	// MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
	ManagementOption *WorkloadoptimizationV1ManagementOption     `json:"managementOption,omitempty"`
	Memory           *WorkloadoptimizationV1ResourceConfigUpdate `json:"memory,omitempty"`
}

// WorkloadoptimizationV1WorkloadEvent defines model for workloadoptimization.v1.WorkloadEvent.
type WorkloadoptimizationV1WorkloadEvent struct {
	ClusterId      string                             `json:"clusterId"`
	CreatedAt      time.Time                          `json:"createdAt"`
	Event          WorkloadoptimizationV1Event        `json:"event"`
	Id             string                             `json:"id"`
	InitiatedBy    *WorkloadoptimizationV1InitiatedBy `json:"initiatedBy,omitempty"`
	OrganizationId string                             `json:"organizationId"`

	// Type EventType defines possible types for workload events.
	Type     WorkloadoptimizationV1EventType             `json:"type"`
	Workload WorkloadoptimizationV1WorkloadEventWorkload `json:"workload"`
}

// WorkloadoptimizationV1WorkloadEventWorkload defines model for workloadoptimization.v1.WorkloadEvent.Workload.
type WorkloadoptimizationV1WorkloadEventWorkload struct {
	Id        string `json:"id"`
	Kind      string `json:"kind"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

// WorkloadoptimizationV1WorkloadMetricContainer defines model for workloadoptimization.v1.WorkloadMetricContainer.
type WorkloadoptimizationV1WorkloadMetricContainer struct {
	CpuCores  []WorkloadoptimizationV1ResourceMetrics `json:"cpuCores"`
	MemoryGib []WorkloadoptimizationV1ResourceMetrics `json:"memoryGib"`
	Name      string                                  `json:"name"`
}

// WorkloadoptimizationV1WorkloadMetrics defines model for workloadoptimization.v1.WorkloadMetrics.
type WorkloadoptimizationV1WorkloadMetrics struct {
	Containers []WorkloadoptimizationV1WorkloadMetricContainer `json:"containers"`
}

// WorkloadoptimizationV1WorkloadScalingPolicy defines model for workloadoptimization.v1.WorkloadScalingPolicy.
type WorkloadoptimizationV1WorkloadScalingPolicy struct {
	ApplyType              WorkloadoptimizationV1ApplyType              `json:"applyType"`
	ClusterId              string                                       `json:"clusterId"`
	CreatedAt              time.Time                                    `json:"createdAt"`
	Id                     string                                       `json:"id"`
	IsDefault              bool                                         `json:"isDefault"`
	IsReadonly             bool                                         `json:"isReadonly"`
	Name                   string                                       `json:"name"`
	OrganizationId         string                                       `json:"organizationId"`
	RecommendationPolicies WorkloadoptimizationV1RecommendationPolicies `json:"recommendationPolicies"`
	UpdatedAt              time.Time                                    `json:"updatedAt"`
}

// ReturnTo defines model for returnTo.
type ReturnTo = string

// AutoscalerAPIGetAgentScriptParams defines parameters for AutoscalerAPIGetAgentScript.
type AutoscalerAPIGetAgentScriptParams struct {
	// EksRegion AWS region of your EKS cluster.
	EksRegion *string `form:"eks.region,omitempty" json:"eks.region,omitempty"`

	// EksAccountId Your AWS account id. Can be retrieved by executing `aws sts get-caller-identity`.
	EksAccountId *string `form:"eks.accountId,omitempty" json:"eks.accountId,omitempty"`

	// EksClusterName The name of your EKS cluster.
	EksClusterName *string `form:"eks.clusterName,omitempty" json:"eks.clusterName,omitempty"`

	// GkeRegion GCP region of your GKE cluster.
	GkeRegion *string `form:"gke.region,omitempty" json:"gke.region,omitempty"`

	// GkeProjectId GCP project id in which your GKE cluster is created.
	GkeProjectId *string `form:"gke.projectId,omitempty" json:"gke.projectId,omitempty"`

	// GkeClusterName The name of your GKE cluster.
	GkeClusterName *string `form:"gke.clusterName,omitempty" json:"gke.clusterName,omitempty"`

	// GkeLocation Location of your GKE cluster.
	GkeLocation *string `form:"gke.location,omitempty" json:"gke.location,omitempty"`

	// Provider Provider of the cluster.
	Provider *AutoscalerAPIGetAgentScriptParamsProvider `form:"provider,omitempty" json:"provider,omitempty"`

	// KopsCsp The Cloud Service Provider (CSP) of your kOps cluster.
	//
	// Possible values are: `aws`, `gcp`.
	//
	//  - invalid: Invalid.
	//  - aws: Amazon web services.
	//  - gcp: Google cloud provider.
	//  - azure: Microsoft Azure.
	KopsCsp *AutoscalerAPIGetAgentScriptParamsKopsCsp `form:"kops.csp,omitempty" json:"kops.csp,omitempty"`

	// KopsRegion The region of your kOps cluster. Region is CSP specific.
	KopsRegion *string `form:"kops.region,omitempty" json:"kops.region,omitempty"`

	// KopsClusterName The name of your kOps cluster.
	KopsClusterName *string `form:"kops.clusterName,omitempty" json:"kops.clusterName,omitempty"`

	// KopsStateStore The kOps cluster state store. Only remote S3 state is supported at the moment.
	KopsStateStore *string `form:"kops.stateStore,omitempty" json:"kops.stateStore,omitempty"`

	// AksLocation Azure location of your AKS cluster.
	AksLocation *string `form:"aks.location,omitempty" json:"aks.location,omitempty"`

	// AksNodeResourceGroup Azure resource group where AKS nodes are deployed.
	AksNodeResourceGroup *string `form:"aks.nodeResourceGroup,omitempty" json:"aks.nodeResourceGroup,omitempty"`

	// AksSubscriptionId Azure account subscription id.
	AksSubscriptionId *string `form:"aks.subscriptionId,omitempty" json:"aks.subscriptionId,omitempty"`

	// OpenshiftCsp The Cloud Service Provider (CSP) of your OpenShift cluster.
	//
	// Possible values are: `aws`.
	//
	//  - invalid: Invalid.
	//  - aws: Amazon web services.
	//  - gcp: Google cloud provider.
	//  - azure: Microsoft Azure.
	OpenshiftCsp *AutoscalerAPIGetAgentScriptParamsOpenshiftCsp `form:"openshift.csp,omitempty" json:"openshift.csp,omitempty"`

	// OpenshiftRegion The region of your OpenShift cluster. Region is CSP specific.
	OpenshiftRegion *string `form:"openshift.region,omitempty" json:"openshift.region,omitempty"`

	// OpenshiftClusterName The name of your OpenShift cluster.
	OpenshiftClusterName *string `form:"openshift.clusterName,omitempty" json:"openshift.clusterName,omitempty"`

	// OpenshiftInternalId The OpenShift cluster ID. It can be found in the ClusterVersion object.
	//
	// [Link to docs](https://docs.openshift.com/container-platform/4.8/support/gathering-cluster-data.html#support-get-cluster-id_gathering-cluster-data).
	OpenshiftInternalId *string `form:"openshift.internalId,omitempty" json:"openshift.internalId,omitempty"`

	// OpenshiftRunAsUser The uid of the user that runs the agent pod.
	OpenshiftRunAsUser *string `form:"openshift.runAsUser,omitempty" json:"openshift.runAsUser,omitempty"`

	// OpenshiftRunAsGroup The gid of the user that runs the agent pod.
	OpenshiftRunAsGroup *string `form:"openshift.runAsGroup,omitempty" json:"openshift.runAsGroup,omitempty"`

	// OpenshiftFsGroup The gid of the user that owns the agent pod's volumes.
	OpenshiftFsGroup *string `form:"openshift.fsGroup,omitempty" json:"openshift.fsGroup,omitempty"`
}

// AutoscalerAPIGetAgentScriptParamsProvider defines parameters for AutoscalerAPIGetAgentScript.
type AutoscalerAPIGetAgentScriptParamsProvider string

// AutoscalerAPIGetAgentScriptParamsKopsCsp defines parameters for AutoscalerAPIGetAgentScript.
type AutoscalerAPIGetAgentScriptParamsKopsCsp string

// AutoscalerAPIGetAgentScriptParamsOpenshiftCsp defines parameters for AutoscalerAPIGetAgentScript.
type AutoscalerAPIGetAgentScriptParamsOpenshiftCsp string

// AuditAPIListAuditEntriesParams defines parameters for AuditAPIListAuditEntries.
type AuditAPIListAuditEntriesParams struct {
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// ClusterId the cluster id to filter by
	ClusterId *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`

	// FromDate from_date is a timestamp to filter audits from
	FromDate *time.Time `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate to_date is a timestamp to filter audits to
	ToDate *time.Time `form:"toDate,omitempty" json:"toDate,omitempty"`

	// Labels labels is a map of labels to filter audits by
	//
	// This is a request variable of the map type. The query format is "map_name[key]=value", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age["bob"]=18
	Labels *string `form:"labels,omitempty" json:"labels,omitempty"`

	// Operation operation is a string to filter audits by
	Operation *string `form:"operation,omitempty" json:"operation,omitempty"`

	// InitiatedById initiated_by_id is a string to filter audits by ID of the user who initiated the operation
	InitiatedById *string `form:"initiatedById,omitempty" json:"initiatedById,omitempty"`

	// InitiatedByEmail initiated_by_email is a string to filter audits by email of the user who initiated the operation
	InitiatedByEmail *string `form:"initiatedByEmail,omitempty" json:"initiatedByEmail,omitempty"`
}

// LoginParams defines parameters for Login.
type LoginParams struct {
	// ReturnTo URL to redirect browser to after operation completes
	ReturnTo *ReturnTo `form:"returnTo,omitempty" json:"returnTo,omitempty"`

	// Auth0returnTo optional override for URL to redirect browser from auth0 back to backend, for situations where backend is being reached via proxy
	Auth0returnTo *string `form:"auth0returnTo,omitempty" json:"auth0returnTo,omitempty"`

	// ScreenHint optional hint for which screen to use when redirecting to authentication pages.
	ScreenHint *string `form:"screenHint,omitempty" json:"screenHint,omitempty"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	// ReturnTo URL to redirect browser to after operation completes
	ReturnTo *ReturnTo `form:"returnTo,omitempty" json:"returnTo,omitempty"`
}

// AuthTokenAPIListAuthTokensParams defines parameters for AuthTokenAPIListAuthTokens.
type AuthTokenAPIListAuthTokensParams struct {
	// UserId User id to filter by, if this is set we will only return tokens that have this user id.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// ServiceAccountId Service account id to filter by, if this is set we will only return tokens that have this service account id ignoring users_id.
	ServiceAccountId *string `form:"serviceAccountId,omitempty" json:"serviceAccountId,omitempty"`
}

// BillingSsoParams defines parameters for BillingSso.
type BillingSsoParams struct {
	// ForwardUrl Desired destination URL within ChargeBee.
	// See https://apidocs.chargebee.com/docs/api/portal_sessions#create_a_portal_session_forward_url for more details.
	ForwardUrl *string `form:"forwardUrl,omitempty" json:"forwardUrl,omitempty"`
}

// SubscriptionCheckoutParams defines parameters for SubscriptionCheckout.
type SubscriptionCheckoutParams struct {
	// Plan Checkout specific subscription plan.
	Plan *string `form:"plan,omitempty" json:"plan,omitempty"`
}

// BillingAPIGetUsageReportParams defines parameters for BillingAPIGetUsageReport.
type BillingAPIGetUsageReportParams struct {
	// PeriodFrom Start time of resource usage period.
	PeriodFrom time.Time `form:"period.from" json:"period.from"`

	// PeriodTo End time of resource usage period.
	PeriodTo time.Time `form:"period.to" json:"period.to"`
}

// WorkloadOptimizationAPIListWorkloadEventsParams defines parameters for WorkloadOptimizationAPIListWorkloadEvents.
type WorkloadOptimizationAPIListWorkloadEventsParams struct {
	WorkloadId *string `form:"workloadId,omitempty" json:"workloadId,omitempty"`
	PageLimit  *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor   *string                                                `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
	FromDate     *time.Time                                             `form:"fromDate,omitempty" json:"fromDate,omitempty"`
	ToDate       *time.Time                                             `form:"toDate,omitempty" json:"toDate,omitempty"`
	WorkloadName *string                                                `form:"workloadName,omitempty" json:"workloadName,omitempty"`
	Type         *[]WorkloadOptimizationAPIListWorkloadEventsParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// WorkloadOptimizationAPIListWorkloadEventsParamsType defines parameters for WorkloadOptimizationAPIListWorkloadEvents.
type WorkloadOptimizationAPIListWorkloadEventsParamsType string

// WorkloadOptimizationAPIGetWorkloadParams defines parameters for WorkloadOptimizationAPIGetWorkload.
type WorkloadOptimizationAPIGetWorkloadParams struct {
	IncludeMetrics *bool      `form:"includeMetrics,omitempty" json:"includeMetrics,omitempty"`
	FromTime       *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime         *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// AllocationGroupAPIGetAllocationGroupCostTimedSummariesParams defines parameters for AllocationGroupAPIGetAllocationGroupCostTimedSummaries.
type AllocationGroupAPIGetAllocationGroupCostTimedSummariesParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// AllocationGroupAPIGetAllocationGroupCostSummariesParams defines parameters for AllocationGroupAPIGetAllocationGroupCostSummaries.
type AllocationGroupAPIGetAllocationGroupCostSummariesParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// AllocationGroupAPIListAllocationGroupsParams defines parameters for AllocationGroupAPIListAllocationGroups.
type AllocationGroupAPIListAllocationGroupsParams struct {
	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// AllocationGroupAPIGetAllocationGroupTotalCostTimedParams defines parameters for AllocationGroupAPIGetAllocationGroupTotalCostTimed.
type AllocationGroupAPIGetAllocationGroupTotalCostTimedParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
	PageLimit  *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryParams defines parameters for AllocationGroupAPIGetCostAllocationGroupDataTransferSummary.
type AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// AllocationGroupAPIGetAllocationGroupEfficiencySummaryParams defines parameters for AllocationGroupAPIGetAllocationGroupEfficiencySummary.
type AllocationGroupAPIGetAllocationGroupEfficiencySummaryParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// AllocationGroupAPIGetCostAllocationGroupSummaryParams defines parameters for AllocationGroupAPIGetCostAllocationGroupSummary.
type AllocationGroupAPIGetCostAllocationGroupSummaryParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsParams defines parameters for AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloads.
type AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// AllocationGroupAPIGetCostAllocationGroupWorkloadsParams defines parameters for AllocationGroupAPIGetCostAllocationGroupWorkloads.
type AllocationGroupAPIGetCostAllocationGroupWorkloadsParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// ClusterIds Cluster IDs for filtering. Leave empty for the full list.
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// ClusterReportAPIGetClusterCostReportParams defines parameters for ClusterReportAPIGetClusterCostReport.
type ClusterReportAPIGetClusterCostReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
}

// WorkloadReportAPIGetWorkloadDataTransferCostParams defines parameters for WorkloadReportAPIGetWorkloadDataTransferCost.
type WorkloadReportAPIGetWorkloadDataTransferCostParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds          *int32                                                                  `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
	FilterWorkloadNames  *[]string                                                               `form:"filter.workloadNames,omitempty" json:"filter.workloadNames,omitempty"`
	FilterLabelsOperator *WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperator `form:"filter.labelsOperator,omitempty" json:"filter.labelsOperator,omitempty"`
	FilterWorkloadTypes  *[]string                                                               `form:"filter.workloadTypes,omitempty" json:"filter.workloadTypes,omitempty"`
	FilterNamespaces     *[]string                                                               `form:"filter.namespaces,omitempty" json:"filter.namespaces,omitempty"`
	PageLimit            *string                                                                 `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperator defines parameters for WorkloadReportAPIGetWorkloadDataTransferCost.
type WorkloadReportAPIGetWorkloadDataTransferCostParamsFilterLabelsOperator string

// WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder defines parameters for WorkloadReportAPIGetWorkloadDataTransferCost.
type WorkloadReportAPIGetWorkloadDataTransferCostParamsSortOrder string

// WorkloadReportAPIGetWorkloadDataTransferCost2Params defines parameters for WorkloadReportAPIGetWorkloadDataTransferCost2.
type WorkloadReportAPIGetWorkloadDataTransferCost2Params struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32  `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
	PageLimit   *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder defines parameters for WorkloadReportAPIGetWorkloadDataTransferCost2.
type WorkloadReportAPIGetWorkloadDataTransferCost2ParamsSortOrder string

// ClusterReportAPIGetClusterEfficiencyReportParams defines parameters for ClusterReportAPIGetClusterEfficiencyReport.
type ClusterReportAPIGetClusterEfficiencyReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
}

// ClusterReportAPIGetClusterCostHistoryParams defines parameters for ClusterReportAPIGetClusterCostHistory.
type ClusterReportAPIGetClusterCostHistoryParams struct {
	// FromDate Filter items to include from specified time.
	FromDate time.Time `form:"fromDate" json:"fromDate"`

	// ToDate Filter items to include up to specified time.
	ToDate time.Time `form:"toDate" json:"toDate"`
}

// NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams defines parameters for NamespaceReportAPIGetClusterNamespaceCostReportSummaries.
type NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime   time.Time `form:"endTime" json:"endTime"`
	PageLimit *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder defines parameters for NamespaceReportAPIGetClusterNamespaceCostReportSummaries.
type NamespaceReportAPIGetClusterNamespaceCostReportSummariesParamsSortOrder string

// NamespaceReportAPIGetClusterNamespaceDataTransferCostParams defines parameters for NamespaceReportAPIGetClusterNamespaceDataTransferCost.
type NamespaceReportAPIGetClusterNamespaceDataTransferCostParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// FilterNamespace Filter items by namespace. Acts like a case-insensitive substring search.
	FilterNamespace *string `form:"filter.namespace,omitempty" json:"filter.namespace,omitempty"`
	PageLimit       *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder defines parameters for NamespaceReportAPIGetClusterNamespaceDataTransferCost.
type NamespaceReportAPIGetClusterNamespaceDataTransferCostParamsSortOrder string

// NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostParams defines parameters for NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCost.
type NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime   time.Time `form:"endTime" json:"endTime"`
	PageLimit *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// NamespaceReportAPIGetClusterNamespaceCostReportParams defines parameters for NamespaceReportAPIGetClusterNamespaceCostReport.
type NamespaceReportAPIGetClusterNamespaceCostReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32  `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
	PageLimit   *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// NamespaceReportAPIGetSingleNamespaceCostReportParams defines parameters for NamespaceReportAPIGetSingleNamespaceCostReport.
type NamespaceReportAPIGetSingleNamespaceCostReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// WorkloadReportAPIGetSingleWorkloadCostReportParams defines parameters for WorkloadReportAPIGetSingleWorkloadCostReport.
type WorkloadReportAPIGetSingleWorkloadCostReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
}

// WorkloadReportAPIGetSingleWorkloadDataTransferCostParams defines parameters for WorkloadReportAPIGetSingleWorkloadDataTransferCost.
type WorkloadReportAPIGetSingleWorkloadDataTransferCostParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
}

// WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameParams defines parameters for WorkloadReportAPIGetClusterWorkloadEfficiencyReportByName.
type WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`

	// IncludeCurrent Optional parameter marking whether the current state for workload and its containers should be returned.
	IncludeCurrent *bool `form:"includeCurrent,omitempty" json:"includeCurrent,omitempty"`

	// IncludeHistory Optional parameter marking whether the history of workload and its containers should be returned.
	IncludeHistory *bool `form:"includeHistory,omitempty" json:"includeHistory,omitempty"`
}

// WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryParams defines parameters for WorkloadReportAPIGetWorkloadTrafficDestinationsHistory.
type WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`

	// Limit Limit the number of items in destinations. Default value is 0 = UNLIMITED.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// WorkloadReportAPIGetWorkloadTrafficDestinationsParams defines parameters for WorkloadReportAPIGetWorkloadTrafficDestinations.
type WorkloadReportAPIGetWorkloadTrafficDestinationsParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`

	// Limit Limit the number of items in destinations. Default value is 0 = UNLIMITED.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ReportConfigurationAPIGetReportingCapabilitiesParams defines parameters for ReportConfigurationAPIGetReportingCapabilities.
type ReportConfigurationAPIGetReportingCapabilitiesParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// ClusterReportAPIGetClusterResourceUsageParams defines parameters for ClusterReportAPIGetClusterResourceUsage.
type ClusterReportAPIGetClusterResourceUsageParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
}

// ClusterReportAPIGetClusterSavingsReportParams defines parameters for ClusterReportAPIGetClusterSavingsReport.
type ClusterReportAPIGetClusterSavingsReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32 `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
}

// WorkloadReportAPIGetWorkloadCostSummariesParams defines parameters for WorkloadReportAPIGetWorkloadCostSummaries.
type WorkloadReportAPIGetWorkloadCostSummariesParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime   time.Time `form:"endTime" json:"endTime"`
	PageLimit *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`

	// LabelsToInclude Labels to be included for each workload.
	LabelsToInclude *[]string `form:"labelsToInclude,omitempty" json:"labelsToInclude,omitempty"`
}

// WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder defines parameters for WorkloadReportAPIGetWorkloadCostSummaries.
type WorkloadReportAPIGetWorkloadCostSummariesParamsSortOrder string

// WorkloadReportAPIGetClusterWorkloadReportParams defines parameters for WorkloadReportAPIGetClusterWorkloadReport.
type WorkloadReportAPIGetClusterWorkloadReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds          *int32                                                               `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
	FilterWorkloadNames  *[]string                                                            `form:"filter.workloadNames,omitempty" json:"filter.workloadNames,omitempty"`
	FilterLabelsOperator *WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperator `form:"filter.labelsOperator,omitempty" json:"filter.labelsOperator,omitempty"`
	FilterWorkloadTypes  *[]string                                                            `form:"filter.workloadTypes,omitempty" json:"filter.workloadTypes,omitempty"`
	FilterNamespaces     *[]string                                                            `form:"filter.namespaces,omitempty" json:"filter.namespaces,omitempty"`
	PageLimit            *string                                                              `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// LabelsToInclude Labels to be included for each workload.
	LabelsToInclude *[]string `form:"labelsToInclude,omitempty" json:"labelsToInclude,omitempty"`
}

// WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperator defines parameters for WorkloadReportAPIGetClusterWorkloadReport.
type WorkloadReportAPIGetClusterWorkloadReportParamsFilterLabelsOperator string

// WorkloadReportAPIGetClusterWorkloadReport2Params defines parameters for WorkloadReportAPIGetClusterWorkloadReport2.
type WorkloadReportAPIGetClusterWorkloadReport2Params struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32  `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
	PageLimit   *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// LabelsToInclude Labels to be included for each workload.
	LabelsToInclude *[]string `form:"labelsToInclude,omitempty" json:"labelsToInclude,omitempty"`
}

// WorkloadReportAPIGetClusterWorkloadEfficiencyReportParams defines parameters for WorkloadReportAPIGetClusterWorkloadEfficiencyReport.
type WorkloadReportAPIGetClusterWorkloadEfficiencyReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds          *int32                                                                         `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
	FilterWorkloadNames  *[]string                                                                      `form:"filter.workloadNames,omitempty" json:"filter.workloadNames,omitempty"`
	FilterLabelsOperator *WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperator `form:"filter.labelsOperator,omitempty" json:"filter.labelsOperator,omitempty"`
	FilterWorkloadTypes  *[]string                                                                      `form:"filter.workloadTypes,omitempty" json:"filter.workloadTypes,omitempty"`
	FilterNamespaces     *[]string                                                                      `form:"filter.namespaces,omitempty" json:"filter.namespaces,omitempty"`
	PageLimit            *string                                                                        `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperator defines parameters for WorkloadReportAPIGetClusterWorkloadEfficiencyReport.
type WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsFilterLabelsOperator string

// WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder defines parameters for WorkloadReportAPIGetClusterWorkloadEfficiencyReport.
type WorkloadReportAPIGetClusterWorkloadEfficiencyReportParamsSortOrder string

// WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params defines parameters for WorkloadReportAPIGetClusterWorkloadEfficiencyReport2.
type WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`

	// StepSeconds Aggregate items in specified interval steps.
	StepSeconds *int32  `form:"stepSeconds,omitempty" json:"stepSeconds,omitempty"`
	PageLimit   *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder defines parameters for WorkloadReportAPIGetClusterWorkloadEfficiencyReport2.
type WorkloadReportAPIGetClusterWorkloadEfficiencyReport2ParamsSortOrder string

// WorkloadReportAPIGetClusterWorkloadLabelsParams defines parameters for WorkloadReportAPIGetClusterWorkloadLabels.
type WorkloadReportAPIGetClusterWorkloadLabelsParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// WorkloadReportAPIGetNamespacesForClustersParams defines parameters for WorkloadReportAPIGetNamespacesForClusters.
type WorkloadReportAPIGetNamespacesForClustersParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// NodeReportAPIGetNodeLabelNamesParams defines parameters for NodeReportAPIGetNodeLabelNames.
type NodeReportAPIGetNodeLabelNamesParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime   time.Time `form:"endTime" json:"endTime"`
	PageLimit *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// NodeReportAPIGetNodeLabelValuesParams defines parameters for NodeReportAPIGetNodeLabelValues.
type NodeReportAPIGetNodeLabelValuesParams struct {
	// Label Label name. Max length of 317 = 253 (optional prefix) + 1 (slash) + 63 (name segment) according to
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
	Label string `form:"label" json:"label"`

	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime   time.Time `form:"endTime" json:"endTime"`
	PageLimit *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// ClusterReportAPIGetOrganizationClustersCostReportParams defines parameters for ClusterReportAPIGetOrganizationClustersCostReport.
type ClusterReportAPIGetOrganizationClustersCostReportParams struct {
	// StartTime Start of period for summary
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime End of period for summary
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// ClusterReportAPIGetClustersCostReportParams defines parameters for ClusterReportAPIGetClustersCostReport.
type ClusterReportAPIGetClustersCostReportParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// WorkloadReportAPIGetWorkloadLabelNamesParams defines parameters for WorkloadReportAPIGetWorkloadLabelNames.
type WorkloadReportAPIGetWorkloadLabelNamesParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime   time.Time `form:"endTime" json:"endTime"`
	PageLimit *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// WorkloadReportAPIGetWorkloadLabelValuesParams defines parameters for WorkloadReportAPIGetWorkloadLabelValues.
type WorkloadReportAPIGetWorkloadLabelValuesParams struct {
	// Label Label name. Max length of 317 = 253 (optional prefix) + 1 (slash) + 63 (name segment) according to
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
	Label string `form:"label" json:"label"`

	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime   time.Time `form:"endTime" json:"endTime"`
	PageLimit *string   `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams defines parameters for WorkloadReportAPIGetWorkloadLabelValuesDeprecated.
type WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams struct {
	// StartTime Filter items to include from specified time.
	StartTime time.Time `form:"startTime" json:"startTime"`

	// EndTime Filter items to include up to specified time.
	EndTime time.Time `form:"endTime" json:"endTime"`
}

// WorkloadReportAPIGetWorkloadsMetadataParams defines parameters for WorkloadReportAPIGetWorkloadsMetadata.
type WorkloadReportAPIGetWorkloadsMetadataParams struct {
	StartTime time.Time `form:"startTime" json:"startTime"`
	EndTime   time.Time `form:"endTime" json:"endTime"`
}

// DedicatedInstanceAPIListDedicatedInstancesParams defines parameters for DedicatedInstanceAPIListDedicatedInstances.
type DedicatedInstanceAPIListDedicatedInstancesParams struct {
	GcpName      *string `form:"gcp.name,omitempty" json:"gcp.name,omitempty"`
	GcpProject   *string `form:"gcp.project,omitempty" json:"gcp.project,omitempty"`
	GcpZone      *string `form:"gcp.zone,omitempty" json:"gcp.zone,omitempty"`
	UsingCluster *string `form:"usingCluster,omitempty" json:"usingCluster,omitempty"`
}

// FeaturesAPIListParams defines parameters for FeaturesAPIList.
type FeaturesAPIListParams struct {
	// FlagNamePrefix Prefix to filter flags by.
	FlagNamePrefix *string `form:"flagNamePrefix,omitempty" json:"flagNamePrefix,omitempty"`
}

// InventoryBlacklistAPIListBlacklistsParams defines parameters for InventoryBlacklistAPIListBlacklists.
type InventoryBlacklistAPIListBlacklistsParams struct {
	// OrganizationId Organization id for which the instance type or family is blacklisted.
	OrganizationId *string `form:"organizationId,omitempty" json:"organizationId,omitempty"`

	// ClusterId Cluster id, that will only be set if instance type or family is blacklisted for specific cluster.
	ClusterId *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`
}

// UsersAPIListInvitationsParams defines parameters for UsersAPIListInvitations.
type UsersAPIListInvitationsParams struct {
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// AutoscalerAPIMigrateKarpenterDefinitionsJSONBody defines parameters for AutoscalerAPIMigrateKarpenterDefinitions.
type AutoscalerAPIMigrateKarpenterDefinitionsJSONBody = map[string]interface{}

// NodeTemplatesAPIListNodeTemplatesParams defines parameters for NodeTemplatesAPIListNodeTemplates.
type NodeTemplatesAPIListNodeTemplatesParams struct {
	// IncludeDefault Flag whether to include the default template
	IncludeDefault *bool `form:"includeDefault,omitempty" json:"includeDefault,omitempty"`
}

// AutoscalerAPIListRebalancingPlansParams defines parameters for AutoscalerAPIListRebalancingPlans.
type AutoscalerAPIListRebalancingPlansParams struct {
	// Limit A limit on the number of objects to be returned, between 1 and 500.
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor A cursor for use in pagination.
	//
	// This is a token that defines your place in the list. For instance, if you make a list request - you will receive a `nextCursor` field in response metadata. Given that the `nextCursor` field is
	// not empty, it can be used as a cursor query parameter to get subsequent items. If `nextCursor` is empty - there are no more items to retrieve.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// FilterStatuses Status list filter
	FilterStatuses *[]AutoscalerAPIListRebalancingPlansParamsFilterStatuses `form:"filter.statuses,omitempty" json:"filter.statuses,omitempty"`

	// IncludeOperations If include operations is true then operations is returned in response, otherwise is skipped
	IncludeOperations *bool `form:"includeOperations,omitempty" json:"includeOperations,omitempty"`

	// IncludeConfigurations If include configurations is true then configurations is returned in response, otherwise is skipped
	IncludeConfigurations *bool `form:"includeConfigurations,omitempty" json:"includeConfigurations,omitempty"`
}

// AutoscalerAPIListRebalancingPlansParamsFilterStatuses defines parameters for AutoscalerAPIListRebalancingPlans.
type AutoscalerAPIListRebalancingPlansParamsFilterStatuses string

// AutoscalerAPIGetRebalancingPlanParams defines parameters for AutoscalerAPIGetRebalancingPlan.
type AutoscalerAPIGetRebalancingPlanParams struct {
	// IncludeOperations If include operations is true then operations is returned in response, otherwise is skipped
	IncludeOperations *bool `form:"includeOperations,omitempty" json:"includeOperations,omitempty"`

	// IncludeConfigurations If include configurations is true then configurations is returned in response, otherwise is skipped
	IncludeConfigurations *bool `form:"includeConfigurations,omitempty" json:"includeConfigurations,omitempty"`
}

// ExternalClusterAPIGetCredentialsScriptParams defines parameters for ExternalClusterAPIGetCredentialsScript.
type ExternalClusterAPIGetCredentialsScriptParams struct {
	// CrossRole Whether an AWS CrossRole should be used for authentication.
	CrossRole *bool `form:"crossRole,omitempty" json:"crossRole,omitempty"`

	// NvidiaDevicePlugin Whether NVIDIA device plugin DaemonSet should be installed during Phase 2 on-boarding.
	NvidiaDevicePlugin *bool `form:"nvidiaDevicePlugin,omitempty" json:"nvidiaDevicePlugin,omitempty"`

	// InstallSecurityAgent Whether CAST AI Security Insights agent should be installed
	InstallSecurityAgent *bool `form:"installSecurityAgent,omitempty" json:"installSecurityAgent,omitempty"`
}

// ExternalClusterAPIListNodesParams defines parameters for ExternalClusterAPIListNodes.
type ExternalClusterAPIListNodesParams struct {
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// ExternalClusterAPIDeleteNodeParams defines parameters for ExternalClusterAPIDeleteNode.
type ExternalClusterAPIDeleteNodeParams struct {
	// DrainTimeout Node drain timeout in seconds. Defaults to 600s if not set.
	DrainTimeout *string `form:"drainTimeout,omitempty" json:"drainTimeout,omitempty"`

	// ForceDelete If set to true, node will be deleted even if node fails to be drained gracefully.
	ForceDelete *bool `form:"forceDelete,omitempty" json:"forceDelete,omitempty"`
}

// ExternalClusterAPIUpdateClusterTagsJSONBody defines parameters for ExternalClusterAPIUpdateClusterTags.
type ExternalClusterAPIUpdateClusterTagsJSONBody map[string]string

// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportParams defines parameters for OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReport.
type OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportParams struct {
	FromTime   *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime     *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
	CategoryId *string    `form:"categoryId,omitempty" json:"categoryId,omitempty"`
}

// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportParams defines parameters for OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReport.
type OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportParams struct {
	FromTime *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime   *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportParams defines parameters for OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReport.
type OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportParams struct {
	FromTime *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime   *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportParams defines parameters for OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReport.
type OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportParams struct {
	FromTime *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime   *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportParams defines parameters for OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReport.
type OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportParams struct {
	FromTime *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime   *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportParams defines parameters for OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReport.
type OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportParams struct {
	FromTime *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime   *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// OpenAILLMOptimizationAPIGetChatCompletionsUsageReportParams defines parameters for OpenAILLMOptimizationAPIGetChatCompletionsUsageReport.
type OpenAILLMOptimizationAPIGetChatCompletionsUsageReportParams struct {
	FromTime *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime   *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// ReportMetricsAPIGetWorkloadPromMetricsParams defines parameters for ReportMetricsAPIGetWorkloadPromMetrics.
type ReportMetricsAPIGetWorkloadPromMetricsParams struct {
	// AdditionalLabels If specified, these additional labels will be included in the results to the already
	// returned [cluster_id,workload_name,workload_type,namespace].
	AdditionalLabels *[]string `form:"additionalLabels,omitempty" json:"additionalLabels,omitempty"`
}

// NotificationAPIListNotificationsParams defines parameters for NotificationAPIListNotifications.
type NotificationAPIListNotificationsParams struct {
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// FilterSeverities The severities you want to filter
	FilterSeverities *[]NotificationAPIListNotificationsParamsFilterSeverities `form:"filter.severities,omitempty" json:"filter.severities,omitempty"`

	// FilterIsAcked Filters to return acknowledged or not acknowledged notifications.
	FilterIsAcked *bool `form:"filter.isAcked,omitempty" json:"filter.isAcked,omitempty"`

	// FilterNotificationId The id of the Notification
	FilterNotificationId *string `form:"filter.notificationId,omitempty" json:"filter.notificationId,omitempty"`

	// FilterNotificationName The name of the Notification
	FilterNotificationName *string `form:"filter.notificationName,omitempty" json:"filter.notificationName,omitempty"`

	// FilterClusterId The id of the Cluster included in the ClusterMetadata
	FilterClusterId *string `form:"filter.clusterId,omitempty" json:"filter.clusterId,omitempty"`

	// FilterClusterName The name of the Cluster included in the ClusterMetadata
	FilterClusterName *string `form:"filter.clusterName,omitempty" json:"filter.clusterName,omitempty"`

	// FilterOperationId The id of the Operation included in the OperationMetadata
	FilterOperationId *string `form:"filter.operationId,omitempty" json:"filter.operationId,omitempty"`

	// FilterOperationType The type of the Operation included in the OperationMetadata
	FilterOperationType *string `form:"filter.operationType,omitempty" json:"filter.operationType,omitempty"`

	// FilterProject The project the cluster belongs in the ClusterMetadata
	FilterProject *string `form:"filter.project,omitempty" json:"filter.project,omitempty"`

	// FilterIsExpired Filters to return expired or not expired notifications.
	FilterIsExpired *bool `form:"filter.isExpired,omitempty" json:"filter.isExpired,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *NotificationAPIListNotificationsParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// NotificationAPIListNotificationsParamsFilterSeverities defines parameters for NotificationAPIListNotifications.
type NotificationAPIListNotificationsParamsFilterSeverities string

// NotificationAPIListNotificationsParamsSortOrder defines parameters for NotificationAPIListNotifications.
type NotificationAPIListNotificationsParamsSortOrder string

// NotificationAPIListWebhookConfigsParams defines parameters for NotificationAPIListWebhookConfigs.
type NotificationAPIListWebhookConfigsParams struct {
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// FilterSeverities The severities to be applied for filtering
	FilterSeverities *[]NotificationAPIListWebhookConfigsParamsFilterSeverities `form:"filter.severities,omitempty" json:"filter.severities,omitempty"`

	// FilterStatus The status to be applied for filtering
	FilterStatus *string `form:"filter.status,omitempty" json:"filter.status,omitempty"`

	// FilterCategories The categories to be applied for filtering. For all leave it (as well as subcategories) empty.
	FilterCategories *[]string `form:"filter.categories,omitempty" json:"filter.categories,omitempty"`

	// FilterSubcategories The subcategories to be applied for filtering.
	FilterSubcategories *[]string `form:"filter.subcategories,omitempty" json:"filter.subcategories,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *NotificationAPIListWebhookConfigsParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// NotificationAPIListWebhookConfigsParamsFilterSeverities defines parameters for NotificationAPIListWebhookConfigs.
type NotificationAPIListWebhookConfigsParamsFilterSeverities string

// NotificationAPIListWebhookConfigsParamsSortOrder defines parameters for NotificationAPIListWebhookConfigs.
type NotificationAPIListWebhookConfigsParamsSortOrder string

// UsersAPIListOrganizationsParams defines parameters for UsersAPIListOrganizations.
type UsersAPIListOrganizationsParams struct {
	// UserId Filter organizations by user id.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// Username Filter organizations by username.
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// PricingAPIGetPricingForClusterNodesParams defines parameters for PricingAPIGetPricingForClusterNodes.
type PricingAPIGetPricingForClusterNodesParams struct {
	// NodeIds The node ids
	NodeIds *[]string `form:"nodeIds,omitempty" json:"nodeIds,omitempty"`
}

// PricingAPIGetPricingForOrganizationNodesParams defines parameters for PricingAPIGetPricingForOrganizationNodes.
type PricingAPIGetPricingForOrganizationNodesParams struct {
	// NodeIds The node ids
	NodeIds *[]string `form:"nodeIds,omitempty" json:"nodeIds,omitempty"`
}

// PricingAPISyncGCPBillingAPIDataParams defines parameters for PricingAPISyncGCPBillingAPIData.
type PricingAPISyncGCPBillingAPIDataParams struct {
	// ClusterId GCP cluster ID.
	ClusterId *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`

	// BillingAccountId GCP billing account ID.
	BillingAccountId *string `form:"billingAccountId,omitempty" json:"billingAccountId,omitempty"`
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleParams defines parameters for ScheduledRebalancingAPIUpdateRebalancingSchedule.
type ScheduledRebalancingAPIUpdateRebalancingScheduleParams struct {
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// UsageAPIGetUsageReportParams defines parameters for UsageAPIGetUsageReport.
type UsageAPIGetUsageReportParams struct {
	// FilterPeriodFrom Start time of resource usage period.
	FilterPeriodFrom *time.Time `form:"filter.period.from,omitempty" json:"filter.period.from,omitempty"`

	// FilterPeriodTo End time of resource usage period.
	FilterPeriodTo *time.Time `form:"filter.period.to,omitempty" json:"filter.period.to,omitempty"`

	// FilterClusterId Optional cluster id for usage filtering
	FilterClusterId *string `form:"filter.clusterId,omitempty" json:"filter.clusterId,omitempty"`
}

// UsageAPIGetUsageSummaryParams defines parameters for UsageAPIGetUsageSummary.
type UsageAPIGetUsageSummaryParams struct {
	// PeriodFrom Start time of resource usage period.
	PeriodFrom *time.Time `form:"period.from,omitempty" json:"period.from,omitempty"`

	// PeriodTo End time of resource usage period.
	PeriodTo *time.Time `form:"period.to,omitempty" json:"period.to,omitempty"`

	// ClusterId Optional cluster id for which avg would be calculated.
	ClusterId *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`
}

// CommitmentsAPICreateCommitmentAssignmentParams defines parameters for CommitmentsAPICreateCommitmentAssignment.
type CommitmentsAPICreateCommitmentAssignmentParams struct {
	// ClusterId Cluster ID
	ClusterId string `form:"clusterId" json:"clusterId"`

	// CommitmentId Commitment ID
	CommitmentId string `form:"commitmentId" json:"commitmentId"`
}

// CommitmentsAPIGetCommitmentsParams defines parameters for CommitmentsAPIGetCommitments.
type CommitmentsAPIGetCommitmentsParams struct {
	// IncludeUsage indicated if commitment usage should be included in a response
	IncludeUsage *bool `form:"includeUsage,omitempty" json:"includeUsage,omitempty"`

	// ClusterId get commitments that are assigned to a cluster
	ClusterId *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`
}

// CommitmentsAPIImportAzureReservationsJSONBody defines parameters for CommitmentsAPIImportAzureReservations.
type CommitmentsAPIImportAzureReservationsJSONBody = []CastaiInventoryV1beta1AzureReservationImport

// CommitmentsAPIImportAzureReservationsParams defines parameters for CommitmentsAPIImportAzureReservations.
type CommitmentsAPIImportAzureReservationsParams struct {
	// Behaviour Behaviour
	//
	//  - OVERWRITE: Overwrite all existing commitments
	Behaviour *CommitmentsAPIImportAzureReservationsParamsBehaviour `form:"behaviour,omitempty" json:"behaviour,omitempty"`
}

// CommitmentsAPIImportAzureReservationsParamsBehaviour defines parameters for CommitmentsAPIImportAzureReservations.
type CommitmentsAPIImportAzureReservationsParamsBehaviour string

// CommitmentsAPIImportGCPCommitmentsJSONBody defines parameters for CommitmentsAPIImportGCPCommitments.
type CommitmentsAPIImportGCPCommitmentsJSONBody = []CastaiInventoryV1beta1GCPCommitmentImport

// CommitmentsAPIImportGCPCommitmentsParams defines parameters for CommitmentsAPIImportGCPCommitments.
type CommitmentsAPIImportGCPCommitmentsParams struct {
	// Behaviour Behaviour
	//
	//  - OVERWRITE: Overwrite all existing commitments
	Behaviour *CommitmentsAPIImportGCPCommitmentsParamsBehaviour `form:"behaviour,omitempty" json:"behaviour,omitempty"`
}

// CommitmentsAPIImportGCPCommitmentsParamsBehaviour defines parameters for CommitmentsAPIImportGCPCommitments.
type CommitmentsAPIImportGCPCommitmentsParamsBehaviour string

// CommitmentsAPIGetGCPCommitmentsImportScriptParams defines parameters for CommitmentsAPIGetGCPCommitmentsImportScript.
type CommitmentsAPIGetGCPCommitmentsImportScriptParams struct {
	// Projects GCP Project ids
	Projects *[]string `form:"projects,omitempty" json:"projects,omitempty"`
}

// CommitmentsAPIReplaceCommitmentAssignmentsJSONBody defines parameters for CommitmentsAPIReplaceCommitmentAssignments.
type CommitmentsAPIReplaceCommitmentAssignmentsJSONBody = []string

// WorkloadOptimizationAPIGetInstallCmdParams defines parameters for WorkloadOptimizationAPIGetInstallCmd.
type WorkloadOptimizationAPIGetInstallCmdParams struct {
	ClusterId string `form:"clusterId" json:"clusterId"`
}

// ExternalClusterAPIGetCredentialsScriptTemplateParams defines parameters for ExternalClusterAPIGetCredentialsScriptTemplate.
type ExternalClusterAPIGetCredentialsScriptTemplateParams struct {
	CrossRole *bool `form:"crossRole,omitempty" json:"crossRole,omitempty"`
}

// InsightsAPIGetAttackPathsParams defines parameters for InsightsAPIGetAttackPaths.
type InsightsAPIGetAttackPathsParams struct {
	// ClusterIds (optional) cluster_id filter
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// InsightsAPIGetBestPracticesReportParams defines parameters for InsightsAPIGetBestPracticesReport.
type InsightsAPIGetBestPracticesReportParams struct {
	// ClusterIds (optional) cluster_id filter
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`

	// Namespaces (optional) namespace filter
	Namespaces *[]string `form:"namespaces,omitempty" json:"namespaces,omitempty"`

	// Category (optional) threat category filter
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Labels (optional) labels filter
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// SeverityLevels (optional) severity filter
	SeverityLevels *[]InsightsAPIGetBestPracticesReportParamsSeverityLevels `form:"severityLevels,omitempty" json:"severityLevels,omitempty"`

	// Standard (optional) standard to display rules in
	//
	//  - cast: default standard
	//  - cisAks12: cis aks 12
	//  - cisEks12: cis eks 12
	//  - cisGke13: cis gke 13
	//  - cisAks13: cis aks 13
	//  - cisEks13: cis eks 13
	//  - cisGke14: cis gke 14
	//  - cisAks14: cis aks 14
	Standard *InsightsAPIGetBestPracticesReportParamsStandard `form:"standard,omitempty" json:"standard,omitempty"`

	// ReadonlyClusters display read only clusters
	ReadonlyClusters *bool `form:"readonlyClusters,omitempty" json:"readonlyClusters,omitempty"`
}

// InsightsAPIGetBestPracticesReportParamsSeverityLevels defines parameters for InsightsAPIGetBestPracticesReport.
type InsightsAPIGetBestPracticesReportParamsSeverityLevels string

// InsightsAPIGetBestPracticesReportParamsStandard defines parameters for InsightsAPIGetBestPracticesReport.
type InsightsAPIGetBestPracticesReportParamsStandard string

// InsightsAPIGetBestPracticesCheckDetailsParams defines parameters for InsightsAPIGetBestPracticesCheckDetails.
type InsightsAPIGetBestPracticesCheckDetailsParams struct {
	// Standard (optional) standard to use
	//
	//  - cast: default standard
	//  - cisAks12: cis aks 12
	//  - cisEks12: cis eks 12
	//  - cisGke13: cis gke 13
	//  - cisAks13: cis aks 13
	//  - cisEks13: cis eks 13
	//  - cisGke14: cis gke 14
	//  - cisAks14: cis aks 14
	Standard *InsightsAPIGetBestPracticesCheckDetailsParamsStandard `form:"standard,omitempty" json:"standard,omitempty"`
}

// InsightsAPIGetBestPracticesCheckDetailsParamsStandard defines parameters for InsightsAPIGetBestPracticesCheckDetails.
type InsightsAPIGetBestPracticesCheckDetailsParamsStandard string

// InsightsAPIGetBestPracticesReportFiltersParams defines parameters for InsightsAPIGetBestPracticesReportFilters.
type InsightsAPIGetBestPracticesReportFiltersParams struct {
	// ClusterIds (optional) return filters available for specific clusters
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// InsightsAPIGetBestPracticesReportSummaryParams defines parameters for InsightsAPIGetBestPracticesReportSummary.
type InsightsAPIGetBestPracticesReportSummaryParams struct {
	// ClusterId (optional) cluster_id filter
	ClusterId *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`

	// SeverityLevel (optional) severity filter
	SeverityLevel *InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel `form:"severityLevel,omitempty" json:"severityLevel,omitempty"`

	// Standard (optional) standard to pick rules by
	//
	//  - cast: default standard
	//  - cisAks12: cis aks 12
	//  - cisEks12: cis eks 12
	//  - cisGke13: cis gke 13
	//  - cisAks13: cis aks 13
	//  - cisEks13: cis eks 13
	//  - cisGke14: cis gke 14
	//  - cisAks14: cis aks 14
	Standard *InsightsAPIGetBestPracticesReportSummaryParamsStandard `form:"standard,omitempty" json:"standard,omitempty"`
}

// InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel defines parameters for InsightsAPIGetBestPracticesReportSummary.
type InsightsAPIGetBestPracticesReportSummaryParamsSeverityLevel string

// InsightsAPIGetBestPracticesReportSummaryParamsStandard defines parameters for InsightsAPIGetBestPracticesReportSummary.
type InsightsAPIGetBestPracticesReportSummaryParamsStandard string

// InsightsAPIGetExceptedChecksParams defines parameters for InsightsAPIGetExceptedChecks.
type InsightsAPIGetExceptedChecksParams struct {
	// ClusterIds (optional) cluster_id filter
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`

	// Namespaces (optional) namespace filter
	Namespaces *[]string `form:"namespaces,omitempty" json:"namespaces,omitempty"`

	// Category (optional) threat category filter
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// SeverityLevels (optional) severity filter
	SeverityLevels *[]InsightsAPIGetExceptedChecksParamsSeverityLevels `form:"severityLevels,omitempty" json:"severityLevels,omitempty"`

	// Standard (optional) standard to display rules in
	//
	//  - cast: default standard
	//  - cisAks12: cis aks 12
	//  - cisEks12: cis eks 12
	//  - cisGke13: cis gke 13
	//  - cisAks13: cis aks 13
	//  - cisEks13: cis eks 13
	//  - cisGke14: cis gke 14
	//  - cisAks14: cis aks 14
	Standard *InsightsAPIGetExceptedChecksParamsStandard `form:"standard,omitempty" json:"standard,omitempty"`
}

// InsightsAPIGetExceptedChecksParamsSeverityLevels defines parameters for InsightsAPIGetExceptedChecks.
type InsightsAPIGetExceptedChecksParamsSeverityLevels string

// InsightsAPIGetExceptedChecksParamsStandard defines parameters for InsightsAPIGetExceptedChecks.
type InsightsAPIGetExceptedChecksParamsStandard string

// InsightsAPIGetContainerImagesParams defines parameters for InsightsAPIGetContainerImages.
type InsightsAPIGetContainerImagesParams struct {
	// Status (optional) status filter
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Cves (optional) cves filter
	Cves *[]string `form:"cves,omitempty" json:"cves,omitempty"`

	// Packages (optional) packages filter
	Packages *[]string `form:"packages,omitempty" json:"packages,omitempty"`

	// Namespaces (optional) namespaces filter
	Namespaces *[]string `form:"namespaces,omitempty" json:"namespaces,omitempty"`

	// ClusterIds (optional) clusters filter
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`

	// Labels (optional) labels filter
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// ExceptionFilter (optional) exception filter
	//
	//  - all: return all resources
	//  - active: return only not excepted resources
	//  - excepted: return only excepted resources
	ExceptionFilter *InsightsAPIGetContainerImagesParamsExceptionFilter `form:"exceptionFilter,omitempty" json:"exceptionFilter,omitempty"`
}

// InsightsAPIGetContainerImagesParamsExceptionFilter defines parameters for InsightsAPIGetContainerImages.
type InsightsAPIGetContainerImagesParamsExceptionFilter string

// InsightsAPIGetContainerImagesFiltersParams defines parameters for InsightsAPIGetContainerImagesFilters.
type InsightsAPIGetContainerImagesFiltersParams struct {
	// ClusterIds (optional) return filters available for specific clusters
	ClusterIds *[]string `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
}

// InsightsAPIGetContainerImagesSummaryParams defines parameters for InsightsAPIGetContainerImagesSummary.
type InsightsAPIGetContainerImagesSummaryParams struct {
	// ClusterId (optional) ID of cluster
	ClusterId *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`
}

// InsightsAPIGetPublicImageAlternativesParams defines parameters for InsightsAPIGetPublicImageAlternatives.
type InsightsAPIGetPublicImageAlternativesParams struct {
	// Language (optional) return distroless recommendation for language
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// InsightsAPIGetContainerImagePackagesParams defines parameters for InsightsAPIGetContainerImagePackages.
type InsightsAPIGetContainerImagePackagesParams struct {
	// ExceptionFilter  - all: return all resources
	//  - active: return only not excepted resources
	//  - excepted: return only excepted resources
	ExceptionFilter *InsightsAPIGetContainerImagePackagesParamsExceptionFilter `form:"exceptionFilter,omitempty" json:"exceptionFilter,omitempty"`
}

// InsightsAPIGetContainerImagePackagesParamsExceptionFilter defines parameters for InsightsAPIGetContainerImagePackages.
type InsightsAPIGetContainerImagePackagesParamsExceptionFilter string

// InsightsAPIGetContainerImageVulnerabilitiesParams defines parameters for InsightsAPIGetContainerImageVulnerabilities.
type InsightsAPIGetContainerImageVulnerabilitiesParams struct {
	// PkgId (optional) Filter by package ID.
	PkgId *string `form:"pkgId,omitempty" json:"pkgId,omitempty"`

	// ExceptionFilter  - all: return all resources
	//  - active: return only not excepted resources
	//  - excepted: return only excepted resources
	ExceptionFilter *InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilter `form:"exceptionFilter,omitempty" json:"exceptionFilter,omitempty"`
}

// InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilter defines parameters for InsightsAPIGetContainerImageVulnerabilities.
type InsightsAPIGetContainerImageVulnerabilitiesParamsExceptionFilter string

// InsightsAPIGetBestPracticesOverviewParams defines parameters for InsightsAPIGetBestPracticesOverview.
type InsightsAPIGetBestPracticesOverviewParams struct {
	// Standard  - cast: default standard
	//  - cisAks12: cis aks 12
	//  - cisEks12: cis eks 12
	//  - cisGke13: cis gke 13
	//  - cisAks13: cis aks 13
	//  - cisEks13: cis eks 13
	//  - cisGke14: cis gke 14
	//  - cisAks14: cis aks 14
	Standard *InsightsAPIGetBestPracticesOverviewParamsStandard `form:"standard,omitempty" json:"standard,omitempty"`
}

// InsightsAPIGetBestPracticesOverviewParamsStandard defines parameters for InsightsAPIGetBestPracticesOverview.
type InsightsAPIGetBestPracticesOverviewParamsStandard string

// InsightsAPIGetResourceDetailsParams defines parameters for InsightsAPIGetResourceDetails.
type InsightsAPIGetResourceDetailsParams struct {
	// Standard  - cast: default standard
	//  - cisAks12: cis aks 12
	//  - cisEks12: cis eks 12
	//  - cisGke13: cis gke 13
	//  - cisAks13: cis aks 13
	//  - cisEks13: cis eks 13
	//  - cisGke14: cis gke 14
	//  - cisAks14: cis aks 14
	Standard InsightsAPIGetResourceDetailsParamsStandard `form:"standard" json:"standard"`
}

// InsightsAPIGetResourceDetailsParamsStandard defines parameters for InsightsAPIGetResourceDetails.
type InsightsAPIGetResourceDetailsParamsStandard string

// RuntimeSecurityAPIGetAnomaliesParams defines parameters for RuntimeSecurityAPIGetAnomalies.
type RuntimeSecurityAPIGetAnomaliesParams struct {
	ClusterIds *[]string                                   `form:"clusterIds,omitempty" json:"clusterIds,omitempty"`
	Namespaces *[]string                                   `form:"namespaces,omitempty" json:"namespaces,omitempty"`
	Status     *RuntimeSecurityAPIGetAnomaliesParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	PageLimit  *string                                     `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// SortField Name of the field you want to sort
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The sort order, possible values ASC or DESC, if not provided asc is the default
	//
	//  - ASC: ASC
	//  - asc: desc
	//  - DESC: ASC
	//  - desc: desc
	SortOrder *RuntimeSecurityAPIGetAnomaliesParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// RuntimeSecurityAPIGetAnomaliesParamsStatus defines parameters for RuntimeSecurityAPIGetAnomalies.
type RuntimeSecurityAPIGetAnomaliesParamsStatus string

// RuntimeSecurityAPIGetAnomaliesParamsSortOrder defines parameters for RuntimeSecurityAPIGetAnomalies.
type RuntimeSecurityAPIGetAnomaliesParamsSortOrder string

// RuntimeSecurityAPIAckAnomaliesParams defines parameters for RuntimeSecurityAPIAckAnomalies.
type RuntimeSecurityAPIAckAnomaliesParams struct {
	Ids *[]string `form:"ids,omitempty" json:"ids,omitempty"`
}

// RuntimeSecurityAPICloseAnomaliesParams defines parameters for RuntimeSecurityAPICloseAnomalies.
type RuntimeSecurityAPICloseAnomaliesParams struct {
	Ids               *[]string                                     `form:"ids,omitempty" json:"ids,omitempty"`
	Reason            *RuntimeSecurityAPICloseAnomaliesParamsReason `form:"reason,omitempty" json:"reason,omitempty"`
	ReasonDescription *string                                       `form:"reasonDescription,omitempty" json:"reasonDescription,omitempty"`
}

// RuntimeSecurityAPICloseAnomaliesParamsReason defines parameters for RuntimeSecurityAPICloseAnomalies.
type RuntimeSecurityAPICloseAnomaliesParamsReason string

// WorkloadOptimizationAPIListWorkloadEvents2Params defines parameters for WorkloadOptimizationAPIListWorkloadEvents2.
type WorkloadOptimizationAPIListWorkloadEvents2Params struct {
	WorkloadId *string `form:"workloadId,omitempty" json:"workloadId,omitempty"`
	PageLimit  *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor   *string                                                 `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
	FromDate     *time.Time                                              `form:"fromDate,omitempty" json:"fromDate,omitempty"`
	ToDate       *time.Time                                              `form:"toDate,omitempty" json:"toDate,omitempty"`
	WorkloadName *string                                                 `form:"workloadName,omitempty" json:"workloadName,omitempty"`
	Type         *[]WorkloadOptimizationAPIListWorkloadEvents2ParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// WorkloadOptimizationAPIListWorkloadEvents2ParamsType defines parameters for WorkloadOptimizationAPIListWorkloadEvents2.
type WorkloadOptimizationAPIListWorkloadEvents2ParamsType string

// WorkloadOptimizationAPIGetWorkload2Params defines parameters for WorkloadOptimizationAPIGetWorkload2.
type WorkloadOptimizationAPIGetWorkload2Params struct {
	IncludeMetrics *bool      `form:"includeMetrics,omitempty" json:"includeMetrics,omitempty"`
	FromTime       *time.Time `form:"fromTime,omitempty" json:"fromTime,omitempty"`
	ToTime         *time.Time `form:"toTime,omitempty" json:"toTime,omitempty"`
}

// WorkloadOptimizationAPIGetInstallCmd2Params defines parameters for WorkloadOptimizationAPIGetInstallCmd2.
type WorkloadOptimizationAPIGetInstallCmd2Params struct {
	ClusterId string `form:"clusterId" json:"clusterId"`
}

// AuthTokenAPICreateAuthTokenJSONRequestBody defines body for AuthTokenAPICreateAuthToken for application/json ContentType.
type AuthTokenAPICreateAuthTokenJSONRequestBody = CastaiAuthtokenV1beta1AuthToken

// AuthTokenAPIUpdateAuthTokenJSONRequestBody defines body for AuthTokenAPIUpdateAuthToken for application/json ContentType.
type AuthTokenAPIUpdateAuthTokenJSONRequestBody = CastaiAuthtokenV1beta1AuthTokenUpdate

// ComponentsAPIIngestLogsJSONRequestBody defines body for ComponentsAPIIngestLogs for application/json ContentType.
type ComponentsAPIIngestLogsJSONRequestBody = ComponentsV1ComponentLogs

// WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody defines body for WorkloadOptimizationAPIUpdateWorkload for application/json ContentType.
type WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody = WorkloadoptimizationV1UpdateWorkload

// AllocationGroupAPICreateAllocationGroupJSONRequestBody defines body for AllocationGroupAPICreateAllocationGroup for application/json ContentType.
type AllocationGroupAPICreateAllocationGroupJSONRequestBody = CostreportV1beta1AllocationGroupDetails

// AllocationGroupAPIUpdateAllocationGroupJSONRequestBody defines body for AllocationGroupAPIUpdateAllocationGroup for application/json ContentType.
type AllocationGroupAPIUpdateAllocationGroupJSONRequestBody = CostreportV1beta1AllocationGroupDetails

// WorkloadReportAPIGetWorkloadDataTransferCost2JSONRequestBody defines body for WorkloadReportAPIGetWorkloadDataTransferCost2 for application/json ContentType.
type WorkloadReportAPIGetWorkloadDataTransferCost2JSONRequestBody = CostreportV1beta1WorkloadFilter

// ReportConfigurationAPIUpsertGroupingConfigJSONRequestBody defines body for ReportConfigurationAPIUpsertGroupingConfig for application/json ContentType.
type ReportConfigurationAPIUpsertGroupingConfigJSONRequestBody = CostreportV1beta1GroupingConfig

// NamespaceReportAPIGetClusterNamespaceCostReportSummariesJSONRequestBody defines body for NamespaceReportAPIGetClusterNamespaceCostReportSummaries for application/json ContentType.
type NamespaceReportAPIGetClusterNamespaceCostReportSummariesJSONRequestBody = CostreportV1beta1NamespaceFilter

// NamespaceReportAPIGetClusterNamespaceCostReportJSONRequestBody defines body for NamespaceReportAPIGetClusterNamespaceCostReport for application/json ContentType.
type NamespaceReportAPIGetClusterNamespaceCostReportJSONRequestBody = CostreportV1beta1NamespaceFilter

// WorkloadReportAPIGetClusterWorkloadRightsizingPatchJSONRequestBody defines body for WorkloadReportAPIGetClusterWorkloadRightsizingPatch for application/json ContentType.
type WorkloadReportAPIGetClusterWorkloadRightsizingPatchJSONRequestBody = CostreportV1beta1GetClusterWorkloadRightsizingPatchRequestWorkloads

// WorkloadReportAPIGetWorkloadCostSummariesJSONRequestBody defines body for WorkloadReportAPIGetWorkloadCostSummaries for application/json ContentType.
type WorkloadReportAPIGetWorkloadCostSummariesJSONRequestBody = CostreportV1beta1WorkloadFilter

// WorkloadReportAPIGetClusterWorkloadReport2JSONRequestBody defines body for WorkloadReportAPIGetClusterWorkloadReport2 for application/json ContentType.
type WorkloadReportAPIGetClusterWorkloadReport2JSONRequestBody = CostreportV1beta1WorkloadFilter

// WorkloadReportAPIGetClusterWorkloadEfficiencyReport2JSONRequestBody defines body for WorkloadReportAPIGetClusterWorkloadEfficiencyReport2 for application/json ContentType.
type WorkloadReportAPIGetClusterWorkloadEfficiencyReport2JSONRequestBody = CostreportV1beta1WorkloadFilter

// WorkloadReportAPIGetNamespacesForClustersJSONRequestBody defines body for WorkloadReportAPIGetNamespacesForClusters for application/json ContentType.
type WorkloadReportAPIGetNamespacesForClustersJSONRequestBody = CostreportV1beta1NamespaceFilters

// NodeReportAPIGetNodeLabelNamesJSONRequestBody defines body for NodeReportAPIGetNodeLabelNames for application/json ContentType.
type NodeReportAPIGetNodeLabelNamesJSONRequestBody = CostreportV1beta1NodeLabelFilters

// NodeReportAPIGetNodeLabelValuesJSONRequestBody defines body for NodeReportAPIGetNodeLabelValues for application/json ContentType.
type NodeReportAPIGetNodeLabelValuesJSONRequestBody = CostreportV1beta1NodeLabelFilters

// WorkloadReportAPIGetWorkloadLabelNamesJSONRequestBody defines body for WorkloadReportAPIGetWorkloadLabelNames for application/json ContentType.
type WorkloadReportAPIGetWorkloadLabelNamesJSONRequestBody = CostreportV1beta1WorkloadLabelFilters

// WorkloadReportAPIGetWorkloadLabelValuesJSONRequestBody defines body for WorkloadReportAPIGetWorkloadLabelValues for application/json ContentType.
type WorkloadReportAPIGetWorkloadLabelValuesJSONRequestBody = CostreportV1beta1WorkloadLabelFilters

// WorkloadReportAPIGetWorkloadLabelValuesDeprecatedJSONRequestBody defines body for WorkloadReportAPIGetWorkloadLabelValuesDeprecated for application/json ContentType.
type WorkloadReportAPIGetWorkloadLabelValuesDeprecatedJSONRequestBody = CostreportV1beta1WorkloadLabelFilters

// WorkloadReportAPIGetWorkloadsMetadataJSONRequestBody defines body for WorkloadReportAPIGetWorkloadsMetadata for application/json ContentType.
type WorkloadReportAPIGetWorkloadsMetadataJSONRequestBody = CostreportV1beta1WorkloadLabelFilters

// FeaturesAPIResolveJSONRequestBody defines body for FeaturesAPIResolve for application/json ContentType.
type FeaturesAPIResolveJSONRequestBody = CastaiFeaturesV1ResolveMessage

// InventoryBlacklistAPIAddBlacklistJSONRequestBody defines body for InventoryBlacklistAPIAddBlacklist for application/json ContentType.
type InventoryBlacklistAPIAddBlacklistJSONRequestBody = InventoryblacklistV1AddBlacklistRequest

// InventoryBlacklistAPIRemoveBlacklistJSONRequestBody defines body for InventoryBlacklistAPIRemoveBlacklist for application/json ContentType.
type InventoryBlacklistAPIRemoveBlacklistJSONRequestBody = InventoryblacklistV1RemoveBlacklistRequest

// UsersAPICreateInvitationsJSONRequestBody defines body for UsersAPICreateInvitations for application/json ContentType.
type UsersAPICreateInvitationsJSONRequestBody = CastaiUsersV1beta1CreateInvitationsRequest

// UsersAPIClaimInvitationJSONRequestBody defines body for UsersAPIClaimInvitation for application/json ContentType.
type UsersAPIClaimInvitationJSONRequestBody = CastaiUsersV1beta1Request

// ClusterActionsAPIIngestLogsJSONRequestBody defines body for ClusterActionsAPIIngestLogs for application/json ContentType.
type ClusterActionsAPIIngestLogsJSONRequestBody = ClusteractionsV1LogEvent

// ClusterActionsAPIAckClusterActionJSONRequestBody defines body for ClusterActionsAPIAckClusterAction for application/json ContentType.
type ClusterActionsAPIAckClusterActionJSONRequestBody = ClusteractionsV1ClusterActionAck

// AlgorithmStatsAPISubmitJSONRequestBody defines body for AlgorithmStatsAPISubmit for application/json ContentType.
type AlgorithmStatsAPISubmitJSONRequestBody = RequestToSubmitAlgorithmStats

// EvictorAPIUpsertAdvancedConfigJSONRequestBody defines body for EvictorAPIUpsertAdvancedConfig for application/json ContentType.
type EvictorAPIUpsertAdvancedConfigJSONRequestBody = CastaiEvictorV1AdvancedConfig

// NodeTemplatesAPIFilterInstanceTypesJSONRequestBody defines body for NodeTemplatesAPIFilterInstanceTypes for application/json ContentType.
type NodeTemplatesAPIFilterInstanceTypesJSONRequestBody = NodetemplatesV1NodeTemplate

// AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody defines body for AutoscalerAPIMigrateKarpenterDefinitions for application/json ContentType.
type AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody = AutoscalerAPIMigrateKarpenterDefinitionsJSONBody

// NodeConfigurationAPICreateConfigurationJSONRequestBody defines body for NodeConfigurationAPICreateConfiguration for application/json ContentType.
type NodeConfigurationAPICreateConfigurationJSONRequestBody = NodeconfigV1NewNodeConfiguration

// NodeConfigurationAPIUpdateConfigurationJSONRequestBody defines body for NodeConfigurationAPIUpdateConfiguration for application/json ContentType.
type NodeConfigurationAPIUpdateConfigurationJSONRequestBody = NodeconfigV1NodeConfigurationUpdate

// NodeTemplatesAPICreateNodeTemplateJSONRequestBody defines body for NodeTemplatesAPICreateNodeTemplate for application/json ContentType.
type NodeTemplatesAPICreateNodeTemplateJSONRequestBody = NodetemplatesV1NewNodeTemplate

// NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody defines body for NodeTemplatesAPIUpdateNodeTemplate for application/json ContentType.
type NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody = NodetemplatesV1UpdateNodeTemplate

// PoliciesAPIUpsertClusterPoliciesJSONRequestBody defines body for PoliciesAPIUpsertClusterPolicies for application/json ContentType.
type PoliciesAPIUpsertClusterPoliciesJSONRequestBody = PoliciesV1Policies

// ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody defines body for ScheduledRebalancingAPICreateRebalancingJob for application/json ContentType.
type ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody = ScheduledrebalancingV1RebalancingJob

// ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody defines body for ScheduledRebalancingAPIUpdateRebalancingJob for application/json ContentType.
type ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody = ScheduledrebalancingV1RebalancingJob

// AutoscalerAPIGenerateRebalancingPlanJSONRequestBody defines body for AutoscalerAPIGenerateRebalancingPlan for application/json ContentType.
type AutoscalerAPIGenerateRebalancingPlanJSONRequestBody = AutoscalerAPIGenerateRebalancingPlanRequest

// ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody defines body for ScheduledRebalancingAPIPreviewRebalancingSchedule for application/json ContentType.
type ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody = ScheduledrebalancingV1RebalancingScheduleUpdate

// ExternalClusterAPIRegisterClusterJSONRequestBody defines body for ExternalClusterAPIRegisterCluster for application/json ContentType.
type ExternalClusterAPIRegisterClusterJSONRequestBody = ExternalclusterV1RegisterClusterRequest

// ExternalClusterAPIUpdateClusterJSONRequestBody defines body for ExternalClusterAPIUpdateCluster for application/json ContentType.
type ExternalClusterAPIUpdateClusterJSONRequestBody = ExternalclusterV1ClusterUpdate

// ExternalClusterAPIDisconnectClusterJSONRequestBody defines body for ExternalClusterAPIDisconnectCluster for application/json ContentType.
type ExternalClusterAPIDisconnectClusterJSONRequestBody = ExternalclusterV1DisconnectConfig

// ExternalClusterAPIHandleCloudEventJSONRequestBody defines body for ExternalClusterAPIHandleCloudEvent for application/json ContentType.
type ExternalClusterAPIHandleCloudEventJSONRequestBody = ExternalclusterV1CloudEvent

// ExternalClusterAPIAddNodeJSONRequestBody defines body for ExternalClusterAPIAddNode for application/json ContentType.
type ExternalClusterAPIAddNodeJSONRequestBody = ExternalclusterV1NodeConfig

// ExternalClusterAPIDrainNodeJSONRequestBody defines body for ExternalClusterAPIDrainNode for application/json ContentType.
type ExternalClusterAPIDrainNodeJSONRequestBody = ExternalclusterV1DrainConfig

// ExternalClusterAPIUpdateClusterTagsJSONRequestBody defines body for ExternalClusterAPIUpdateClusterTags for application/json ContentType.
type ExternalClusterAPIUpdateClusterTagsJSONRequestBody ExternalClusterAPIUpdateClusterTagsJSONBody

// LLMSettingsAPIUpsertSettingsJSONRequestBody defines body for LLMSettingsAPIUpsertSettings for application/json ContentType.
type LLMSettingsAPIUpsertSettingsJSONRequestBody = LlmoptimizationV1UpsertSettingsRequest

// UsersAPIUpdateCurrentUserProfileJSONRequestBody defines body for UsersAPIUpdateCurrentUserProfile for application/json ContentType.
type UsersAPIUpdateCurrentUserProfileJSONRequestBody = CastaiUsersV1beta1User

// NotificationAPIAckNotificationsJSONRequestBody defines body for NotificationAPIAckNotifications for application/json ContentType.
type NotificationAPIAckNotificationsJSONRequestBody = CastaiNotificationsV1beta1AckNotificationsRequest

// NotificationAPICreateWebhookConfigJSONRequestBody defines body for NotificationAPICreateWebhookConfig for application/json ContentType.
type NotificationAPICreateWebhookConfigJSONRequestBody = CastaiNotificationsV1beta1AddWebhookConfig

// NotificationAPIUpdateWebhookConfigJSONRequestBody defines body for NotificationAPIUpdateWebhookConfig for application/json ContentType.
type NotificationAPIUpdateWebhookConfigJSONRequestBody = CastaiNotificationsV1beta1UpdateWebhookConfig

// UsersAPICreateOrganizationJSONRequestBody defines body for UsersAPICreateOrganization for application/json ContentType.
type UsersAPICreateOrganizationJSONRequestBody = CastaiUsersV1beta1Organization

// UsersAPIEditOrganizationJSONRequestBody defines body for UsersAPIEditOrganization for application/json ContentType.
type UsersAPIEditOrganizationJSONRequestBody = CastaiUsersV1beta1Organization

// InventoryAPIAddReservationJSONRequestBody defines body for InventoryAPIAddReservation for application/json ContentType.
type InventoryAPIAddReservationJSONRequestBody = CastaiInventoryV1beta1GenericReservation

// InventoryAPIOverwriteReservationsJSONRequestBody defines body for InventoryAPIOverwriteReservations for application/json ContentType.
type InventoryAPIOverwriteReservationsJSONRequestBody = CastaiInventoryV1beta1GenericReservationsList

// UsersAPIAddUserToOrganizationJSONRequestBody defines body for UsersAPIAddUserToOrganization for application/json ContentType.
type UsersAPIAddUserToOrganizationJSONRequestBody = CastaiUsersV1beta1NewMembership

// UsersAPIUpdateOrganizationUserJSONRequestBody defines body for UsersAPIUpdateOrganizationUser for application/json ContentType.
type UsersAPIUpdateOrganizationUserJSONRequestBody = UsersAPIUpdateOrganizationUserRequest

// PartnersAPICreateOrganizationJSONRequestBody defines body for PartnersAPICreateOrganization for application/json ContentType.
type PartnersAPICreateOrganizationJSONRequestBody = CastaiPartnersV1beta1CreateOrganization

// PartnersAPICreateTokenJSONRequestBody defines body for PartnersAPICreateToken for application/json ContentType.
type PartnersAPICreateTokenJSONRequestBody = CastaiPartnersV1beta1CreateToken

// ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody defines body for ScheduledRebalancingAPICreateRebalancingSchedule for application/json ContentType.
type ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody = ScheduledrebalancingV1RebalancingSchedule

// ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody defines body for ScheduledRebalancingAPIUpdateRebalancingSchedule for application/json ContentType.
type ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody = ScheduledrebalancingV1RebalancingScheduleUpdate

// CommitmentsAPIImportAzureReservationsJSONRequestBody defines body for CommitmentsAPIImportAzureReservations for application/json ContentType.
type CommitmentsAPIImportAzureReservationsJSONRequestBody = CommitmentsAPIImportAzureReservationsJSONBody

// CommitmentsAPIImportGCPCommitmentsJSONRequestBody defines body for CommitmentsAPIImportGCPCommitments for application/json ContentType.
type CommitmentsAPIImportGCPCommitmentsJSONRequestBody = CommitmentsAPIImportGCPCommitmentsJSONBody

// CommitmentsAPIUpdateCommitmentJSONRequestBody defines body for CommitmentsAPIUpdateCommitment for application/json ContentType.
type CommitmentsAPIUpdateCommitmentJSONRequestBody = CastaiInventoryV1beta1Commitment

// CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody defines body for CommitmentsAPIReplaceCommitmentAssignments for application/json ContentType.
type CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody = CommitmentsAPIReplaceCommitmentAssignmentsJSONBody

// InsightsAPIGetAgentsStatusJSONRequestBody defines body for InsightsAPIGetAgentsStatus for application/json ContentType.
type InsightsAPIGetAgentsStatusJSONRequestBody = InsightsV1GetAgentsStatusRequest

// InsightsAPIGetChecksResourcesJSONRequestBody defines body for InsightsAPIGetChecksResources for application/json ContentType.
type InsightsAPIGetChecksResourcesJSONRequestBody = InsightsV1GetChecksResourcesRequest

// InsightsAPIEnforceCheckPolicyJSONRequestBody defines body for InsightsAPIEnforceCheckPolicy for application/json ContentType.
type InsightsAPIEnforceCheckPolicyJSONRequestBody = InsightsAPIEnforceCheckPolicyRequest

// InsightsAPISaveCheckExceptionsJSONRequestBody defines body for InsightsAPISaveCheckExceptions for application/json ContentType.
type InsightsAPISaveCheckExceptionsJSONRequestBody = InsightsV1CheckExceptionsPayload

// InsightsAPIPreviewExceptionGroupsResourcesJSONRequestBody defines body for InsightsAPIPreviewExceptionGroupsResources for application/json ContentType.
type InsightsAPIPreviewExceptionGroupsResourcesJSONRequestBody = InsightsV1CheckExceptionsPayload

// InsightsAPIGetCheckResourcesJSONRequestBody defines body for InsightsAPIGetCheckResources for application/json ContentType.
type InsightsAPIGetCheckResourcesJSONRequestBody = InsightsAPIGetCheckResourcesRequest

// InsightsAPIScheduleBestPracticesScanJSONRequestBody defines body for InsightsAPIScheduleBestPracticesScan for application/json ContentType.
type InsightsAPIScheduleBestPracticesScanJSONRequestBody = InsightsV1ScheduleBestPracticesScanRequest

// InsightsAPIDeleteImagesJSONRequestBody defines body for InsightsAPIDeleteImages for application/json ContentType.
type InsightsAPIDeleteImagesJSONRequestBody = InsightsV1DeleteImagesRequest

// InsightsAPIImageExceptionChangesJSONRequestBody defines body for InsightsAPIImageExceptionChanges for application/json ContentType.
type InsightsAPIImageExceptionChangesJSONRequestBody = InsightsV1ImageExceptionChangesRequest

// InsightsAPIIngestAgentLogJSONRequestBody defines body for InsightsAPIIngestAgentLog for application/json ContentType.
type InsightsAPIIngestAgentLogJSONRequestBody = InsightsV1LogEvent

// InsightsAPIGetAgentSyncStateJSONRequestBody defines body for InsightsAPIGetAgentSyncState for application/json ContentType.
type InsightsAPIGetAgentSyncStateJSONRequestBody = InsightsV1AgentSyncStateFilter

// InsightsAPIPostAgentTelemetryJSONRequestBody defines body for InsightsAPIPostAgentTelemetry for application/json ContentType.
type InsightsAPIPostAgentTelemetryJSONRequestBody = InsightsAPIPostAgentTelemetryRequest

// InsightsAPICreateIntegrationJSONRequestBody defines body for InsightsAPICreateIntegration for application/json ContentType.
type InsightsAPICreateIntegrationJSONRequestBody = InsightsV1CreateIntegrationRequestPayload

// InsightsAPIUpdateIntegrationJSONRequestBody defines body for InsightsAPIUpdateIntegration for application/json ContentType.
type InsightsAPIUpdateIntegrationJSONRequestBody = InsightsV1UpdateIntegrationRequestPayload

// InsightsAPICreateTicketJSONRequestBody defines body for InsightsAPICreateTicket for application/json ContentType.
type InsightsAPICreateTicketJSONRequestBody = InsightsAPICreateTicketRequest

// InsightsAPIConfigureClusterSecuritySettingsJSONRequestBody defines body for InsightsAPIConfigureClusterSecuritySettings for application/json ContentType.
type InsightsAPIConfigureClusterSecuritySettingsJSONRequestBody = InsightsAPIConfigureClusterSecuritySettingsRequest

// SSOAPICreateSSOConnectionJSONRequestBody defines body for SSOAPICreateSSOConnection for application/json ContentType.
type SSOAPICreateSSOConnectionJSONRequestBody = CastaiSsoV1beta1CreateSSOConnection

// SSOAPIUpdateSSOConnectionJSONRequestBody defines body for SSOAPIUpdateSSOConnection for application/json ContentType.
type SSOAPIUpdateSSOConnectionJSONRequestBody = CastaiSsoV1beta1UpdateSSOConnection

// WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody defines body for WorkloadOptimizationAPICreateWorkloadScalingPolicy for application/json ContentType.
type WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody = WorkloadoptimizationV1NewWorkloadScalingPolicy

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody defines body for WorkloadOptimizationAPIUpdateWorkloadScalingPolicy for application/json ContentType.
type WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody = WorkloadoptimizationV1UpdateWorkloadScalingPolicy

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody defines body for WorkloadOptimizationAPIAssignScalingPolicyWorkloads for application/json ContentType.
type WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody = WorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest

// WorkloadOptimizationAPIUpdateWorkload2JSONRequestBody defines body for WorkloadOptimizationAPIUpdateWorkload2 for application/json ContentType.
type WorkloadOptimizationAPIUpdateWorkload2JSONRequestBody = WorkloadoptimizationV1UpdateWorkload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AutoscalerAPIGetAgentScript request
	AutoscalerAPIGetAgentScript(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuditAPIListAuditEntries request
	AuditAPIListAuditEntries(ctx context.Context, params *AuditAPIListAuditEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginCallback request
	LoginCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Login request
	Login(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SamlAcs request
	SamlAcs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSession request
	GetSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIListAuthTokens request
	AuthTokenAPIListAuthTokens(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPICreateAuthTokenWithBody request with any body
	AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenAPICreateAuthToken(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIDeleteAuthToken request
	AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIGetAuthToken request
	AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIUpdateAuthTokenWithBody request with any body
	AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingSso request
	BillingSso(ctx context.Context, params *BillingSsoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Subscription request
	Subscription(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscriptionCheckout request
	SubscriptionCheckout(ctx context.Context, params *SubscriptionCheckoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingAPIGetUsageReport request
	BillingAPIGetUsageReport(ctx context.Context, params *BillingAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetAgentStatus request
	WorkloadOptimizationAPIGetAgentStatus(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComponentsAPIIngestLogsWithBody request with any body
	ComponentsAPIIngestLogsWithBody(ctx context.Context, clusterId string, component string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ComponentsAPIIngestLogs(ctx context.Context, clusterId string, component string, body ComponentsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloadEvents request
	WorkloadOptimizationAPIListWorkloadEvents(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloads request
	WorkloadOptimizationAPIListWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetWorkload request
	WorkloadOptimizationAPIGetWorkload(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIUpdateWorkloadWithBody request with any body
	WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIUpdateWorkload(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetAllocationGroupCostTimedSummaries request
	AllocationGroupAPIGetAllocationGroupCostTimedSummaries(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostTimedSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetAllocationGroupCostSummaries request
	AllocationGroupAPIGetAllocationGroupCostSummaries(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIListAllocationGroups request
	AllocationGroupAPIListAllocationGroups(ctx context.Context, params *AllocationGroupAPIListAllocationGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPICreateAllocationGroupWithBody request with any body
	AllocationGroupAPICreateAllocationGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AllocationGroupAPICreateAllocationGroup(ctx context.Context, body AllocationGroupAPICreateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetAllocationGroupTotalCostTimed request
	AllocationGroupAPIGetAllocationGroupTotalCostTimed(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupTotalCostTimedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetCostAllocationGroupDataTransferSummary request
	AllocationGroupAPIGetCostAllocationGroupDataTransferSummary(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetAllocationGroupEfficiencySummary request
	AllocationGroupAPIGetAllocationGroupEfficiencySummary(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupEfficiencySummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetCostAllocationGroupSummary request
	AllocationGroupAPIGetCostAllocationGroupSummary(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloads request
	AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloads(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIGetCostAllocationGroupWorkloads request
	AllocationGroupAPIGetCostAllocationGroupWorkloads(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIDeleteAllocationGroup request
	AllocationGroupAPIDeleteAllocationGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocationGroupAPIUpdateAllocationGroupWithBody request with any body
	AllocationGroupAPIUpdateAllocationGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AllocationGroupAPIUpdateAllocationGroup(ctx context.Context, id string, body AllocationGroupAPIUpdateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClusterCostReport request
	ClusterReportAPIGetClusterCostReport(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadDataTransferCost request
	WorkloadReportAPIGetWorkloadDataTransferCost(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadDataTransferCost2WithBody request with any body
	WorkloadReportAPIGetWorkloadDataTransferCost2WithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetWorkloadDataTransferCost2(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, body WorkloadReportAPIGetWorkloadDataTransferCost2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClusterEfficiencyReport request
	ClusterReportAPIGetClusterEfficiencyReport(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterEfficiencyReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetSavingsRecommendation request
	ClusterReportAPIGetSavingsRecommendation(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClusterCostHistory request
	ClusterReportAPIGetClusterCostHistory(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportConfigurationAPIGetGroupingConfig request
	ReportConfigurationAPIGetGroupingConfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportConfigurationAPIUpsertGroupingConfigWithBody request with any body
	ReportConfigurationAPIUpsertGroupingConfigWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportConfigurationAPIUpsertGroupingConfig(ctx context.Context, clusterId string, body ReportConfigurationAPIUpsertGroupingConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBody request with any body
	NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBody(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NamespaceReportAPIGetClusterNamespaceCostReportSummaries(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, body NamespaceReportAPIGetClusterNamespaceCostReportSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NamespaceReportAPIGetClusterNamespaceDataTransferCost request
	NamespaceReportAPIGetClusterNamespaceDataTransferCost(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferCostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCost request
	NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCost(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NamespaceReportAPIGetClusterNamespaceCostReportWithBody request with any body
	NamespaceReportAPIGetClusterNamespaceCostReportWithBody(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NamespaceReportAPIGetClusterNamespaceCostReport(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, body NamespaceReportAPIGetClusterNamespaceCostReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NamespaceReportAPIGetSingleNamespaceCostReport request
	NamespaceReportAPIGetSingleNamespaceCostReport(ctx context.Context, clusterId string, namespace string, params *NamespaceReportAPIGetSingleNamespaceCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetSingleWorkloadCostReport request
	WorkloadReportAPIGetSingleWorkloadCostReport(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetSingleWorkloadDataTransferCost request
	WorkloadReportAPIGetSingleWorkloadDataTransferCost(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetClusterWorkloadEfficiencyReportByName request
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportByName(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadTrafficDestinationsHistory request
	WorkloadReportAPIGetWorkloadTrafficDestinationsHistory(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadTrafficDestinations request
	WorkloadReportAPIGetWorkloadTrafficDestinations(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportConfigurationAPIGetReportingCapabilities request
	ReportConfigurationAPIGetReportingCapabilities(ctx context.Context, clusterId string, params *ReportConfigurationAPIGetReportingCapabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClusterResourceUsage request
	ClusterReportAPIGetClusterResourceUsage(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterResourceUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBody request with any body
	WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetClusterWorkloadRightsizingPatch(ctx context.Context, clusterId string, body WorkloadReportAPIGetClusterWorkloadRightsizingPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetRightsizingSummary request
	ClusterReportAPIGetRightsizingSummary(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClusterSavingsReport request
	ClusterReportAPIGetClusterSavingsReport(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterSavingsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClusterSummary request
	ClusterReportAPIGetClusterSummary(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadCostSummariesWithBody request with any body
	WorkloadReportAPIGetWorkloadCostSummariesWithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetWorkloadCostSummaries(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, body WorkloadReportAPIGetWorkloadCostSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetClusterWorkloadReport request
	WorkloadReportAPIGetClusterWorkloadReport(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetClusterWorkloadReport2WithBody request with any body
	WorkloadReportAPIGetClusterWorkloadReport2WithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetClusterWorkloadReport2(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, body WorkloadReportAPIGetClusterWorkloadReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetClusterWorkloadEfficiencyReport request
	WorkloadReportAPIGetClusterWorkloadEfficiencyReport(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBody request with any body
	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, body WorkloadReportAPIGetClusterWorkloadEfficiencyReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetClusterWorkloadLabels request
	WorkloadReportAPIGetClusterWorkloadLabels(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetNamespacesForClustersWithBody request with any body
	WorkloadReportAPIGetNamespacesForClustersWithBody(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetNamespacesForClusters(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, body WorkloadReportAPIGetNamespacesForClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeReportAPIGetNodeLabelNamesWithBody request with any body
	NodeReportAPIGetNodeLabelNamesWithBody(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeReportAPIGetNodeLabelNames(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, body NodeReportAPIGetNodeLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeReportAPIGetNodeLabelValuesWithBody request with any body
	NodeReportAPIGetNodeLabelValuesWithBody(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeReportAPIGetNodeLabelValues(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, body NodeReportAPIGetNodeLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetOrganizationClustersCostReport request
	ClusterReportAPIGetOrganizationClustersCostReport(ctx context.Context, params *ClusterReportAPIGetOrganizationClustersCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClustersSummary request
	ClusterReportAPIGetClustersSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClustersCostReport request
	ClusterReportAPIGetClustersCostReport(ctx context.Context, params *ClusterReportAPIGetClustersCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadLabelNamesWithBody request with any body
	WorkloadReportAPIGetWorkloadLabelNamesWithBody(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetWorkloadLabelNames(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, body WorkloadReportAPIGetWorkloadLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadLabelValuesWithBody request with any body
	WorkloadReportAPIGetWorkloadLabelValuesWithBody(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetWorkloadLabelValues(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, body WorkloadReportAPIGetWorkloadLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBody request with any body
	WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBody(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetWorkloadLabelValuesDeprecated(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, body WorkloadReportAPIGetWorkloadLabelValuesDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadReportAPIGetWorkloadsMetadataWithBody request with any body
	WorkloadReportAPIGetWorkloadsMetadataWithBody(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadReportAPIGetWorkloadsMetadata(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, body WorkloadReportAPIGetWorkloadsMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DedicatedInstanceAPIListDedicatedInstances request
	DedicatedInstanceAPIListDedicatedInstances(ctx context.Context, params *DedicatedInstanceAPIListDedicatedInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FeaturesAPIList request
	FeaturesAPIList(ctx context.Context, params *FeaturesAPIListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FeaturesAPIResolveWithBody request with any body
	FeaturesAPIResolveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FeaturesAPIResolve(ctx context.Context, body FeaturesAPIResolveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryBlacklistAPIListBlacklists request
	InventoryBlacklistAPIListBlacklists(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryBlacklistAPIAddBlacklistWithBody request with any body
	InventoryBlacklistAPIAddBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryBlacklistAPIAddBlacklist(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryBlacklistAPIRemoveBlacklistWithBody request with any body
	InventoryBlacklistAPIRemoveBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryBlacklistAPIRemoveBlacklist(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIListInvitations request
	UsersAPIListInvitations(ctx context.Context, params *UsersAPIListInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPICreateInvitationsWithBody request with any body
	UsersAPICreateInvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPICreateInvitations(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIDeleteInvitation request
	UsersAPIDeleteInvitation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIClaimInvitationWithBody request with any body
	UsersAPIClaimInvitationWithBody(ctx context.Context, invitationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIClaimInvitation(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIPollClusterActions request
	ClusterActionsAPIPollClusterActions(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIIngestLogsWithBody request with any body
	ClusterActionsAPIIngestLogsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterActionsAPIIngestLogs(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIAckClusterActionWithBody request with any body
	ClusterActionsAPIAckClusterActionWithBody(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterActionsAPIAckClusterAction(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlgorithmStatsAPISubmitWithBody request with any body
	AlgorithmStatsAPISubmitWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlgorithmStatsAPISubmit(ctx context.Context, clusterId string, body AlgorithmStatsAPISubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportConfigurationAPIGetEgressdScript request
	ReportConfigurationAPIGetEgressdScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvictorAPIGetAdvancedConfig request
	EvictorAPIGetAdvancedConfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvictorAPIUpsertAdvancedConfigWithBody request with any body
	EvictorAPIUpsertAdvancedConfigWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvictorAPIUpsertAdvancedConfig(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIFilterInstanceTypesWithBody request with any body
	NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIGenerateNodeTemplates request
	NodeTemplatesAPIGenerateNodeTemplates(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetKarpenterDefinitionsMigrationIntent request
	AutoscalerAPIGetKarpenterDefinitionsMigrationIntent(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIMigrateKarpenterDefinitionsWithBody request with any body
	AutoscalerAPIMigrateKarpenterDefinitionsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AutoscalerAPIMigrateKarpenterDefinitions(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIListConfigurations request
	NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPICreateConfigurationWithBody request with any body
	NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIGetSuggestedConfiguration request
	NodeConfigurationAPIGetSuggestedConfiguration(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIDeleteConfiguration request
	NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIGetConfiguration request
	NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIUpdateConfigurationWithBody request with any body
	NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPISetDefault request
	NodeConfigurationAPISetDefault(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIGetClusterNodeConstraints request
	PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIListNodeTemplates request
	NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPICreateNodeTemplateWithBody request with any body
	NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIDeleteNodeTemplate request
	NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIUpdateNodeTemplateWithBody request with any body
	NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIGetClusterPolicies request
	PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIUpsertClusterPoliciesWithBody request with any body
	PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetProblematicNodes request
	AutoscalerAPIGetProblematicNodes(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetProblematicWorkloads request
	AutoscalerAPIGetProblematicWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetRebalancedWorkloads request
	AutoscalerAPIGetRebalancedWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIListRebalancingJobs request
	ScheduledRebalancingAPIListRebalancingJobs(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPICreateRebalancingJobWithBody request with any body
	ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPICreateRebalancingJob(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIDeleteRebalancingJob request
	ScheduledRebalancingAPIDeleteRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIGetRebalancingJob request
	ScheduledRebalancingAPIGetRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIUpdateRebalancingJobWithBody request with any body
	ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPIUpdateRebalancingJob(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIListRebalancingPlans request
	AutoscalerAPIListRebalancingPlans(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGenerateRebalancingPlanWithBody request with any body
	AutoscalerAPIGenerateRebalancingPlanWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AutoscalerAPIGenerateRebalancingPlan(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetRebalancingPlan request
	AutoscalerAPIGetRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIExecuteRebalancingPlan request
	AutoscalerAPIExecuteRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody request with any body
	ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetClusterSettings request
	AutoscalerAPIGetClusterSettings(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterReportAPIGetClusterUnscheduledPods request
	ClusterReportAPIGetClusterUnscheduledPods(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetClusterWorkloads request
	AutoscalerAPIGetClusterWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIRegisterClusterWithBody request with any body
	ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsAPIGetOperation request
	OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateClusterWithBody request with any body
	ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteAssumeRolePrincipal request
	ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetAssumeRolePrincipal request
	ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateAssumeRolePrincipal request
	ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetAssumeRoleUser request
	ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCleanupScript request
	ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDisconnectClusterWithBody request with any body
	ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIHandleCloudEventWithBody request with any body
	ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIAddNodeWithBody request with any body
	ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDrainNodeWithBody request with any body
	ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIReconcileCluster request
	ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateClusterTagsWithBody request with any body
	ExternalClusterAPIUpdateClusterTagsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateClusterTags(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReport request
	OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReport(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReport request
	OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReport(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReport request
	OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReport(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReport request
	OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReport(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReport request
	OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReport(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReport request
	OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReport(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsUsageReport request
	OpenAILLMOptimizationAPIGetChatCompletionsUsageReport(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LLMSettingsAPIGetSettings request
	LLMSettingsAPIGetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LLMSettingsAPIUpsertSettingsWithBody request with any body
	LLMSettingsAPIUpsertSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LLMSettingsAPIUpsertSettings(ctx context.Context, body LLMSettingsAPIUpsertSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPICurrentUserProfile request
	UsersAPICurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIUpdateCurrentUserProfileWithBody request with any body
	UsersAPIUpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIUpdateCurrentUserProfile(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportMetricsAPIGetNodeTemplatePromMetrics request
	ReportMetricsAPIGetNodeTemplatePromMetrics(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportMetricsAPIGetWorkloadPromMetrics request
	ReportMetricsAPIGetWorkloadPromMetrics(ctx context.Context, clusterId string, params *ReportMetricsAPIGetWorkloadPromMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportMetricsAPIGetPromMetrics request
	ReportMetricsAPIGetPromMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIListNotifications request
	NotificationAPIListNotifications(ctx context.Context, params *NotificationAPIListNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIAckNotificationsWithBody request with any body
	NotificationAPIAckNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationAPIAckNotifications(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIListWebhookCategories request
	NotificationAPIListWebhookCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIListWebhookConfigs request
	NotificationAPIListWebhookConfigs(ctx context.Context, params *NotificationAPIListWebhookConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPICreateWebhookConfigWithBody request with any body
	NotificationAPICreateWebhookConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationAPICreateWebhookConfig(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIDeleteWebhookConfig request
	NotificationAPIDeleteWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIGetWebhookConfig request
	NotificationAPIGetWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIUpdateWebhookConfigWithBody request with any body
	NotificationAPIUpdateWebhookConfigWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationAPIUpdateWebhookConfig(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIGetNotification request
	NotificationAPIGetNotification(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIListOrganizations request
	UsersAPIListOrganizations(ctx context.Context, params *UsersAPIListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPICreateOrganizationWithBody request with any body
	UsersAPICreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPICreateOrganization(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetOrganizationReservationsBalance request
	InventoryAPIGetOrganizationReservationsBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetOrganizationResourceUsage request
	InventoryAPIGetOrganizationResourceUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIDeleteOrganization request
	UsersAPIDeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIGetOrganization request
	UsersAPIGetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIEditOrganizationWithBody request with any body
	UsersAPIEditOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIEditOrganization(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPISyncClusterResources request
	InventoryAPISyncClusterResources(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetReservations request
	InventoryAPIGetReservations(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIAddReservationWithBody request with any body
	InventoryAPIAddReservationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryAPIAddReservation(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetReservationsBalance request
	InventoryAPIGetReservationsBalance(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIOverwriteReservationsWithBody request with any body
	InventoryAPIOverwriteReservationsWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryAPIOverwriteReservations(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIDeleteReservation request
	InventoryAPIDeleteReservation(ctx context.Context, organizationId string, reservationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIListOrganizationUsers request
	UsersAPIListOrganizationUsers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIAddUserToOrganizationWithBody request with any body
	UsersAPIAddUserToOrganizationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIAddUserToOrganization(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIRemoveUserFromOrganization request
	UsersAPIRemoveUserFromOrganization(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIUpdateOrganizationUserWithBody request with any body
	UsersAPIUpdateOrganizationUserWithBody(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIUpdateOrganizationUser(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartnersAPIListOrganizations request
	PartnersAPIListOrganizations(ctx context.Context, partnerOrganizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartnersAPICreateOrganizationWithBody request with any body
	PartnersAPICreateOrganizationWithBody(ctx context.Context, partnerOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartnersAPICreateOrganization(ctx context.Context, partnerOrganizationId string, body PartnersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartnersAPICreateTokenWithBody request with any body
	PartnersAPICreateTokenWithBody(ctx context.Context, partnerOrganizationId string, childOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartnersAPICreateToken(ctx context.Context, partnerOrganizationId string, childOrganizationId string, body PartnersAPICreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartnersAPIDeleteToken request
	PartnersAPIDeleteToken(ctx context.Context, partnerOrganizationId string, childOrganizationId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PricingAPIGetPricingForClusterNodes request
	PricingAPIGetPricingForClusterNodes(ctx context.Context, clusterId string, params *PricingAPIGetPricingForClusterNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PricingAPIGetPricingForClusterNode request
	PricingAPIGetPricingForClusterNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PricingAPIGetPricingForOrganizationNodes request
	PricingAPIGetPricingForOrganizationNodes(ctx context.Context, params *PricingAPIGetPricingForOrganizationNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PricingAPISyncGCPBillingAPIData request
	PricingAPISyncGCPBillingAPIData(ctx context.Context, params *PricingAPISyncGCPBillingAPIDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIListRebalancingSchedules request
	ScheduledRebalancingAPIListRebalancingSchedules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPICreateRebalancingScheduleWithBody request with any body
	ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPICreateRebalancingSchedule(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody request with any body
	ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIDeleteRebalancingSchedule request
	ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIGetRebalancingSchedule request
	ScheduledRebalancingAPIGetRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsageAPIGetUsageReport request
	UsageAPIGetUsageReport(ctx context.Context, params *UsageAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsageAPIGetUsageSummary request
	UsageAPIGetUsageSummary(ctx context.Context, params *UsageAPIGetUsageSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetCommitmentsAssignments request
	CommitmentsAPIGetCommitmentsAssignments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPICreateCommitmentAssignment request
	CommitmentsAPICreateCommitmentAssignment(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIDeleteCommitmentAssignment request
	CommitmentsAPIDeleteCommitmentAssignment(ctx context.Context, assignmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetCommitments request
	CommitmentsAPIGetCommitments(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIImportAzureReservationsWithBody request with any body
	CommitmentsAPIImportAzureReservationsWithBody(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIImportAzureReservations(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIImportGCPCommitmentsWithBody request with any body
	CommitmentsAPIImportGCPCommitmentsWithBody(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIImportGCPCommitments(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetGCPCommitmentsImportScript request
	CommitmentsAPIGetGCPCommitmentsImportScript(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIDeleteCommitment request
	CommitmentsAPIDeleteCommitment(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIUpdateCommitmentWithBody request with any body
	CommitmentsAPIUpdateCommitmentWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIUpdateCommitment(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetCommitmentAssignments request
	CommitmentsAPIGetCommitmentAssignments(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIReplaceCommitmentAssignmentsWithBody request with any body
	CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIReplaceCommitmentAssignments(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetGCPCommitmentsScriptTemplate request
	CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportConfigurationAPIGetEgressdScriptTemplate request
	ReportConfigurationAPIGetEgressdScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuntimeSecurityAPIGetKvisordScriptTemplate request
	RuntimeSecurityAPIGetKvisordScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetInstallCmd request
	WorkloadOptimizationAPIGetInstallCmd(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetInstallScript request
	WorkloadOptimizationAPIGetInstallScript(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCleanupScriptTemplate request
	ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAgentsStatusWithBody request with any body
	InsightsAPIGetAgentsStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIGetAgentsStatus(ctx context.Context, body InsightsAPIGetAgentsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAttackPaths request
	InsightsAPIGetAttackPaths(ctx context.Context, params *InsightsAPIGetAttackPathsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAttackPathDetails request
	InsightsAPIGetAttackPathDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesReport request
	InsightsAPIGetBestPracticesReport(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetChecksResourcesWithBody request with any body
	InsightsAPIGetChecksResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIGetChecksResources(ctx context.Context, body InsightsAPIGetChecksResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesCheckDetails request
	InsightsAPIGetBestPracticesCheckDetails(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIEnforceCheckPolicyWithBody request with any body
	InsightsAPIEnforceCheckPolicyWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIEnforceCheckPolicy(ctx context.Context, ruleId string, body InsightsAPIEnforceCheckPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetCheckExceptions request
	InsightsAPIGetCheckExceptions(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPISaveCheckExceptionsWithBody request with any body
	InsightsAPISaveCheckExceptionsWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPISaveCheckExceptions(ctx context.Context, ruleId string, body InsightsAPISaveCheckExceptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIPreviewExceptionGroupsResourcesWithBody request with any body
	InsightsAPIPreviewExceptionGroupsResourcesWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIPreviewExceptionGroupsResources(ctx context.Context, ruleId string, body InsightsAPIPreviewExceptionGroupsResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetCheckResourcesWithBody request with any body
	InsightsAPIGetCheckResourcesWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIGetCheckResources(ctx context.Context, ruleId string, body InsightsAPIGetCheckResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIDeletePolicyEnforcement request
	InsightsAPIDeletePolicyEnforcement(ctx context.Context, enforcementId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesReportFilters request
	InsightsAPIGetBestPracticesReportFilters(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIScheduleBestPracticesScanWithBody request with any body
	InsightsAPIScheduleBestPracticesScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIScheduleBestPracticesScan(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesReportSummary request
	InsightsAPIGetBestPracticesReportSummary(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetDailySummary request
	InsightsAPIGetDailySummary(ctx context.Context, date string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetExceptedChecks request
	InsightsAPIGetExceptedChecks(ctx context.Context, params *InsightsAPIGetExceptedChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImages request
	InsightsAPIGetContainerImages(ctx context.Context, params *InsightsAPIGetContainerImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIDeleteImagesWithBody request with any body
	InsightsAPIDeleteImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIDeleteImages(ctx context.Context, body InsightsAPIDeleteImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIImageExceptionChangesWithBody request with any body
	InsightsAPIImageExceptionChangesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIImageExceptionChanges(ctx context.Context, body InsightsAPIImageExceptionChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImagesFilters request
	InsightsAPIGetContainerImagesFilters(ctx context.Context, params *InsightsAPIGetContainerImagesFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImagesSummary request
	InsightsAPIGetContainerImagesSummary(ctx context.Context, params *InsightsAPIGetContainerImagesSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetPublicImageAlternatives request
	InsightsAPIGetPublicImageAlternatives(ctx context.Context, tagId string, params *InsightsAPIGetPublicImageAlternativesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImageDetails request
	InsightsAPIGetContainerImageDetails(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImageDigests request
	InsightsAPIGetContainerImageDigests(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImagePackages request
	InsightsAPIGetContainerImagePackages(ctx context.Context, tagId string, params *InsightsAPIGetContainerImagePackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImageResources request
	InsightsAPIGetContainerImageResources(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImageVulnerabilities request
	InsightsAPIGetContainerImageVulnerabilities(ctx context.Context, tagId string, params *InsightsAPIGetContainerImageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetContainerImagePackageVulnerabilityDetails request
	InsightsAPIGetContainerImagePackageVulnerabilityDetails(ctx context.Context, tagId string, pkgVulnId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAttackPathsOverview request
	InsightsAPIGetAttackPathsOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesOverview request
	InsightsAPIGetBestPracticesOverview(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetImageSecurityOverview request
	InsightsAPIGetImageSecurityOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetNodesOverview request
	InsightsAPIGetNodesOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetResourceDetails request
	InsightsAPIGetResourceDetails(ctx context.Context, id string, params *InsightsAPIGetResourceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAgentStatus request
	InsightsAPIGetAgentStatus(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIIngestAgentLogWithBody request with any body
	InsightsAPIIngestAgentLogWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIIngestAgentLog(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAgentSyncStateWithBody request with any body
	InsightsAPIGetAgentSyncStateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIGetAgentSyncState(ctx context.Context, clusterId string, body InsightsAPIGetAgentSyncStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIPostAgentTelemetryWithBody request with any body
	InsightsAPIPostAgentTelemetryWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIPostAgentTelemetry(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIListIntegrations request
	InsightsAPIListIntegrations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPICreateIntegrationWithBody request with any body
	InsightsAPICreateIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPICreateIntegration(ctx context.Context, body InsightsAPICreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIDeleteIntegration request
	InsightsAPIDeleteIntegration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetIntegration request
	InsightsAPIGetIntegration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIUpdateIntegrationWithBody request with any body
	InsightsAPIUpdateIntegrationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIUpdateIntegration(ctx context.Context, id string, body InsightsAPIUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPICreateTicketWithBody request with any body
	InsightsAPICreateTicketWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPICreateTicket(ctx context.Context, id string, body InsightsAPICreateTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuntimeSecurityAPIGetAnomalies request
	RuntimeSecurityAPIGetAnomalies(ctx context.Context, params *RuntimeSecurityAPIGetAnomaliesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuntimeSecurityAPIAckAnomalies request
	RuntimeSecurityAPIAckAnomalies(ctx context.Context, params *RuntimeSecurityAPIAckAnomaliesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuntimeSecurityAPICloseAnomalies request
	RuntimeSecurityAPICloseAnomalies(ctx context.Context, params *RuntimeSecurityAPICloseAnomaliesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuntimeSecurityAPIGetAnomaly request
	RuntimeSecurityAPIGetAnomaly(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuntimeSecurityAPIGetAnomaliesOverview request
	RuntimeSecurityAPIGetAnomaliesOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuntimeSecurityAPIGetKvisordScript request
	RuntimeSecurityAPIGetKvisordScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIConfigureClusterSecuritySettingsWithBody request with any body
	InsightsAPIConfigureClusterSecuritySettingsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIConfigureClusterSecuritySettings(ctx context.Context, id string, body InsightsAPIConfigureClusterSecuritySettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIListSSOConnections request
	SSOAPIListSSOConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPICreateSSOConnectionWithBody request with any body
	SSOAPICreateSSOConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SSOAPICreateSSOConnection(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIDeleteSSOConnection request
	SSOAPIDeleteSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIGetSSOConnection request
	SSOAPIGetSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIUpdateSSOConnectionWithBody request with any body
	SSOAPIUpdateSSOConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SSOAPIUpdateSSOConnection(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIListAvailableRebalancingTZ request
	ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetAgentStatus2 request
	WorkloadOptimizationAPIGetAgentStatus2(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloadScalingPolicies request
	WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody request with any body
	WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIDeleteWorkloadScalingPolicy request
	WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody request with any body
	WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody request with any body
	WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloadEvents2 request
	WorkloadOptimizationAPIListWorkloadEvents2(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEvents2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloads2 request
	WorkloadOptimizationAPIListWorkloads2(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetWorkload2 request
	WorkloadOptimizationAPIGetWorkload2(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkload2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIUpdateWorkload2WithBody request with any body
	WorkloadOptimizationAPIUpdateWorkload2WithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIUpdateWorkload2(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkload2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetInstallCmd2 request
	WorkloadOptimizationAPIGetInstallCmd2(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmd2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetInstallScript2 request
	WorkloadOptimizationAPIGetInstallScript2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AutoscalerAPIGetAgentScript(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetAgentScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuditAPIListAuditEntries(ctx context.Context, params *AuditAPIListAuditEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuditAPIListAuditEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginCallbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SamlAcs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSamlAcsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIListAuthTokens(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIListAuthTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPICreateAuthTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPICreateAuthToken(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPICreateAuthTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIDeleteAuthTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIGetAuthTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIUpdateAuthTokenRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIUpdateAuthTokenRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingSso(ctx context.Context, params *BillingSsoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingSsoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Subscription(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriptionCheckout(ctx context.Context, params *SubscriptionCheckoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionCheckoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingAPIGetUsageReport(ctx context.Context, params *BillingAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingAPIGetUsageReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetAgentStatus(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetAgentStatusRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComponentsAPIIngestLogsWithBody(ctx context.Context, clusterId string, component string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsAPIIngestLogsRequestWithBody(c.Server, clusterId, component, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComponentsAPIIngestLogs(ctx context.Context, clusterId string, component string, body ComponentsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsAPIIngestLogsRequest(c.Server, clusterId, component, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloadEvents(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloadEventsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetWorkload(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetWorkloadRequest(c.Server, clusterId, workloadId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody(c.Server, clusterId, workloadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkload(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadRequest(c.Server, clusterId, workloadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetAllocationGroupCostTimedSummaries(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostTimedSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetAllocationGroupCostTimedSummariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetAllocationGroupCostSummaries(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetAllocationGroupCostSummariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIListAllocationGroups(ctx context.Context, params *AllocationGroupAPIListAllocationGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIListAllocationGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPICreateAllocationGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPICreateAllocationGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPICreateAllocationGroup(ctx context.Context, body AllocationGroupAPICreateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPICreateAllocationGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetAllocationGroupTotalCostTimed(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupTotalCostTimedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetAllocationGroupTotalCostTimedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetCostAllocationGroupDataTransferSummary(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetCostAllocationGroupDataTransferSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetAllocationGroupEfficiencySummary(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupEfficiencySummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetAllocationGroupEfficiencySummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetCostAllocationGroupSummary(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetCostAllocationGroupSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloads(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIGetCostAllocationGroupWorkloads(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIGetCostAllocationGroupWorkloadsRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIDeleteAllocationGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIDeleteAllocationGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIUpdateAllocationGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIUpdateAllocationGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocationGroupAPIUpdateAllocationGroup(ctx context.Context, id string, body AllocationGroupAPIUpdateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocationGroupAPIUpdateAllocationGroupRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClusterCostReport(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClusterCostReportRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadDataTransferCost(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadDataTransferCostRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadDataTransferCost2WithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadDataTransferCost2RequestWithBody(c.Server, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadDataTransferCost2(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, body WorkloadReportAPIGetWorkloadDataTransferCost2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadDataTransferCost2Request(c.Server, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClusterEfficiencyReport(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterEfficiencyReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClusterEfficiencyReportRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetSavingsRecommendation(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetSavingsRecommendationRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClusterCostHistory(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClusterCostHistoryRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportConfigurationAPIGetGroupingConfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportConfigurationAPIGetGroupingConfigRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportConfigurationAPIUpsertGroupingConfigWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportConfigurationAPIUpsertGroupingConfigRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportConfigurationAPIUpsertGroupingConfig(ctx context.Context, clusterId string, body ReportConfigurationAPIUpsertGroupingConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportConfigurationAPIUpsertGroupingConfigRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBody(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceReportAPIGetClusterNamespaceCostReportSummariesRequestWithBody(c.Server, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceReportAPIGetClusterNamespaceCostReportSummaries(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, body NamespaceReportAPIGetClusterNamespaceCostReportSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceReportAPIGetClusterNamespaceCostReportSummariesRequest(c.Server, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceReportAPIGetClusterNamespaceDataTransferCost(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferCostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceReportAPIGetClusterNamespaceDataTransferCostRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCost(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceReportAPIGetClusterNamespaceCostReportWithBody(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceReportAPIGetClusterNamespaceCostReportRequestWithBody(c.Server, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceReportAPIGetClusterNamespaceCostReport(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, body NamespaceReportAPIGetClusterNamespaceCostReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceReportAPIGetClusterNamespaceCostReportRequest(c.Server, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceReportAPIGetSingleNamespaceCostReport(ctx context.Context, clusterId string, namespace string, params *NamespaceReportAPIGetSingleNamespaceCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceReportAPIGetSingleNamespaceCostReportRequest(c.Server, clusterId, namespace, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetSingleWorkloadCostReport(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetSingleWorkloadCostReportRequest(c.Server, clusterId, namespace, workloadType, workloadName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetSingleWorkloadDataTransferCost(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetSingleWorkloadDataTransferCostRequest(c.Server, clusterId, namespace, workloadType, workloadName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadEfficiencyReportByName(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameRequest(c.Server, clusterId, namespace, workloadType, workloadName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadTrafficDestinationsHistory(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadTrafficDestinationsHistoryRequest(c.Server, clusterId, namespace, workloadType, workloadName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadTrafficDestinations(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadTrafficDestinationsRequest(c.Server, clusterId, namespace, workloadType, workloadName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportConfigurationAPIGetReportingCapabilities(ctx context.Context, clusterId string, params *ReportConfigurationAPIGetReportingCapabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportConfigurationAPIGetReportingCapabilitiesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClusterResourceUsage(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterResourceUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClusterResourceUsageRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadRightsizingPatchRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadRightsizingPatch(ctx context.Context, clusterId string, body WorkloadReportAPIGetClusterWorkloadRightsizingPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadRightsizingPatchRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetRightsizingSummary(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetRightsizingSummaryRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClusterSavingsReport(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterSavingsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClusterSavingsReportRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClusterSummary(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClusterSummaryRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadCostSummariesWithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadCostSummariesRequestWithBody(c.Server, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadCostSummaries(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, body WorkloadReportAPIGetWorkloadCostSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadCostSummariesRequest(c.Server, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadReport(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadReportRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadReport2WithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadReport2RequestWithBody(c.Server, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadReport2(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, body WorkloadReportAPIGetClusterWorkloadReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadReport2Request(c.Server, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadEfficiencyReport(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadEfficiencyReportRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBody(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadEfficiencyReport2RequestWithBody(c.Server, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadEfficiencyReport2(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, body WorkloadReportAPIGetClusterWorkloadEfficiencyReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadEfficiencyReport2Request(c.Server, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetClusterWorkloadLabels(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetClusterWorkloadLabelsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetNamespacesForClustersWithBody(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetNamespacesForClustersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetNamespacesForClusters(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, body WorkloadReportAPIGetNamespacesForClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetNamespacesForClustersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeReportAPIGetNodeLabelNamesWithBody(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeReportAPIGetNodeLabelNamesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeReportAPIGetNodeLabelNames(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, body NodeReportAPIGetNodeLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeReportAPIGetNodeLabelNamesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeReportAPIGetNodeLabelValuesWithBody(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeReportAPIGetNodeLabelValuesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeReportAPIGetNodeLabelValues(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, body NodeReportAPIGetNodeLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeReportAPIGetNodeLabelValuesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetOrganizationClustersCostReport(ctx context.Context, params *ClusterReportAPIGetOrganizationClustersCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetOrganizationClustersCostReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClustersSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClustersSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClustersCostReport(ctx context.Context, params *ClusterReportAPIGetClustersCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClustersCostReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadLabelNamesWithBody(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadLabelNamesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadLabelNames(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, body WorkloadReportAPIGetWorkloadLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadLabelNamesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadLabelValuesWithBody(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadLabelValuesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadLabelValues(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, body WorkloadReportAPIGetWorkloadLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadLabelValuesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBody(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadLabelValuesDeprecatedRequestWithBody(c.Server, label, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadLabelValuesDeprecated(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, body WorkloadReportAPIGetWorkloadLabelValuesDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadLabelValuesDeprecatedRequest(c.Server, label, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadsMetadataWithBody(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadsMetadataRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadReportAPIGetWorkloadsMetadata(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, body WorkloadReportAPIGetWorkloadsMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadReportAPIGetWorkloadsMetadataRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DedicatedInstanceAPIListDedicatedInstances(ctx context.Context, params *DedicatedInstanceAPIListDedicatedInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDedicatedInstanceAPIListDedicatedInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FeaturesAPIList(ctx context.Context, params *FeaturesAPIListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFeaturesAPIListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FeaturesAPIResolveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFeaturesAPIResolveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FeaturesAPIResolve(ctx context.Context, body FeaturesAPIResolveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFeaturesAPIResolveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIListBlacklists(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIListBlacklistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIAddBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIAddBlacklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIAddBlacklist(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIAddBlacklistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIRemoveBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIRemoveBlacklist(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIRemoveBlacklistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIListInvitations(ctx context.Context, params *UsersAPIListInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIListInvitationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateInvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateInvitationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateInvitations(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateInvitationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIDeleteInvitation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIDeleteInvitationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIClaimInvitationWithBody(ctx context.Context, invitationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIClaimInvitationRequestWithBody(c.Server, invitationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIClaimInvitation(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIClaimInvitationRequest(c.Server, invitationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIPollClusterActions(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIPollClusterActionsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIIngestLogsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIIngestLogsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIIngestLogs(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIIngestLogsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIAckClusterActionWithBody(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIAckClusterActionRequestWithBody(c.Server, clusterId, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIAckClusterAction(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIAckClusterActionRequest(c.Server, clusterId, actionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlgorithmStatsAPISubmitWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlgorithmStatsAPISubmitRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlgorithmStatsAPISubmit(ctx context.Context, clusterId string, body AlgorithmStatsAPISubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlgorithmStatsAPISubmitRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportConfigurationAPIGetEgressdScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportConfigurationAPIGetEgressdScriptRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvictorAPIGetAdvancedConfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvictorAPIGetAdvancedConfigRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvictorAPIUpsertAdvancedConfigWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvictorAPIUpsertAdvancedConfigRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvictorAPIUpsertAdvancedConfig(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvictorAPIUpsertAdvancedConfigRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIFilterInstanceTypesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIGenerateNodeTemplates(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIGenerateNodeTemplatesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetKarpenterDefinitionsMigrationIntent(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetKarpenterDefinitionsMigrationIntentRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIMigrateKarpenterDefinitionsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIMigrateKarpenterDefinitions(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIMigrateKarpenterDefinitionsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIListConfigurationsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPICreateConfigurationRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPICreateConfigurationRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIGetSuggestedConfiguration(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIGetSuggestedConfigurationRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIDeleteConfigurationRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIGetConfigurationRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(c.Server, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIUpdateConfigurationRequest(c.Server, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPISetDefault(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPISetDefaultRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIGetClusterNodeConstraintsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIListNodeTemplatesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPICreateNodeTemplateRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIDeleteNodeTemplateRequest(c.Server, clusterId, nodeTemplateName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(c.Server, clusterId, nodeTemplateName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIUpdateNodeTemplateRequest(c.Server, clusterId, nodeTemplateName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIGetClusterPoliciesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIUpsertClusterPoliciesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetProblematicNodes(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetProblematicNodesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetProblematicWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetProblematicWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetRebalancedWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetRebalancedWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIListRebalancingJobs(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIListRebalancingJobsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingJob(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingJobRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIDeleteRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIDeleteRebalancingJobRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIGetRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIGetRebalancingJobRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody(c.Server, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingJob(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingJobRequest(c.Server, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIListRebalancingPlans(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIListRebalancingPlansRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGenerateRebalancingPlanWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGenerateRebalancingPlan(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGenerateRebalancingPlanRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIExecuteRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIExecuteRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIPreviewRebalancingScheduleRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetClusterSettings(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetClusterSettingsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterReportAPIGetClusterUnscheduledPods(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterReportAPIGetClusterUnscheduledPodsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetClusterWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetClusterWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsAPIGetOperationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetAssumeRoleUserRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCleanupScriptRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListNodesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteNodeRequest(c.Server, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequestWithBody(c.Server, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequest(c.Server, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIReconcileClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterTagsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterTagsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterTags(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterTagsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateClusterTokenRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReport(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReport(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportRequest(c.Server, apiKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReport(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportRequest(c.Server, apiKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReport(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportRequest(c.Server, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReport(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportRequest(c.Server, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReport(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenAILLMOptimizationAPIGetChatCompletionsUsageReport(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenAILLMOptimizationAPIGetChatCompletionsUsageReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LLMSettingsAPIGetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLLMSettingsAPIGetSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LLMSettingsAPIUpsertSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLLMSettingsAPIUpsertSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LLMSettingsAPIUpsertSettings(ctx context.Context, body LLMSettingsAPIUpsertSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLLMSettingsAPIUpsertSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICurrentUserProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateCurrentUserProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateCurrentUserProfile(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateCurrentUserProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportMetricsAPIGetNodeTemplatePromMetrics(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportMetricsAPIGetNodeTemplatePromMetricsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportMetricsAPIGetWorkloadPromMetrics(ctx context.Context, clusterId string, params *ReportMetricsAPIGetWorkloadPromMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportMetricsAPIGetWorkloadPromMetricsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportMetricsAPIGetPromMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportMetricsAPIGetPromMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIListNotifications(ctx context.Context, params *NotificationAPIListNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIListNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIAckNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIAckNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIAckNotifications(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIAckNotificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIListWebhookCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIListWebhookCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIListWebhookConfigs(ctx context.Context, params *NotificationAPIListWebhookConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIListWebhookConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPICreateWebhookConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPICreateWebhookConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPICreateWebhookConfig(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPICreateWebhookConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIDeleteWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIDeleteWebhookConfigRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIGetWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIGetWebhookConfigRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIUpdateWebhookConfigWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIUpdateWebhookConfigRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIUpdateWebhookConfig(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIUpdateWebhookConfigRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIGetNotification(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIGetNotificationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIListOrganizations(ctx context.Context, params *UsersAPIListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIListOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateOrganization(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetOrganizationReservationsBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetOrganizationReservationsBalanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetOrganizationResourceUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetOrganizationResourceUsageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIDeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIDeleteOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIGetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIGetOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIEditOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIEditOrganizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIEditOrganization(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIEditOrganizationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPISyncClusterResources(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPISyncClusterResourcesRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetReservations(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetReservationsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIAddReservationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIAddReservationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIAddReservation(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIAddReservationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetReservationsBalance(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetReservationsBalanceRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIOverwriteReservationsWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIOverwriteReservationsRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIOverwriteReservations(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIOverwriteReservationsRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIDeleteReservation(ctx context.Context, organizationId string, reservationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIDeleteReservationRequest(c.Server, organizationId, reservationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIListOrganizationUsers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIListOrganizationUsersRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIAddUserToOrganizationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIAddUserToOrganizationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIAddUserToOrganization(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIAddUserToOrganizationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIRemoveUserFromOrganization(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIRemoveUserFromOrganizationRequest(c.Server, organizationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateOrganizationUserWithBody(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateOrganizationUserRequestWithBody(c.Server, organizationId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateOrganizationUser(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateOrganizationUserRequest(c.Server, organizationId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnersAPIListOrganizations(ctx context.Context, partnerOrganizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnersAPIListOrganizationsRequest(c.Server, partnerOrganizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnersAPICreateOrganizationWithBody(ctx context.Context, partnerOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnersAPICreateOrganizationRequestWithBody(c.Server, partnerOrganizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnersAPICreateOrganization(ctx context.Context, partnerOrganizationId string, body PartnersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnersAPICreateOrganizationRequest(c.Server, partnerOrganizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnersAPICreateTokenWithBody(ctx context.Context, partnerOrganizationId string, childOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnersAPICreateTokenRequestWithBody(c.Server, partnerOrganizationId, childOrganizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnersAPICreateToken(ctx context.Context, partnerOrganizationId string, childOrganizationId string, body PartnersAPICreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnersAPICreateTokenRequest(c.Server, partnerOrganizationId, childOrganizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnersAPIDeleteToken(ctx context.Context, partnerOrganizationId string, childOrganizationId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnersAPIDeleteTokenRequest(c.Server, partnerOrganizationId, childOrganizationId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PricingAPIGetPricingForClusterNodes(ctx context.Context, clusterId string, params *PricingAPIGetPricingForClusterNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPricingAPIGetPricingForClusterNodesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PricingAPIGetPricingForClusterNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPricingAPIGetPricingForClusterNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PricingAPIGetPricingForOrganizationNodes(ctx context.Context, params *PricingAPIGetPricingForOrganizationNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPricingAPIGetPricingForOrganizationNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PricingAPISyncGCPBillingAPIData(ctx context.Context, params *PricingAPISyncGCPBillingAPIDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPricingAPISyncGCPBillingAPIDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIListRebalancingSchedules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIListRebalancingSchedulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingSchedule(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingScheduleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingScheduleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIDeleteRebalancingScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIGetRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIGetRebalancingScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsageAPIGetUsageReport(ctx context.Context, params *UsageAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsageAPIGetUsageReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsageAPIGetUsageSummary(ctx context.Context, params *UsageAPIGetUsageSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsageAPIGetUsageSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetCommitmentsAssignments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetCommitmentsAssignmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPICreateCommitmentAssignment(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPICreateCommitmentAssignmentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIDeleteCommitmentAssignment(ctx context.Context, assignmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIDeleteCommitmentAssignmentRequest(c.Server, assignmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetCommitments(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetCommitmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportAzureReservationsWithBody(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportAzureReservationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportAzureReservations(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportAzureReservationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportGCPCommitmentsWithBody(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportGCPCommitmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportGCPCommitments(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportGCPCommitmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetGCPCommitmentsImportScript(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetGCPCommitmentsImportScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIDeleteCommitment(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIDeleteCommitmentRequest(c.Server, commitmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIUpdateCommitmentWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIUpdateCommitmentRequestWithBody(c.Server, commitmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIUpdateCommitment(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIUpdateCommitmentRequest(c.Server, commitmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetCommitmentAssignments(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetCommitmentAssignmentsRequest(c.Server, commitmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody(c.Server, commitmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIReplaceCommitmentAssignments(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIReplaceCommitmentAssignmentsRequest(c.Server, commitmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetGCPCommitmentsScriptTemplateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportConfigurationAPIGetEgressdScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportConfigurationAPIGetEgressdScriptTemplateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuntimeSecurityAPIGetKvisordScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuntimeSecurityAPIGetKvisordScriptTemplateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetInstallCmd(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetInstallCmdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetInstallScript(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetInstallScriptRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCleanupScriptTemplateRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptTemplateRequest(c.Server, provider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAgentsStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAgentsStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAgentsStatus(ctx context.Context, body InsightsAPIGetAgentsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAgentsStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAttackPaths(ctx context.Context, params *InsightsAPIGetAttackPathsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAttackPathsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAttackPathDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAttackPathDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesReport(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetChecksResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetChecksResourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetChecksResources(ctx context.Context, body InsightsAPIGetChecksResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetChecksResourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesCheckDetails(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesCheckDetailsRequest(c.Server, ruleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIEnforceCheckPolicyWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIEnforceCheckPolicyRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIEnforceCheckPolicy(ctx context.Context, ruleId string, body InsightsAPIEnforceCheckPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIEnforceCheckPolicyRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetCheckExceptions(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetCheckExceptionsRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPISaveCheckExceptionsWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPISaveCheckExceptionsRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPISaveCheckExceptions(ctx context.Context, ruleId string, body InsightsAPISaveCheckExceptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPISaveCheckExceptionsRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIPreviewExceptionGroupsResourcesWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIPreviewExceptionGroupsResourcesRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIPreviewExceptionGroupsResources(ctx context.Context, ruleId string, body InsightsAPIPreviewExceptionGroupsResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIPreviewExceptionGroupsResourcesRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetCheckResourcesWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetCheckResourcesRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetCheckResources(ctx context.Context, ruleId string, body InsightsAPIGetCheckResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetCheckResourcesRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIDeletePolicyEnforcement(ctx context.Context, enforcementId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIDeletePolicyEnforcementRequest(c.Server, enforcementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesReportFilters(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesReportFiltersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIScheduleBestPracticesScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIScheduleBestPracticesScanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIScheduleBestPracticesScan(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIScheduleBestPracticesScanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesReportSummary(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesReportSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetDailySummary(ctx context.Context, date string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetDailySummaryRequest(c.Server, date)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetExceptedChecks(ctx context.Context, params *InsightsAPIGetExceptedChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetExceptedChecksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImages(ctx context.Context, params *InsightsAPIGetContainerImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIDeleteImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIDeleteImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIDeleteImages(ctx context.Context, body InsightsAPIDeleteImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIDeleteImagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIImageExceptionChangesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIImageExceptionChangesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIImageExceptionChanges(ctx context.Context, body InsightsAPIImageExceptionChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIImageExceptionChangesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImagesFilters(ctx context.Context, params *InsightsAPIGetContainerImagesFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImagesFiltersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImagesSummary(ctx context.Context, params *InsightsAPIGetContainerImagesSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImagesSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetPublicImageAlternatives(ctx context.Context, tagId string, params *InsightsAPIGetPublicImageAlternativesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetPublicImageAlternativesRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImageDetails(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImageDetailsRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImageDigests(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImageDigestsRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImagePackages(ctx context.Context, tagId string, params *InsightsAPIGetContainerImagePackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImagePackagesRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImageResources(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImageResourcesRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImageVulnerabilities(ctx context.Context, tagId string, params *InsightsAPIGetContainerImageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImageVulnerabilitiesRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetContainerImagePackageVulnerabilityDetails(ctx context.Context, tagId string, pkgVulnId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetContainerImagePackageVulnerabilityDetailsRequest(c.Server, tagId, pkgVulnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAttackPathsOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAttackPathsOverviewRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesOverview(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesOverviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetImageSecurityOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetImageSecurityOverviewRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetNodesOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetNodesOverviewRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetResourceDetails(ctx context.Context, id string, params *InsightsAPIGetResourceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetResourceDetailsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAgentStatus(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAgentStatusRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIIngestAgentLogWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIIngestAgentLogRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIIngestAgentLog(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIIngestAgentLogRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAgentSyncStateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAgentSyncStateRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAgentSyncState(ctx context.Context, clusterId string, body InsightsAPIGetAgentSyncStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAgentSyncStateRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIPostAgentTelemetryWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIPostAgentTelemetryRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIPostAgentTelemetry(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIPostAgentTelemetryRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIListIntegrations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIListIntegrationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPICreateIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPICreateIntegrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPICreateIntegration(ctx context.Context, body InsightsAPICreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPICreateIntegrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIDeleteIntegration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIDeleteIntegrationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetIntegration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetIntegrationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIUpdateIntegrationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIUpdateIntegrationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIUpdateIntegration(ctx context.Context, id string, body InsightsAPIUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIUpdateIntegrationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPICreateTicketWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPICreateTicketRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPICreateTicket(ctx context.Context, id string, body InsightsAPICreateTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPICreateTicketRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuntimeSecurityAPIGetAnomalies(ctx context.Context, params *RuntimeSecurityAPIGetAnomaliesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuntimeSecurityAPIGetAnomaliesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuntimeSecurityAPIAckAnomalies(ctx context.Context, params *RuntimeSecurityAPIAckAnomaliesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuntimeSecurityAPIAckAnomaliesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuntimeSecurityAPICloseAnomalies(ctx context.Context, params *RuntimeSecurityAPICloseAnomaliesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuntimeSecurityAPICloseAnomaliesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuntimeSecurityAPIGetAnomaly(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuntimeSecurityAPIGetAnomalyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuntimeSecurityAPIGetAnomaliesOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuntimeSecurityAPIGetAnomaliesOverviewRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuntimeSecurityAPIGetKvisordScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuntimeSecurityAPIGetKvisordScriptRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIConfigureClusterSecuritySettingsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIConfigureClusterSecuritySettingsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIConfigureClusterSecuritySettings(ctx context.Context, id string, body InsightsAPIConfigureClusterSecuritySettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIConfigureClusterSecuritySettingsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIListSSOConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIListSSOConnectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPICreateSSOConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPICreateSSOConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPICreateSSOConnection(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPICreateSSOConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIDeleteSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIDeleteSSOConnectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIGetSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIGetSSOConnectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIUpdateSSOConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIUpdateSSOConnectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIUpdateSSOConnection(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIUpdateSSOConnectionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIListAvailableRebalancingTZRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetAgentStatus2(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetAgentStatus2Request(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloadScalingPoliciesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIDeleteWorkloadScalingPolicyRequest(c.Server, clusterId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody(c.Server, clusterId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequest(c.Server, clusterId, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody(c.Server, clusterId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest(c.Server, clusterId, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloadEvents2(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEvents2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloadEvents2Request(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloads2(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloads2Request(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetWorkload2(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkload2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetWorkload2Request(c.Server, clusterId, workloadId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkload2WithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkload2RequestWithBody(c.Server, clusterId, workloadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkload2(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkload2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkload2Request(c.Server, clusterId, workloadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetInstallCmd2(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmd2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetInstallCmd2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetInstallScript2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetInstallScript2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAutoscalerAPIGetAgentScriptRequest generates requests for AutoscalerAPIGetAgentScript
func NewAutoscalerAPIGetAgentScriptRequest(server string, params *AutoscalerAPIGetAgentScriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/agent.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EksRegion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.region", runtime.ParamLocationQuery, *params.EksRegion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EksAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.accountId", runtime.ParamLocationQuery, *params.EksAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EksClusterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.clusterName", runtime.ParamLocationQuery, *params.EksClusterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GkeRegion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.region", runtime.ParamLocationQuery, *params.GkeRegion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GkeProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.projectId", runtime.ParamLocationQuery, *params.GkeProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GkeClusterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.clusterName", runtime.ParamLocationQuery, *params.GkeClusterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GkeLocation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.location", runtime.ParamLocationQuery, *params.GkeLocation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KopsCsp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.csp", runtime.ParamLocationQuery, *params.KopsCsp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KopsRegion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.region", runtime.ParamLocationQuery, *params.KopsRegion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KopsClusterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.clusterName", runtime.ParamLocationQuery, *params.KopsClusterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KopsStateStore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.stateStore", runtime.ParamLocationQuery, *params.KopsStateStore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AksLocation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.location", runtime.ParamLocationQuery, *params.AksLocation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AksNodeResourceGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.nodeResourceGroup", runtime.ParamLocationQuery, *params.AksNodeResourceGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AksSubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.subscriptionId", runtime.ParamLocationQuery, *params.AksSubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OpenshiftCsp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.csp", runtime.ParamLocationQuery, *params.OpenshiftCsp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OpenshiftRegion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.region", runtime.ParamLocationQuery, *params.OpenshiftRegion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OpenshiftClusterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.clusterName", runtime.ParamLocationQuery, *params.OpenshiftClusterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OpenshiftInternalId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.internalId", runtime.ParamLocationQuery, *params.OpenshiftInternalId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OpenshiftRunAsUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.runAsUser", runtime.ParamLocationQuery, *params.OpenshiftRunAsUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OpenshiftRunAsGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.runAsGroup", runtime.ParamLocationQuery, *params.OpenshiftRunAsGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OpenshiftFsGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.fsGroup", runtime.ParamLocationQuery, *params.OpenshiftFsGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuditAPIListAuditEntriesRequest generates requests for AuditAPIListAuditEntries
func NewAuditAPIListAuditEntriesRequest(server string, params *AuditAPIListAuditEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Operation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "operation", runtime.ParamLocationQuery, *params.Operation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InitiatedById != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "initiatedById", runtime.ParamLocationQuery, *params.InitiatedById); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InitiatedByEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "initiatedByEmail", runtime.ParamLocationQuery, *params.InitiatedByEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginCallbackRequest generates requests for LoginCallback
func NewLoginCallbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginRequest generates requests for Login
func NewLoginRequest(server string, params *LoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReturnTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "returnTo", runtime.ParamLocationQuery, *params.ReturnTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Auth0returnTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "auth0returnTo", runtime.ParamLocationQuery, *params.Auth0returnTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScreenHint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "screenHint", runtime.ParamLocationQuery, *params.ScreenHint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string, params *LogoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReturnTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "returnTo", runtime.ParamLocationQuery, *params.ReturnTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSamlAcsRequest generates requests for SamlAcs
func NewSamlAcsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/saml/acs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionRequest generates requests for GetSession
func NewGetSessionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIListAuthTokensRequest generates requests for AuthTokenAPIListAuthTokens
func NewAuthTokenAPIListAuthTokensRequest(server string, params *AuthTokenAPIListAuthTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceAccountId", runtime.ParamLocationQuery, *params.ServiceAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPICreateAuthTokenRequest calls the generic AuthTokenAPICreateAuthToken builder with application/json body
func NewAuthTokenAPICreateAuthTokenRequest(server string, body AuthTokenAPICreateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenAPICreateAuthTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthTokenAPICreateAuthTokenRequestWithBody generates requests for AuthTokenAPICreateAuthToken with any type of body
func NewAuthTokenAPICreateAuthTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthTokenAPIDeleteAuthTokenRequest generates requests for AuthTokenAPIDeleteAuthToken
func NewAuthTokenAPIDeleteAuthTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIGetAuthTokenRequest generates requests for AuthTokenAPIGetAuthToken
func NewAuthTokenAPIGetAuthTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIUpdateAuthTokenRequest calls the generic AuthTokenAPIUpdateAuthToken builder with application/json body
func NewAuthTokenAPIUpdateAuthTokenRequest(server string, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenAPIUpdateAuthTokenRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAuthTokenAPIUpdateAuthTokenRequestWithBody generates requests for AuthTokenAPIUpdateAuthToken with any type of body
func NewAuthTokenAPIUpdateAuthTokenRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingSsoRequest generates requests for BillingSso
func NewBillingSsoRequest(server string, params *BillingSsoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/billing/sso")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForwardUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forwardUrl", runtime.ParamLocationQuery, *params.ForwardUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscriptionRequest generates requests for Subscription
func NewSubscriptionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/billing/subscription")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscriptionCheckoutRequest generates requests for SubscriptionCheckout
func NewSubscriptionCheckoutRequest(server string, params *SubscriptionCheckoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/billing/subscription/checkout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Plan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan", runtime.ParamLocationQuery, *params.Plan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingAPIGetUsageReportRequest generates requests for BillingAPIGetUsageReport
func NewBillingAPIGetUsageReportRequest(server string, params *BillingAPIGetUsageReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/billing/usage-report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period.from", runtime.ParamLocationQuery, params.PeriodFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period.to", runtime.ParamLocationQuery, params.PeriodTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetAgentStatusRequest generates requests for WorkloadOptimizationAPIGetAgentStatus
func NewWorkloadOptimizationAPIGetAgentStatusRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/components/workload-autoscaler", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewComponentsAPIIngestLogsRequest calls the generic ComponentsAPIIngestLogs builder with application/json body
func NewComponentsAPIIngestLogsRequest(server string, clusterId string, component string, body ComponentsAPIIngestLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComponentsAPIIngestLogsRequestWithBody(server, clusterId, component, "application/json", bodyReader)
}

// NewComponentsAPIIngestLogsRequestWithBody generates requests for ComponentsAPIIngestLogs with any type of body
func NewComponentsAPIIngestLogsRequestWithBody(server string, clusterId string, component string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/components/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloadEventsRequest generates requests for WorkloadOptimizationAPIListWorkloadEvents
func NewWorkloadOptimizationAPIListWorkloadEventsRequest(server string, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/workload-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorkloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadId", runtime.ParamLocationQuery, *params.WorkloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkloadName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadName", runtime.ParamLocationQuery, *params.WorkloadName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloadsRequest generates requests for WorkloadOptimizationAPIListWorkloads
func NewWorkloadOptimizationAPIListWorkloadsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetWorkloadRequest generates requests for WorkloadOptimizationAPIGetWorkload
func NewWorkloadOptimizationAPIGetWorkloadRequest(server string, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadId", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeMetrics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMetrics", runtime.ParamLocationQuery, *params.IncludeMetrics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIUpdateWorkloadRequest calls the generic WorkloadOptimizationAPIUpdateWorkload builder with application/json body
func NewWorkloadOptimizationAPIUpdateWorkloadRequest(server string, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody(server, clusterId, workloadId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody generates requests for WorkloadOptimizationAPIUpdateWorkload with any type of body
func NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody(server string, clusterId string, workloadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadId", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAllocationGroupAPIGetAllocationGroupCostTimedSummariesRequest generates requests for AllocationGroupAPIGetAllocationGroupCostTimedSummaries
func NewAllocationGroupAPIGetAllocationGroupCostTimedSummariesRequest(server string, params *AllocationGroupAPIGetAllocationGroupCostTimedSummariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-group-costs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIGetAllocationGroupCostSummariesRequest generates requests for AllocationGroupAPIGetAllocationGroupCostSummaries
func NewAllocationGroupAPIGetAllocationGroupCostSummariesRequest(server string, params *AllocationGroupAPIGetAllocationGroupCostSummariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-group-summaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIListAllocationGroupsRequest generates requests for AllocationGroupAPIListAllocationGroups
func NewAllocationGroupAPIListAllocationGroupsRequest(server string, params *AllocationGroupAPIListAllocationGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPICreateAllocationGroupRequest calls the generic AllocationGroupAPICreateAllocationGroup builder with application/json body
func NewAllocationGroupAPICreateAllocationGroupRequest(server string, body AllocationGroupAPICreateAllocationGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAllocationGroupAPICreateAllocationGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewAllocationGroupAPICreateAllocationGroupRequestWithBody generates requests for AllocationGroupAPICreateAllocationGroup with any type of body
func NewAllocationGroupAPICreateAllocationGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAllocationGroupAPIGetAllocationGroupTotalCostTimedRequest generates requests for AllocationGroupAPIGetAllocationGroupTotalCostTimed
func NewAllocationGroupAPIGetAllocationGroupTotalCostTimedRequest(server string, params *AllocationGroupAPIGetAllocationGroupTotalCostTimedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups-totalcost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIGetCostAllocationGroupDataTransferSummaryRequest generates requests for AllocationGroupAPIGetCostAllocationGroupDataTransferSummary
func NewAllocationGroupAPIGetCostAllocationGroupDataTransferSummaryRequest(server string, params *AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/datatransfer-costs/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIGetAllocationGroupEfficiencySummaryRequest generates requests for AllocationGroupAPIGetAllocationGroupEfficiencySummary
func NewAllocationGroupAPIGetAllocationGroupEfficiencySummaryRequest(server string, params *AllocationGroupAPIGetAllocationGroupEfficiencySummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/efficiency/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIGetCostAllocationGroupSummaryRequest generates requests for AllocationGroupAPIGetCostAllocationGroupSummary
func NewAllocationGroupAPIGetCostAllocationGroupSummaryRequest(server string, params *AllocationGroupAPIGetCostAllocationGroupSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsRequest generates requests for AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloads
func NewAllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsRequest(server string, groupId string, params *AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/%s/datatransfer-costs/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIGetCostAllocationGroupWorkloadsRequest generates requests for AllocationGroupAPIGetCostAllocationGroupWorkloads
func NewAllocationGroupAPIGetCostAllocationGroupWorkloadsRequest(server string, groupId string, params *AllocationGroupAPIGetCostAllocationGroupWorkloadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/%s/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIDeleteAllocationGroupRequest generates requests for AllocationGroupAPIDeleteAllocationGroup
func NewAllocationGroupAPIDeleteAllocationGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocationGroupAPIUpdateAllocationGroupRequest calls the generic AllocationGroupAPIUpdateAllocationGroup builder with application/json body
func NewAllocationGroupAPIUpdateAllocationGroupRequest(server string, id string, body AllocationGroupAPIUpdateAllocationGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAllocationGroupAPIUpdateAllocationGroupRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAllocationGroupAPIUpdateAllocationGroupRequestWithBody generates requests for AllocationGroupAPIUpdateAllocationGroup with any type of body
func NewAllocationGroupAPIUpdateAllocationGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterReportAPIGetClusterCostReportRequest generates requests for ClusterReportAPIGetClusterCostReport
func NewClusterReportAPIGetClusterCostReportRequest(server string, clusterId string, params *ClusterReportAPIGetClusterCostReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/cost", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadDataTransferCostRequest generates requests for WorkloadReportAPIGetWorkloadDataTransferCost
func NewWorkloadReportAPIGetWorkloadDataTransferCostRequest(server string, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/datatransfer-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterWorkloadNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.workloadNames", runtime.ParamLocationQuery, *params.FilterWorkloadNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLabelsOperator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.labelsOperator", runtime.ParamLocationQuery, *params.FilterLabelsOperator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterWorkloadTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.workloadTypes", runtime.ParamLocationQuery, *params.FilterWorkloadTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNamespaces != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.namespaces", runtime.ParamLocationQuery, *params.FilterNamespaces); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadDataTransferCost2Request calls the generic WorkloadReportAPIGetWorkloadDataTransferCost2 builder with application/json body
func NewWorkloadReportAPIGetWorkloadDataTransferCost2Request(server string, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, body WorkloadReportAPIGetWorkloadDataTransferCost2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetWorkloadDataTransferCost2RequestWithBody(server, clusterId, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetWorkloadDataTransferCost2RequestWithBody generates requests for WorkloadReportAPIGetWorkloadDataTransferCost2 with any type of body
func NewWorkloadReportAPIGetWorkloadDataTransferCost2RequestWithBody(server string, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/datatransfer-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterReportAPIGetClusterEfficiencyReportRequest generates requests for ClusterReportAPIGetClusterEfficiencyReport
func NewClusterReportAPIGetClusterEfficiencyReportRequest(server string, clusterId string, params *ClusterReportAPIGetClusterEfficiencyReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/efficiency", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetSavingsRecommendationRequest generates requests for ClusterReportAPIGetSavingsRecommendation
func NewClusterReportAPIGetSavingsRecommendationRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/estimated-savings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetClusterCostHistoryRequest generates requests for ClusterReportAPIGetClusterCostHistory
func NewClusterReportAPIGetClusterCostHistoryRequest(server string, clusterId string, params *ClusterReportAPIGetClusterCostHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/estimated-savings-history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportConfigurationAPIGetGroupingConfigRequest generates requests for ReportConfigurationAPIGetGroupingConfig
func NewReportConfigurationAPIGetGroupingConfigRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/grouping-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportConfigurationAPIUpsertGroupingConfigRequest calls the generic ReportConfigurationAPIUpsertGroupingConfig builder with application/json body
func NewReportConfigurationAPIUpsertGroupingConfigRequest(server string, clusterId string, body ReportConfigurationAPIUpsertGroupingConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportConfigurationAPIUpsertGroupingConfigRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewReportConfigurationAPIUpsertGroupingConfigRequestWithBody generates requests for ReportConfigurationAPIUpsertGroupingConfig with any type of body
func NewReportConfigurationAPIUpsertGroupingConfigRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/grouping-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNamespaceReportAPIGetClusterNamespaceCostReportSummariesRequest calls the generic NamespaceReportAPIGetClusterNamespaceCostReportSummaries builder with application/json body
func NewNamespaceReportAPIGetClusterNamespaceCostReportSummariesRequest(server string, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, body NamespaceReportAPIGetClusterNamespaceCostReportSummariesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNamespaceReportAPIGetClusterNamespaceCostReportSummariesRequestWithBody(server, clusterId, params, "application/json", bodyReader)
}

// NewNamespaceReportAPIGetClusterNamespaceCostReportSummariesRequestWithBody generates requests for NamespaceReportAPIGetClusterNamespaceCostReportSummaries with any type of body
func NewNamespaceReportAPIGetClusterNamespaceCostReportSummariesRequestWithBody(server string, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespace-cost-summaries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNamespaceReportAPIGetClusterNamespaceDataTransferCostRequest generates requests for NamespaceReportAPIGetClusterNamespaceDataTransferCost
func NewNamespaceReportAPIGetClusterNamespaceDataTransferCostRequest(server string, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferCostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespace-datatransfer-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterNamespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.namespace", runtime.ParamLocationQuery, *params.FilterNamespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostRequest generates requests for NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCost
func NewNamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostRequest(server string, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespace-datatransfer-totalcost", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNamespaceReportAPIGetClusterNamespaceCostReportRequest calls the generic NamespaceReportAPIGetClusterNamespaceCostReport builder with application/json body
func NewNamespaceReportAPIGetClusterNamespaceCostReportRequest(server string, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, body NamespaceReportAPIGetClusterNamespaceCostReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNamespaceReportAPIGetClusterNamespaceCostReportRequestWithBody(server, clusterId, params, "application/json", bodyReader)
}

// NewNamespaceReportAPIGetClusterNamespaceCostReportRequestWithBody generates requests for NamespaceReportAPIGetClusterNamespaceCostReport with any type of body
func NewNamespaceReportAPIGetClusterNamespaceCostReportRequestWithBody(server string, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespace-totalcost", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNamespaceReportAPIGetSingleNamespaceCostReportRequest generates requests for NamespaceReportAPIGetSingleNamespaceCostReport
func NewNamespaceReportAPIGetSingleNamespaceCostReportRequest(server string, clusterId string, namespace string, params *NamespaceReportAPIGetSingleNamespaceCostReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetSingleWorkloadCostReportRequest generates requests for WorkloadReportAPIGetSingleWorkloadCostReport
func NewWorkloadReportAPIGetSingleWorkloadCostReportRequest(server string, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadCostReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workloadType", runtime.ParamLocationPath, workloadType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "workloadName", runtime.ParamLocationPath, workloadName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespaces/%s/%s/%s/cost", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetSingleWorkloadDataTransferCostRequest generates requests for WorkloadReportAPIGetSingleWorkloadDataTransferCost
func NewWorkloadReportAPIGetSingleWorkloadDataTransferCostRequest(server string, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadDataTransferCostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workloadType", runtime.ParamLocationPath, workloadType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "workloadName", runtime.ParamLocationPath, workloadName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespaces/%s/%s/%s/datatransfer-costs", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameRequest generates requests for WorkloadReportAPIGetClusterWorkloadEfficiencyReportByName
func NewWorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameRequest(server string, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workloadType", runtime.ParamLocationPath, workloadType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "workloadName", runtime.ParamLocationPath, workloadName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespaces/%s/%s/%s/efficiency", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeCurrent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeCurrent", runtime.ParamLocationQuery, *params.IncludeCurrent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeHistory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeHistory", runtime.ParamLocationQuery, *params.IncludeHistory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadTrafficDestinationsHistoryRequest generates requests for WorkloadReportAPIGetWorkloadTrafficDestinationsHistory
func NewWorkloadReportAPIGetWorkloadTrafficDestinationsHistoryRequest(server string, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workloadType", runtime.ParamLocationPath, workloadType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "workloadName", runtime.ParamLocationPath, workloadName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespaces/%s/%s/%s/traffic-destination-histories", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadTrafficDestinationsRequest generates requests for WorkloadReportAPIGetWorkloadTrafficDestinations
func NewWorkloadReportAPIGetWorkloadTrafficDestinationsRequest(server string, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "workloadType", runtime.ParamLocationPath, workloadType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "workloadName", runtime.ParamLocationPath, workloadName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/namespaces/%s/%s/%s/traffic-destinations", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportConfigurationAPIGetReportingCapabilitiesRequest generates requests for ReportConfigurationAPIGetReportingCapabilities
func NewReportConfigurationAPIGetReportingCapabilitiesRequest(server string, clusterId string, params *ReportConfigurationAPIGetReportingCapabilitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/reporting-capabilities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetClusterResourceUsageRequest generates requests for ClusterReportAPIGetClusterResourceUsage
func NewClusterReportAPIGetClusterResourceUsageRequest(server string, clusterId string, params *ClusterReportAPIGetClusterResourceUsageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/resource-usage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetClusterWorkloadRightsizingPatchRequest calls the generic WorkloadReportAPIGetClusterWorkloadRightsizingPatch builder with application/json body
func NewWorkloadReportAPIGetClusterWorkloadRightsizingPatchRequest(server string, clusterId string, body WorkloadReportAPIGetClusterWorkloadRightsizingPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetClusterWorkloadRightsizingPatchRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetClusterWorkloadRightsizingPatchRequestWithBody generates requests for WorkloadReportAPIGetClusterWorkloadRightsizingPatch with any type of body
func NewWorkloadReportAPIGetClusterWorkloadRightsizingPatchRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/rightsizing-patch.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterReportAPIGetRightsizingSummaryRequest generates requests for ClusterReportAPIGetRightsizingSummary
func NewClusterReportAPIGetRightsizingSummaryRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/rightsizing-summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetClusterSavingsReportRequest generates requests for ClusterReportAPIGetClusterSavingsReport
func NewClusterReportAPIGetClusterSavingsReportRequest(server string, clusterId string, params *ClusterReportAPIGetClusterSavingsReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/savings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetClusterSummaryRequest generates requests for ClusterReportAPIGetClusterSummary
func NewClusterReportAPIGetClusterSummaryRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadCostSummariesRequest calls the generic WorkloadReportAPIGetWorkloadCostSummaries builder with application/json body
func NewWorkloadReportAPIGetWorkloadCostSummariesRequest(server string, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, body WorkloadReportAPIGetWorkloadCostSummariesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetWorkloadCostSummariesRequestWithBody(server, clusterId, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetWorkloadCostSummariesRequestWithBody generates requests for WorkloadReportAPIGetWorkloadCostSummaries with any type of body
func NewWorkloadReportAPIGetWorkloadCostSummariesRequestWithBody(server string, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-cost-summaries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelsToInclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labelsToInclude", runtime.ParamLocationQuery, *params.LabelsToInclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadReportAPIGetClusterWorkloadReportRequest generates requests for WorkloadReportAPIGetClusterWorkloadReport
func NewWorkloadReportAPIGetClusterWorkloadReportRequest(server string, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterWorkloadNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.workloadNames", runtime.ParamLocationQuery, *params.FilterWorkloadNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLabelsOperator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.labelsOperator", runtime.ParamLocationQuery, *params.FilterLabelsOperator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterWorkloadTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.workloadTypes", runtime.ParamLocationQuery, *params.FilterWorkloadTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNamespaces != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.namespaces", runtime.ParamLocationQuery, *params.FilterNamespaces); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelsToInclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labelsToInclude", runtime.ParamLocationQuery, *params.LabelsToInclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetClusterWorkloadReport2Request calls the generic WorkloadReportAPIGetClusterWorkloadReport2 builder with application/json body
func NewWorkloadReportAPIGetClusterWorkloadReport2Request(server string, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, body WorkloadReportAPIGetClusterWorkloadReport2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetClusterWorkloadReport2RequestWithBody(server, clusterId, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetClusterWorkloadReport2RequestWithBody generates requests for WorkloadReportAPIGetClusterWorkloadReport2 with any type of body
func NewWorkloadReportAPIGetClusterWorkloadReport2RequestWithBody(server string, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelsToInclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labelsToInclude", runtime.ParamLocationQuery, *params.LabelsToInclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadReportAPIGetClusterWorkloadEfficiencyReportRequest generates requests for WorkloadReportAPIGetClusterWorkloadEfficiencyReport
func NewWorkloadReportAPIGetClusterWorkloadEfficiencyReportRequest(server string, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-efficiency", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterWorkloadNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.workloadNames", runtime.ParamLocationQuery, *params.FilterWorkloadNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLabelsOperator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.labelsOperator", runtime.ParamLocationQuery, *params.FilterLabelsOperator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterWorkloadTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.workloadTypes", runtime.ParamLocationQuery, *params.FilterWorkloadTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNamespaces != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.namespaces", runtime.ParamLocationQuery, *params.FilterNamespaces); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetClusterWorkloadEfficiencyReport2Request calls the generic WorkloadReportAPIGetClusterWorkloadEfficiencyReport2 builder with application/json body
func NewWorkloadReportAPIGetClusterWorkloadEfficiencyReport2Request(server string, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, body WorkloadReportAPIGetClusterWorkloadEfficiencyReport2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetClusterWorkloadEfficiencyReport2RequestWithBody(server, clusterId, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetClusterWorkloadEfficiencyReport2RequestWithBody generates requests for WorkloadReportAPIGetClusterWorkloadEfficiencyReport2 with any type of body
func NewWorkloadReportAPIGetClusterWorkloadEfficiencyReport2RequestWithBody(server string, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-efficiency", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StepSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadReportAPIGetClusterWorkloadLabelsRequest generates requests for WorkloadReportAPIGetClusterWorkloadLabels
func NewWorkloadReportAPIGetClusterWorkloadLabelsRequest(server string, clusterId string, params *WorkloadReportAPIGetClusterWorkloadLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetNamespacesForClustersRequest calls the generic WorkloadReportAPIGetNamespacesForClusters builder with application/json body
func NewWorkloadReportAPIGetNamespacesForClustersRequest(server string, params *WorkloadReportAPIGetNamespacesForClustersParams, body WorkloadReportAPIGetNamespacesForClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetNamespacesForClustersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetNamespacesForClustersRequestWithBody generates requests for WorkloadReportAPIGetNamespacesForClusters with any type of body
func NewWorkloadReportAPIGetNamespacesForClustersRequestWithBody(server string, params *WorkloadReportAPIGetNamespacesForClustersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeReportAPIGetNodeLabelNamesRequest calls the generic NodeReportAPIGetNodeLabelNames builder with application/json body
func NewNodeReportAPIGetNodeLabelNamesRequest(server string, params *NodeReportAPIGetNodeLabelNamesParams, body NodeReportAPIGetNodeLabelNamesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeReportAPIGetNodeLabelNamesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewNodeReportAPIGetNodeLabelNamesRequestWithBody generates requests for NodeReportAPIGetNodeLabelNames with any type of body
func NewNodeReportAPIGetNodeLabelNamesRequestWithBody(server string, params *NodeReportAPIGetNodeLabelNamesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/node-labels/names")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeReportAPIGetNodeLabelValuesRequest calls the generic NodeReportAPIGetNodeLabelValues builder with application/json body
func NewNodeReportAPIGetNodeLabelValuesRequest(server string, params *NodeReportAPIGetNodeLabelValuesParams, body NodeReportAPIGetNodeLabelValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeReportAPIGetNodeLabelValuesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewNodeReportAPIGetNodeLabelValuesRequestWithBody generates requests for NodeReportAPIGetNodeLabelValues with any type of body
func NewNodeReportAPIGetNodeLabelValuesRequestWithBody(server string, params *NodeReportAPIGetNodeLabelValuesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/node-labels/values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, params.Label); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterReportAPIGetOrganizationClustersCostReportRequest generates requests for ClusterReportAPIGetOrganizationClustersCostReport
func NewClusterReportAPIGetOrganizationClustersCostReportRequest(server string, params *ClusterReportAPIGetOrganizationClustersCostReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/organization/clusters/report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetClustersSummaryRequest generates requests for ClusterReportAPIGetClustersSummary
func NewClusterReportAPIGetClustersSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/organization/clusters/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetClustersCostReportRequest generates requests for ClusterReportAPIGetClustersCostReport
func NewClusterReportAPIGetClustersCostReportRequest(server string, params *ClusterReportAPIGetClustersCostReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/organization/daily-cost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadLabelNamesRequest calls the generic WorkloadReportAPIGetWorkloadLabelNames builder with application/json body
func NewWorkloadReportAPIGetWorkloadLabelNamesRequest(server string, params *WorkloadReportAPIGetWorkloadLabelNamesParams, body WorkloadReportAPIGetWorkloadLabelNamesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetWorkloadLabelNamesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetWorkloadLabelNamesRequestWithBody generates requests for WorkloadReportAPIGetWorkloadLabelNames with any type of body
func NewWorkloadReportAPIGetWorkloadLabelNamesRequestWithBody(server string, params *WorkloadReportAPIGetWorkloadLabelNamesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/workload-labels/names")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadLabelValuesRequest calls the generic WorkloadReportAPIGetWorkloadLabelValues builder with application/json body
func NewWorkloadReportAPIGetWorkloadLabelValuesRequest(server string, params *WorkloadReportAPIGetWorkloadLabelValuesParams, body WorkloadReportAPIGetWorkloadLabelValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetWorkloadLabelValuesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetWorkloadLabelValuesRequestWithBody generates requests for WorkloadReportAPIGetWorkloadLabelValues with any type of body
func NewWorkloadReportAPIGetWorkloadLabelValuesRequestWithBody(server string, params *WorkloadReportAPIGetWorkloadLabelValuesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/workload-labels/values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, params.Label); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadLabelValuesDeprecatedRequest calls the generic WorkloadReportAPIGetWorkloadLabelValuesDeprecated builder with application/json body
func NewWorkloadReportAPIGetWorkloadLabelValuesDeprecatedRequest(server string, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, body WorkloadReportAPIGetWorkloadLabelValuesDeprecatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetWorkloadLabelValuesDeprecatedRequestWithBody(server, label, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetWorkloadLabelValuesDeprecatedRequestWithBody generates requests for WorkloadReportAPIGetWorkloadLabelValuesDeprecated with any type of body
func NewWorkloadReportAPIGetWorkloadLabelValuesDeprecatedRequestWithBody(server string, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "label", runtime.ParamLocationPath, label)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/workload-labels/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadReportAPIGetWorkloadsMetadataRequest calls the generic WorkloadReportAPIGetWorkloadsMetadata builder with application/json body
func NewWorkloadReportAPIGetWorkloadsMetadataRequest(server string, params *WorkloadReportAPIGetWorkloadsMetadataParams, body WorkloadReportAPIGetWorkloadsMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadReportAPIGetWorkloadsMetadataRequestWithBody(server, params, "application/json", bodyReader)
}

// NewWorkloadReportAPIGetWorkloadsMetadataRequestWithBody generates requests for WorkloadReportAPIGetWorkloadsMetadata with any type of body
func NewWorkloadReportAPIGetWorkloadsMetadataRequestWithBody(server string, params *WorkloadReportAPIGetWorkloadsMetadataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/workloads/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDedicatedInstanceAPIListDedicatedInstancesRequest generates requests for DedicatedInstanceAPIListDedicatedInstances
func NewDedicatedInstanceAPIListDedicatedInstancesRequest(server string, params *DedicatedInstanceAPIListDedicatedInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dedicated-instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GcpName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp.name", runtime.ParamLocationQuery, *params.GcpName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp.project", runtime.ParamLocationQuery, *params.GcpProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp.zone", runtime.ParamLocationQuery, *params.GcpZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsingCluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usingCluster", runtime.ParamLocationQuery, *params.UsingCluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFeaturesAPIListRequest generates requests for FeaturesAPIList
func NewFeaturesAPIListRequest(server string, params *FeaturesAPIListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FlagNamePrefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flagNamePrefix", runtime.ParamLocationQuery, *params.FlagNamePrefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFeaturesAPIResolveRequest calls the generic FeaturesAPIResolve builder with application/json body
func NewFeaturesAPIResolveRequest(server string, body FeaturesAPIResolveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFeaturesAPIResolveRequestWithBody(server, "application/json", bodyReader)
}

// NewFeaturesAPIResolveRequestWithBody generates requests for FeaturesAPIResolve with any type of body
func NewFeaturesAPIResolveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryBlacklistAPIListBlacklistsRequest generates requests for InventoryBlacklistAPIListBlacklists
func NewInventoryBlacklistAPIListBlacklistsRequest(server string, params *InventoryBlacklistAPIListBlacklistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory/blacklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryBlacklistAPIAddBlacklistRequest calls the generic InventoryBlacklistAPIAddBlacklist builder with application/json body
func NewInventoryBlacklistAPIAddBlacklistRequest(server string, body InventoryBlacklistAPIAddBlacklistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryBlacklistAPIAddBlacklistRequestWithBody(server, "application/json", bodyReader)
}

// NewInventoryBlacklistAPIAddBlacklistRequestWithBody generates requests for InventoryBlacklistAPIAddBlacklist with any type of body
func NewInventoryBlacklistAPIAddBlacklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory/blacklist/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryBlacklistAPIRemoveBlacklistRequest calls the generic InventoryBlacklistAPIRemoveBlacklist builder with application/json body
func NewInventoryBlacklistAPIRemoveBlacklistRequest(server string, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody(server, "application/json", bodyReader)
}

// NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody generates requests for InventoryBlacklistAPIRemoveBlacklist with any type of body
func NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory/blacklist/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPIListInvitationsRequest generates requests for UsersAPIListInvitations
func NewUsersAPIListInvitationsRequest(server string, params *UsersAPIListInvitationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPICreateInvitationsRequest calls the generic UsersAPICreateInvitations builder with application/json body
func NewUsersAPICreateInvitationsRequest(server string, body UsersAPICreateInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPICreateInvitationsRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersAPICreateInvitationsRequestWithBody generates requests for UsersAPICreateInvitations with any type of body
func NewUsersAPICreateInvitationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPIDeleteInvitationRequest generates requests for UsersAPIDeleteInvitation
func NewUsersAPIDeleteInvitationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIClaimInvitationRequest calls the generic UsersAPIClaimInvitation builder with application/json body
func NewUsersAPIClaimInvitationRequest(server string, invitationId string, body UsersAPIClaimInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIClaimInvitationRequestWithBody(server, invitationId, "application/json", bodyReader)
}

// NewUsersAPIClaimInvitationRequestWithBody generates requests for UsersAPIClaimInvitation with any type of body
func NewUsersAPIClaimInvitationRequestWithBody(server string, invitationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitationId", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterActionsAPIPollClusterActionsRequest generates requests for ClusterActionsAPIPollClusterActions
func NewClusterActionsAPIPollClusterActionsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterActionsAPIIngestLogsRequest calls the generic ClusterActionsAPIIngestLogs builder with application/json body
func NewClusterActionsAPIIngestLogsRequest(server string, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterActionsAPIIngestLogsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewClusterActionsAPIIngestLogsRequestWithBody generates requests for ClusterActionsAPIIngestLogs with any type of body
func NewClusterActionsAPIIngestLogsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterActionsAPIAckClusterActionRequest calls the generic ClusterActionsAPIAckClusterAction builder with application/json body
func NewClusterActionsAPIAckClusterActionRequest(server string, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterActionsAPIAckClusterActionRequestWithBody(server, clusterId, actionId, "application/json", bodyReader)
}

// NewClusterActionsAPIAckClusterActionRequestWithBody generates requests for ClusterActionsAPIAckClusterAction with any type of body
func NewClusterActionsAPIAckClusterActionRequestWithBody(server string, clusterId string, actionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions/%s/ack", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlgorithmStatsAPISubmitRequest calls the generic AlgorithmStatsAPISubmit builder with application/json body
func NewAlgorithmStatsAPISubmitRequest(server string, clusterId string, body AlgorithmStatsAPISubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlgorithmStatsAPISubmitRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAlgorithmStatsAPISubmitRequestWithBody generates requests for AlgorithmStatsAPISubmit with any type of body
func NewAlgorithmStatsAPISubmitRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/algorithm-stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReportConfigurationAPIGetEgressdScriptRequest generates requests for ReportConfigurationAPIGetEgressdScript
func NewReportConfigurationAPIGetEgressdScriptRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/egressd-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvictorAPIGetAdvancedConfigRequest generates requests for EvictorAPIGetAdvancedConfig
func NewEvictorAPIGetAdvancedConfigRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/evictor-advanced-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvictorAPIUpsertAdvancedConfigRequest calls the generic EvictorAPIUpsertAdvancedConfig builder with application/json body
func NewEvictorAPIUpsertAdvancedConfigRequest(server string, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvictorAPIUpsertAdvancedConfigRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewEvictorAPIUpsertAdvancedConfigRequestWithBody generates requests for EvictorAPIUpsertAdvancedConfig with any type of body
func NewEvictorAPIUpsertAdvancedConfigRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/evictor-advanced-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeTemplatesAPIFilterInstanceTypesRequest calls the generic NodeTemplatesAPIFilterInstanceTypes builder with application/json body
func NewNodeTemplatesAPIFilterInstanceTypesRequest(server string, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody generates requests for NodeTemplatesAPIFilterInstanceTypes with any type of body
func NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/filter-instance-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeTemplatesAPIGenerateNodeTemplatesRequest generates requests for NodeTemplatesAPIGenerateNodeTemplates
func NewNodeTemplatesAPIGenerateNodeTemplatesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/generate-node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetKarpenterDefinitionsMigrationIntentRequest generates requests for AutoscalerAPIGetKarpenterDefinitionsMigrationIntent
func NewAutoscalerAPIGetKarpenterDefinitionsMigrationIntentRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/karpenter/migrate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIMigrateKarpenterDefinitionsRequest calls the generic AutoscalerAPIMigrateKarpenterDefinitions builder with application/json body
func NewAutoscalerAPIMigrateKarpenterDefinitionsRequest(server string, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody generates requests for AutoscalerAPIMigrateKarpenterDefinitions with any type of body
func NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/karpenter/migrate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeConfigurationAPIListConfigurationsRequest generates requests for NodeConfigurationAPIListConfigurations
func NewNodeConfigurationAPIListConfigurationsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPICreateConfigurationRequest calls the generic NodeConfigurationAPICreateConfiguration builder with application/json body
func NewNodeConfigurationAPICreateConfigurationRequest(server string, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeConfigurationAPICreateConfigurationRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeConfigurationAPICreateConfigurationRequestWithBody generates requests for NodeConfigurationAPICreateConfiguration with any type of body
func NewNodeConfigurationAPICreateConfigurationRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeConfigurationAPIGetSuggestedConfigurationRequest generates requests for NodeConfigurationAPIGetSuggestedConfiguration
func NewNodeConfigurationAPIGetSuggestedConfigurationRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/suggestions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIDeleteConfigurationRequest generates requests for NodeConfigurationAPIDeleteConfiguration
func NewNodeConfigurationAPIDeleteConfigurationRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIGetConfigurationRequest generates requests for NodeConfigurationAPIGetConfiguration
func NewNodeConfigurationAPIGetConfigurationRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIUpdateConfigurationRequest calls the generic NodeConfigurationAPIUpdateConfiguration builder with application/json body
func NewNodeConfigurationAPIUpdateConfigurationRequest(server string, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(server, clusterId, id, "application/json", bodyReader)
}

// NewNodeConfigurationAPIUpdateConfigurationRequestWithBody generates requests for NodeConfigurationAPIUpdateConfiguration with any type of body
func NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(server string, clusterId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeConfigurationAPISetDefaultRequest generates requests for NodeConfigurationAPISetDefault
func NewNodeConfigurationAPISetDefaultRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s/default", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesAPIGetClusterNodeConstraintsRequest generates requests for PoliciesAPIGetClusterNodeConstraints
func NewPoliciesAPIGetClusterNodeConstraintsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-constraints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPIListNodeTemplatesRequest generates requests for NodeTemplatesAPIListNodeTemplates
func NewNodeTemplatesAPIListNodeTemplatesRequest(server string, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDefault != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDefault", runtime.ParamLocationQuery, *params.IncludeDefault); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPICreateNodeTemplateRequest calls the generic NodeTemplatesAPICreateNodeTemplate builder with application/json body
func NewNodeTemplatesAPICreateNodeTemplateRequest(server string, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeTemplatesAPICreateNodeTemplateRequestWithBody generates requests for NodeTemplatesAPICreateNodeTemplate with any type of body
func NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeTemplatesAPIDeleteNodeTemplateRequest generates requests for NodeTemplatesAPIDeleteNodeTemplate
func NewNodeTemplatesAPIDeleteNodeTemplateRequest(server string, clusterId string, nodeTemplateName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeTemplateName", runtime.ParamLocationPath, nodeTemplateName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPIUpdateNodeTemplateRequest calls the generic NodeTemplatesAPIUpdateNodeTemplate builder with application/json body
func NewNodeTemplatesAPIUpdateNodeTemplateRequest(server string, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(server, clusterId, nodeTemplateName, "application/json", bodyReader)
}

// NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody generates requests for NodeTemplatesAPIUpdateNodeTemplate with any type of body
func NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(server string, clusterId string, nodeTemplateName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeTemplateName", runtime.ParamLocationPath, nodeTemplateName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesAPIGetClusterPoliciesRequest generates requests for PoliciesAPIGetClusterPolicies
func NewPoliciesAPIGetClusterPoliciesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesAPIUpsertClusterPoliciesRequest calls the generic PoliciesAPIUpsertClusterPolicies builder with application/json body
func NewPoliciesAPIUpsertClusterPoliciesRequest(server string, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPoliciesAPIUpsertClusterPoliciesRequestWithBody generates requests for PoliciesAPIUpsertClusterPolicies with any type of body
func NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAutoscalerAPIGetProblematicNodesRequest generates requests for AutoscalerAPIGetProblematicNodes
func NewAutoscalerAPIGetProblematicNodesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/problematic-nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetProblematicWorkloadsRequest generates requests for AutoscalerAPIGetProblematicWorkloads
func NewAutoscalerAPIGetProblematicWorkloadsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/problematic-workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetRebalancedWorkloadsRequest generates requests for AutoscalerAPIGetRebalancedWorkloads
func NewAutoscalerAPIGetRebalancedWorkloadsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalanced-workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIListRebalancingJobsRequest generates requests for ScheduledRebalancingAPIListRebalancingJobs
func NewScheduledRebalancingAPIListRebalancingJobsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPICreateRebalancingJobRequest calls the generic ScheduledRebalancingAPICreateRebalancingJob builder with application/json body
func NewScheduledRebalancingAPICreateRebalancingJobRequest(server string, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody generates requests for ScheduledRebalancingAPICreateRebalancingJob with any type of body
func NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIDeleteRebalancingJobRequest generates requests for ScheduledRebalancingAPIDeleteRebalancingJob
func NewScheduledRebalancingAPIDeleteRebalancingJobRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIGetRebalancingJobRequest generates requests for ScheduledRebalancingAPIGetRebalancingJob
func NewScheduledRebalancingAPIGetRebalancingJobRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIUpdateRebalancingJobRequest calls the generic ScheduledRebalancingAPIUpdateRebalancingJob builder with application/json body
func NewScheduledRebalancingAPIUpdateRebalancingJobRequest(server string, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody(server, clusterId, id, "application/json", bodyReader)
}

// NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody generates requests for ScheduledRebalancingAPIUpdateRebalancingJob with any type of body
func NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody(server string, clusterId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAutoscalerAPIListRebalancingPlansRequest generates requests for AutoscalerAPIListRebalancingPlans
func NewAutoscalerAPIListRebalancingPlansRequest(server string, clusterId string, params *AutoscalerAPIListRebalancingPlansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.statuses", runtime.ParamLocationQuery, *params.FilterStatuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeOperations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeOperations", runtime.ParamLocationQuery, *params.IncludeOperations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeConfigurations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeConfigurations", runtime.ParamLocationQuery, *params.IncludeConfigurations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGenerateRebalancingPlanRequest calls the generic AutoscalerAPIGenerateRebalancingPlan builder with application/json body
func NewAutoscalerAPIGenerateRebalancingPlanRequest(server string, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody generates requests for AutoscalerAPIGenerateRebalancingPlan with any type of body
func NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAutoscalerAPIGetRebalancingPlanRequest generates requests for AutoscalerAPIGetRebalancingPlan
func NewAutoscalerAPIGetRebalancingPlanRequest(server string, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rebalancingPlanId", runtime.ParamLocationPath, rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeOperations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeOperations", runtime.ParamLocationQuery, *params.IncludeOperations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeConfigurations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeConfigurations", runtime.ParamLocationQuery, *params.IncludeConfigurations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIExecuteRebalancingPlanRequest generates requests for AutoscalerAPIExecuteRebalancingPlan
func NewAutoscalerAPIExecuteRebalancingPlanRequest(server string, clusterId string, rebalancingPlanId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rebalancingPlanId", runtime.ParamLocationPath, rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s/execute", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIPreviewRebalancingScheduleRequest calls the generic ScheduledRebalancingAPIPreviewRebalancingSchedule builder with application/json body
func NewScheduledRebalancingAPIPreviewRebalancingScheduleRequest(server string, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody generates requests for ScheduledRebalancingAPIPreviewRebalancingSchedule with any type of body
func NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-schedule-preview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAutoscalerAPIGetClusterSettingsRequest generates requests for AutoscalerAPIGetClusterSettings
func NewAutoscalerAPIGetClusterSettingsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterReportAPIGetClusterUnscheduledPodsRequest generates requests for ClusterReportAPIGetClusterUnscheduledPods
func NewClusterReportAPIGetClusterUnscheduledPodsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/unscheduled-pods", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetClusterWorkloadsRequest generates requests for AutoscalerAPIGetClusterWorkloads
func NewAutoscalerAPIGetClusterWorkloadsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIListClustersRequest generates requests for ExternalClusterAPIListClusters
func NewExternalClusterAPIListClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIRegisterClusterRequest calls the generic ExternalClusterAPIRegisterCluster builder with application/json body
func NewExternalClusterAPIRegisterClusterRequest(server string, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIRegisterClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewExternalClusterAPIRegisterClusterRequestWithBody generates requests for ExternalClusterAPIRegisterCluster with any type of body
func NewExternalClusterAPIRegisterClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsAPIGetOperationRequest generates requests for OperationsAPIGetOperation
func NewOperationsAPIGetOperationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/operations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDeleteClusterRequest generates requests for ExternalClusterAPIDeleteCluster
func NewExternalClusterAPIDeleteClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetClusterRequest generates requests for ExternalClusterAPIGetCluster
func NewExternalClusterAPIGetClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIUpdateClusterRequest calls the generic ExternalClusterAPIUpdateCluster builder with application/json body
func NewExternalClusterAPIUpdateClusterRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterRequestWithBody generates requests for ExternalClusterAPIUpdateCluster with any type of body
func NewExternalClusterAPIUpdateClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteAssumeRolePrincipalRequest generates requests for ExternalClusterAPIDeleteAssumeRolePrincipal
func NewExternalClusterAPIDeleteAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetAssumeRolePrincipalRequest generates requests for ExternalClusterAPIGetAssumeRolePrincipal
func NewExternalClusterAPIGetAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPICreateAssumeRolePrincipalRequest generates requests for ExternalClusterAPICreateAssumeRolePrincipal
func NewExternalClusterAPICreateAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetAssumeRoleUserRequest generates requests for ExternalClusterAPIGetAssumeRoleUser
func NewExternalClusterAPIGetAssumeRoleUserRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCleanupScriptRequest generates requests for ExternalClusterAPIGetCleanupScript
func NewExternalClusterAPIGetCleanupScriptRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/cleanup-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptRequest generates requests for ExternalClusterAPIGetCredentialsScript
func NewExternalClusterAPIGetCredentialsScriptRequest(server string, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/credentials-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CrossRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NvidiaDevicePlugin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nvidiaDevicePlugin", runtime.ParamLocationQuery, *params.NvidiaDevicePlugin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstallSecurityAgent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installSecurityAgent", runtime.ParamLocationQuery, *params.InstallSecurityAgent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDisconnectClusterRequest calls the generic ExternalClusterAPIDisconnectCluster builder with application/json body
func NewExternalClusterAPIDisconnectClusterRequest(server string, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDisconnectClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIDisconnectClusterRequestWithBody generates requests for ExternalClusterAPIDisconnectCluster with any type of body
func NewExternalClusterAPIDisconnectClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/disconnect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIHandleCloudEventRequest calls the generic ExternalClusterAPIHandleCloudEvent builder with application/json body
func NewExternalClusterAPIHandleCloudEventRequest(server string, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIHandleCloudEventRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIHandleCloudEventRequestWithBody generates requests for ExternalClusterAPIHandleCloudEvent with any type of body
func NewExternalClusterAPIHandleCloudEventRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIListNodesRequest generates requests for ExternalClusterAPIListNodes
func NewExternalClusterAPIListNodesRequest(server string, clusterId string, params *ExternalClusterAPIListNodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIAddNodeRequest calls the generic ExternalClusterAPIAddNode builder with application/json body
func NewExternalClusterAPIAddNodeRequest(server string, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIAddNodeRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIAddNodeRequestWithBody generates requests for ExternalClusterAPIAddNode with any type of body
func NewExternalClusterAPIAddNodeRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteNodeRequest generates requests for ExternalClusterAPIDeleteNode
func NewExternalClusterAPIDeleteNodeRequest(server string, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DrainTimeout != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drainTimeout", runtime.ParamLocationQuery, *params.DrainTimeout); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceDelete != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceDelete", runtime.ParamLocationQuery, *params.ForceDelete); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetNodeRequest generates requests for ExternalClusterAPIGetNode
func NewExternalClusterAPIGetNodeRequest(server string, clusterId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDrainNodeRequest calls the generic ExternalClusterAPIDrainNode builder with application/json body
func NewExternalClusterAPIDrainNodeRequest(server string, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDrainNodeRequestWithBody(server, clusterId, nodeId, "application/json", bodyReader)
}

// NewExternalClusterAPIDrainNodeRequestWithBody generates requests for ExternalClusterAPIDrainNode with any type of body
func NewExternalClusterAPIDrainNodeRequestWithBody(server string, clusterId string, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s/drain", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIReconcileClusterRequest generates requests for ExternalClusterAPIReconcileCluster
func NewExternalClusterAPIReconcileClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/reconcile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIUpdateClusterTagsRequest calls the generic ExternalClusterAPIUpdateClusterTags builder with application/json body
func NewExternalClusterAPIUpdateClusterTagsRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterTagsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterTagsRequestWithBody generates requests for ExternalClusterAPIUpdateClusterTags with any type of body
func NewExternalClusterAPIUpdateClusterTagsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPICreateClusterTokenRequest generates requests for ExternalClusterAPICreateClusterToken
func NewExternalClusterAPICreateClusterTokenRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportRequest generates requests for OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReport
func NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportRequest(server string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/openai/chat-completions/report/api-keys-savings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryId", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportRequest generates requests for OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReport
func NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportRequest(server string, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/openai/chat-completions/report/api-keys/%s/recommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportRequest generates requests for OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReport
func NewOpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportRequest(server string, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/openai/chat-completions/report/api-keys/%s/usage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportRequest generates requests for OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReport
func NewOpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportRequest(server string, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/openai/chat-completions/report/categories/%s/recommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportRequest generates requests for OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReport
func NewOpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportRequest(server string, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/openai/chat-completions/report/categories/%s/usage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportRequest generates requests for OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReport
func NewOpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportRequest(server string, params *OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/openai/chat-completions/report/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenAILLMOptimizationAPIGetChatCompletionsUsageReportRequest generates requests for OpenAILLMOptimizationAPIGetChatCompletionsUsageReport
func NewOpenAILLMOptimizationAPIGetChatCompletionsUsageReportRequest(server string, params *OpenAILLMOptimizationAPIGetChatCompletionsUsageReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/openai/chat-completions/report/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLLMSettingsAPIGetSettingsRequest generates requests for LLMSettingsAPIGetSettings
func NewLLMSettingsAPIGetSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLLMSettingsAPIUpsertSettingsRequest calls the generic LLMSettingsAPIUpsertSettings builder with application/json body
func NewLLMSettingsAPIUpsertSettingsRequest(server string, body LLMSettingsAPIUpsertSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLLMSettingsAPIUpsertSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewLLMSettingsAPIUpsertSettingsRequestWithBody generates requests for LLMSettingsAPIUpsertSettings with any type of body
func NewLLMSettingsAPIUpsertSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/llm/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPICurrentUserProfileRequest generates requests for UsersAPICurrentUserProfile
func NewUsersAPICurrentUserProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIUpdateCurrentUserProfileRequest calls the generic UsersAPIUpdateCurrentUserProfile builder with application/json body
func NewUsersAPIUpdateCurrentUserProfileRequest(server string, body UsersAPIUpdateCurrentUserProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIUpdateCurrentUserProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersAPIUpdateCurrentUserProfileRequestWithBody generates requests for UsersAPIUpdateCurrentUserProfile with any type of body
func NewUsersAPIUpdateCurrentUserProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReportMetricsAPIGetNodeTemplatePromMetricsRequest generates requests for ReportMetricsAPIGetNodeTemplatePromMetrics
func NewReportMetricsAPIGetNodeTemplatePromMetricsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics/clusters/%s/node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportMetricsAPIGetWorkloadPromMetricsRequest generates requests for ReportMetricsAPIGetWorkloadPromMetrics
func NewReportMetricsAPIGetWorkloadPromMetricsRequest(server string, clusterId string, params *ReportMetricsAPIGetWorkloadPromMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics/clusters/%s/workload-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalLabels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additionalLabels", runtime.ParamLocationQuery, *params.AdditionalLabels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportMetricsAPIGetPromMetricsRequest generates requests for ReportMetricsAPIGetPromMetrics
func NewReportMetricsAPIGetPromMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics/prom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIListNotificationsRequest generates requests for NotificationAPIListNotifications
func NewNotificationAPIListNotificationsRequest(server string, params *NotificationAPIListNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSeverities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.severities", runtime.ParamLocationQuery, *params.FilterSeverities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsAcked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.isAcked", runtime.ParamLocationQuery, *params.FilterIsAcked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNotificationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.notificationId", runtime.ParamLocationQuery, *params.FilterNotificationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNotificationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.notificationName", runtime.ParamLocationQuery, *params.FilterNotificationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.clusterId", runtime.ParamLocationQuery, *params.FilterClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterClusterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.clusterName", runtime.ParamLocationQuery, *params.FilterClusterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOperationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.operationId", runtime.ParamLocationQuery, *params.FilterOperationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOperationType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.operationType", runtime.ParamLocationQuery, *params.FilterOperationType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.project", runtime.ParamLocationQuery, *params.FilterProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsExpired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.isExpired", runtime.ParamLocationQuery, *params.FilterIsExpired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIAckNotificationsRequest calls the generic NotificationAPIAckNotifications builder with application/json body
func NewNotificationAPIAckNotificationsRequest(server string, body NotificationAPIAckNotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationAPIAckNotificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewNotificationAPIAckNotificationsRequestWithBody generates requests for NotificationAPIAckNotifications with any type of body
func NewNotificationAPIAckNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/ack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationAPIListWebhookCategoriesRequest generates requests for NotificationAPIListWebhookCategories
func NewNotificationAPIListWebhookCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIListWebhookConfigsRequest generates requests for NotificationAPIListWebhookConfigs
func NewNotificationAPIListWebhookConfigsRequest(server string, params *NotificationAPIListWebhookConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSeverities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.severities", runtime.ParamLocationQuery, *params.FilterSeverities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.status", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCategories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.categories", runtime.ParamLocationQuery, *params.FilterCategories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSubcategories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.subcategories", runtime.ParamLocationQuery, *params.FilterSubcategories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPICreateWebhookConfigRequest calls the generic NotificationAPICreateWebhookConfig builder with application/json body
func NewNotificationAPICreateWebhookConfigRequest(server string, body NotificationAPICreateWebhookConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationAPICreateWebhookConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewNotificationAPICreateWebhookConfigRequestWithBody generates requests for NotificationAPICreateWebhookConfig with any type of body
func NewNotificationAPICreateWebhookConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationAPIDeleteWebhookConfigRequest generates requests for NotificationAPIDeleteWebhookConfig
func NewNotificationAPIDeleteWebhookConfigRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIGetWebhookConfigRequest generates requests for NotificationAPIGetWebhookConfig
func NewNotificationAPIGetWebhookConfigRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIUpdateWebhookConfigRequest calls the generic NotificationAPIUpdateWebhookConfig builder with application/json body
func NewNotificationAPIUpdateWebhookConfigRequest(server string, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationAPIUpdateWebhookConfigRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotificationAPIUpdateWebhookConfigRequestWithBody generates requests for NotificationAPIUpdateWebhookConfig with any type of body
func NewNotificationAPIUpdateWebhookConfigRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationAPIGetNotificationRequest generates requests for NotificationAPIGetNotification
func NewNotificationAPIGetNotificationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIListOrganizationsRequest generates requests for UsersAPIListOrganizations
func NewUsersAPIListOrganizationsRequest(server string, params *UsersAPIListOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPICreateOrganizationRequest calls the generic UsersAPICreateOrganization builder with application/json body
func NewUsersAPICreateOrganizationRequest(server string, body UsersAPICreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPICreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersAPICreateOrganizationRequestWithBody generates requests for UsersAPICreateOrganization with any type of body
func NewUsersAPICreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPIGetOrganizationReservationsBalanceRequest generates requests for InventoryAPIGetOrganizationReservationsBalance
func NewInventoryAPIGetOrganizationReservationsBalanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/reservations/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIGetOrganizationResourceUsageRequest generates requests for InventoryAPIGetOrganizationResourceUsage
func NewInventoryAPIGetOrganizationResourceUsageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/resource-usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIDeleteOrganizationRequest generates requests for UsersAPIDeleteOrganization
func NewUsersAPIDeleteOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIGetOrganizationRequest generates requests for UsersAPIGetOrganization
func NewUsersAPIGetOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIEditOrganizationRequest calls the generic UsersAPIEditOrganization builder with application/json body
func NewUsersAPIEditOrganizationRequest(server string, id string, body UsersAPIEditOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIEditOrganizationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersAPIEditOrganizationRequestWithBody generates requests for UsersAPIEditOrganization with any type of body
func NewUsersAPIEditOrganizationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPISyncClusterResourcesRequest generates requests for InventoryAPISyncClusterResources
func NewInventoryAPISyncClusterResourcesRequest(server string, organizationId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/clusters/%s/sync-resource-usage", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIGetReservationsRequest generates requests for InventoryAPIGetReservations
func NewInventoryAPIGetReservationsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIAddReservationRequest calls the generic InventoryAPIAddReservation builder with application/json body
func NewInventoryAPIAddReservationRequest(server string, organizationId string, body InventoryAPIAddReservationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryAPIAddReservationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewInventoryAPIAddReservationRequestWithBody generates requests for InventoryAPIAddReservation with any type of body
func NewInventoryAPIAddReservationRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPIGetReservationsBalanceRequest generates requests for InventoryAPIGetReservationsBalance
func NewInventoryAPIGetReservationsBalanceRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations/balance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIOverwriteReservationsRequest calls the generic InventoryAPIOverwriteReservations builder with application/json body
func NewInventoryAPIOverwriteReservationsRequest(server string, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryAPIOverwriteReservationsRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewInventoryAPIOverwriteReservationsRequestWithBody generates requests for InventoryAPIOverwriteReservations with any type of body
func NewInventoryAPIOverwriteReservationsRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations/overwrite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPIDeleteReservationRequest generates requests for InventoryAPIDeleteReservation
func NewInventoryAPIDeleteReservationRequest(server string, organizationId string, reservationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, reservationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIListOrganizationUsersRequest generates requests for UsersAPIListOrganizationUsers
func NewUsersAPIListOrganizationUsersRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIAddUserToOrganizationRequest calls the generic UsersAPIAddUserToOrganization builder with application/json body
func NewUsersAPIAddUserToOrganizationRequest(server string, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIAddUserToOrganizationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewUsersAPIAddUserToOrganizationRequestWithBody generates requests for UsersAPIAddUserToOrganization with any type of body
func NewUsersAPIAddUserToOrganizationRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPIRemoveUserFromOrganizationRequest generates requests for UsersAPIRemoveUserFromOrganization
func NewUsersAPIRemoveUserFromOrganizationRequest(server string, organizationId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIUpdateOrganizationUserRequest calls the generic UsersAPIUpdateOrganizationUser builder with application/json body
func NewUsersAPIUpdateOrganizationUserRequest(server string, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIUpdateOrganizationUserRequestWithBody(server, organizationId, userId, "application/json", bodyReader)
}

// NewUsersAPIUpdateOrganizationUserRequestWithBody generates requests for UsersAPIUpdateOrganizationUser with any type of body
func NewUsersAPIUpdateOrganizationUserRequestWithBody(server string, organizationId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPartnersAPIListOrganizationsRequest generates requests for PartnersAPIListOrganizations
func NewPartnersAPIListOrganizationsRequest(server string, partnerOrganizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partnerOrganizationId", runtime.ParamLocationPath, partnerOrganizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/partners/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPartnersAPICreateOrganizationRequest calls the generic PartnersAPICreateOrganization builder with application/json body
func NewPartnersAPICreateOrganizationRequest(server string, partnerOrganizationId string, body PartnersAPICreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartnersAPICreateOrganizationRequestWithBody(server, partnerOrganizationId, "application/json", bodyReader)
}

// NewPartnersAPICreateOrganizationRequestWithBody generates requests for PartnersAPICreateOrganization with any type of body
func NewPartnersAPICreateOrganizationRequestWithBody(server string, partnerOrganizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partnerOrganizationId", runtime.ParamLocationPath, partnerOrganizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/partners/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPartnersAPICreateTokenRequest calls the generic PartnersAPICreateToken builder with application/json body
func NewPartnersAPICreateTokenRequest(server string, partnerOrganizationId string, childOrganizationId string, body PartnersAPICreateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartnersAPICreateTokenRequestWithBody(server, partnerOrganizationId, childOrganizationId, "application/json", bodyReader)
}

// NewPartnersAPICreateTokenRequestWithBody generates requests for PartnersAPICreateToken with any type of body
func NewPartnersAPICreateTokenRequestWithBody(server string, partnerOrganizationId string, childOrganizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partnerOrganizationId", runtime.ParamLocationPath, partnerOrganizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "childOrganizationId", runtime.ParamLocationPath, childOrganizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/partners/%s/organizations/%s/tokens", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPartnersAPIDeleteTokenRequest generates requests for PartnersAPIDeleteToken
func NewPartnersAPIDeleteTokenRequest(server string, partnerOrganizationId string, childOrganizationId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partnerOrganizationId", runtime.ParamLocationPath, partnerOrganizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "childOrganizationId", runtime.ParamLocationPath, childOrganizationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/partners/%s/organizations/%s/tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPricingAPIGetPricingForClusterNodesRequest generates requests for PricingAPIGetPricingForClusterNodes
func NewPricingAPIGetPricingForClusterNodesRequest(server string, clusterId string, params *PricingAPIGetPricingForClusterNodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pricing/clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NodeIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeIds", runtime.ParamLocationQuery, *params.NodeIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPricingAPIGetPricingForClusterNodeRequest generates requests for PricingAPIGetPricingForClusterNode
func NewPricingAPIGetPricingForClusterNodeRequest(server string, clusterId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pricing/clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPricingAPIGetPricingForOrganizationNodesRequest generates requests for PricingAPIGetPricingForOrganizationNodes
func NewPricingAPIGetPricingForOrganizationNodesRequest(server string, params *PricingAPIGetPricingForOrganizationNodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pricing/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NodeIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeIds", runtime.ParamLocationQuery, *params.NodeIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPricingAPISyncGCPBillingAPIDataRequest generates requests for PricingAPISyncGCPBillingAPIData
func NewPricingAPISyncGCPBillingAPIDataRequest(server string, params *PricingAPISyncGCPBillingAPIDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pricing/sync/gcp/billing-api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billingAccountId", runtime.ParamLocationQuery, *params.BillingAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIListRebalancingSchedulesRequest generates requests for ScheduledRebalancingAPIListRebalancingSchedules
func NewScheduledRebalancingAPIListRebalancingSchedulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPICreateRebalancingScheduleRequest calls the generic ScheduledRebalancingAPICreateRebalancingSchedule builder with application/json body
func NewScheduledRebalancingAPICreateRebalancingScheduleRequest(server string, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody(server, "application/json", bodyReader)
}

// NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody generates requests for ScheduledRebalancingAPICreateRebalancingSchedule with any type of body
func NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIUpdateRebalancingScheduleRequest calls the generic ScheduledRebalancingAPIUpdateRebalancingSchedule builder with application/json body
func NewScheduledRebalancingAPIUpdateRebalancingScheduleRequest(server string, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody generates requests for ScheduledRebalancingAPIUpdateRebalancingSchedule with any type of body
func NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody(server string, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIDeleteRebalancingScheduleRequest generates requests for ScheduledRebalancingAPIDeleteRebalancingSchedule
func NewScheduledRebalancingAPIDeleteRebalancingScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIGetRebalancingScheduleRequest generates requests for ScheduledRebalancingAPIGetRebalancingSchedule
func NewScheduledRebalancingAPIGetRebalancingScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsageAPIGetUsageReportRequest generates requests for UsageAPIGetUsageReport
func NewUsageAPIGetUsageReportRequest(server string, params *UsageAPIGetUsageReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/report/usage/daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterPeriodFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.period.from", runtime.ParamLocationQuery, *params.FilterPeriodFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterPeriodTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.period.to", runtime.ParamLocationQuery, *params.FilterPeriodTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.clusterId", runtime.ParamLocationQuery, *params.FilterClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsageAPIGetUsageSummaryRequest generates requests for UsageAPIGetUsageSummary
func NewUsageAPIGetUsageSummaryRequest(server string, params *UsageAPIGetUsageSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/report/usage/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PeriodFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period.from", runtime.ParamLocationQuery, *params.PeriodFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PeriodTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period.to", runtime.ParamLocationQuery, *params.PeriodTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIGetCommitmentsAssignmentsRequest generates requests for CommitmentsAPIGetCommitmentsAssignments
func NewCommitmentsAPIGetCommitmentsAssignmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPICreateCommitmentAssignmentRequest generates requests for CommitmentsAPICreateCommitmentAssignment
func NewCommitmentsAPICreateCommitmentAssignmentRequest(server string, params *CommitmentsAPICreateCommitmentAssignmentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commitmentId", runtime.ParamLocationQuery, params.CommitmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIDeleteCommitmentAssignmentRequest generates requests for CommitmentsAPIDeleteCommitmentAssignment
func NewCommitmentsAPIDeleteCommitmentAssignmentRequest(server string, assignmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assignmentId", runtime.ParamLocationPath, assignmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/assignments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIGetCommitmentsRequest generates requests for CommitmentsAPIGetCommitments
func NewCommitmentsAPIGetCommitmentsRequest(server string, params *CommitmentsAPIGetCommitmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeUsage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIImportAzureReservationsRequest calls the generic CommitmentsAPIImportAzureReservations builder with application/json body
func NewCommitmentsAPIImportAzureReservationsRequest(server string, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIImportAzureReservationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommitmentsAPIImportAzureReservationsRequestWithBody generates requests for CommitmentsAPIImportAzureReservations with any type of body
func NewCommitmentsAPIImportAzureReservationsRequestWithBody(server string, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/import/azure/reservation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Behaviour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "behaviour", runtime.ParamLocationQuery, *params.Behaviour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIImportGCPCommitmentsRequest calls the generic CommitmentsAPIImportGCPCommitments builder with application/json body
func NewCommitmentsAPIImportGCPCommitmentsRequest(server string, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIImportGCPCommitmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommitmentsAPIImportGCPCommitmentsRequestWithBody generates requests for CommitmentsAPIImportGCPCommitments with any type of body
func NewCommitmentsAPIImportGCPCommitmentsRequestWithBody(server string, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/import/gcp/cud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Behaviour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "behaviour", runtime.ParamLocationQuery, *params.Behaviour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIGetGCPCommitmentsImportScriptRequest generates requests for CommitmentsAPIGetGCPCommitmentsImportScript
func NewCommitmentsAPIGetGCPCommitmentsImportScriptRequest(server string, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/import/gcp/cud/script")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Projects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects", runtime.ParamLocationQuery, *params.Projects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIDeleteCommitmentRequest generates requests for CommitmentsAPIDeleteCommitment
func NewCommitmentsAPIDeleteCommitmentRequest(server string, commitmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIUpdateCommitmentRequest calls the generic CommitmentsAPIUpdateCommitment builder with application/json body
func NewCommitmentsAPIUpdateCommitmentRequest(server string, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIUpdateCommitmentRequestWithBody(server, commitmentId, "application/json", bodyReader)
}

// NewCommitmentsAPIUpdateCommitmentRequestWithBody generates requests for CommitmentsAPIUpdateCommitment with any type of body
func NewCommitmentsAPIUpdateCommitmentRequestWithBody(server string, commitmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIGetCommitmentAssignmentsRequest generates requests for CommitmentsAPIGetCommitmentAssignments
func NewCommitmentsAPIGetCommitmentAssignmentsRequest(server string, commitmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s/assignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIReplaceCommitmentAssignmentsRequest calls the generic CommitmentsAPIReplaceCommitmentAssignments builder with application/json body
func NewCommitmentsAPIReplaceCommitmentAssignmentsRequest(server string, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody(server, commitmentId, "application/json", bodyReader)
}

// NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody generates requests for CommitmentsAPIReplaceCommitmentAssignments with any type of body
func NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody(server string, commitmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s/assignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIGetGCPCommitmentsScriptTemplateRequest generates requests for CommitmentsAPIGetGCPCommitmentsScriptTemplate
func NewCommitmentsAPIGetGCPCommitmentsScriptTemplateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/commitments/gcp/cud/import.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportConfigurationAPIGetEgressdScriptTemplateRequest generates requests for ReportConfigurationAPIGetEgressdScriptTemplate
func NewReportConfigurationAPIGetEgressdScriptTemplateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/egressd/install.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuntimeSecurityAPIGetKvisordScriptTemplateRequest generates requests for RuntimeSecurityAPIGetKvisordScriptTemplate
func NewRuntimeSecurityAPIGetKvisordScriptTemplateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/kvisord/install.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetInstallCmdRequest generates requests for WorkloadOptimizationAPIGetInstallCmd
func NewWorkloadOptimizationAPIGetInstallCmdRequest(server string, params *WorkloadOptimizationAPIGetInstallCmdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/workload-autoscaler-install")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetInstallScriptRequest generates requests for WorkloadOptimizationAPIGetInstallScript
func NewWorkloadOptimizationAPIGetInstallScriptRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/workload-autoscaler-install.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCleanupScriptTemplateRequest generates requests for ExternalClusterAPIGetCleanupScriptTemplate
func NewExternalClusterAPIGetCleanupScriptTemplateRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/cleanup.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptTemplateRequest generates requests for ExternalClusterAPIGetCredentialsScriptTemplate
func NewExternalClusterAPIGetCredentialsScriptTemplateRequest(server string, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/onboarding.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CrossRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetAgentsStatusRequest calls the generic InsightsAPIGetAgentsStatus builder with application/json body
func NewInsightsAPIGetAgentsStatusRequest(server string, body InsightsAPIGetAgentsStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIGetAgentsStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPIGetAgentsStatusRequestWithBody generates requests for InsightsAPIGetAgentsStatus with any type of body
func NewInsightsAPIGetAgentsStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetAttackPathsRequest generates requests for InsightsAPIGetAttackPaths
func NewInsightsAPIGetAttackPathsRequest(server string, params *InsightsAPIGetAttackPathsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/attack-paths")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetAttackPathDetailsRequest generates requests for InsightsAPIGetAttackPathDetails
func NewInsightsAPIGetAttackPathDetailsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/attack-paths/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetBestPracticesReportRequest generates requests for InsightsAPIGetBestPracticesReport
func NewInsightsAPIGetBestPracticesReportRequest(server string, params *InsightsAPIGetBestPracticesReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespaces != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaces", runtime.ParamLocationQuery, *params.Namespaces); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityLevels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severityLevels", runtime.ParamLocationQuery, *params.SeverityLevels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Standard != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standard", runtime.ParamLocationQuery, *params.Standard); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReadonlyClusters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "readonlyClusters", runtime.ParamLocationQuery, *params.ReadonlyClusters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetChecksResourcesRequest calls the generic InsightsAPIGetChecksResources builder with application/json body
func NewInsightsAPIGetChecksResourcesRequest(server string, body InsightsAPIGetChecksResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIGetChecksResourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPIGetChecksResourcesRequestWithBody generates requests for InsightsAPIGetChecksResources with any type of body
func NewInsightsAPIGetChecksResourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetBestPracticesCheckDetailsRequest generates requests for InsightsAPIGetBestPracticesCheckDetails
func NewInsightsAPIGetBestPracticesCheckDetailsRequest(server string, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Standard != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standard", runtime.ParamLocationQuery, *params.Standard); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIEnforceCheckPolicyRequest calls the generic InsightsAPIEnforceCheckPolicy builder with application/json body
func NewInsightsAPIEnforceCheckPolicyRequest(server string, ruleId string, body InsightsAPIEnforceCheckPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIEnforceCheckPolicyRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewInsightsAPIEnforceCheckPolicyRequestWithBody generates requests for InsightsAPIEnforceCheckPolicy with any type of body
func NewInsightsAPIEnforceCheckPolicyRequestWithBody(server string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/%s/enforce", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetCheckExceptionsRequest generates requests for InsightsAPIGetCheckExceptions
func NewInsightsAPIGetCheckExceptionsRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/%s/exceptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPISaveCheckExceptionsRequest calls the generic InsightsAPISaveCheckExceptions builder with application/json body
func NewInsightsAPISaveCheckExceptionsRequest(server string, ruleId string, body InsightsAPISaveCheckExceptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPISaveCheckExceptionsRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewInsightsAPISaveCheckExceptionsRequestWithBody generates requests for InsightsAPISaveCheckExceptions with any type of body
func NewInsightsAPISaveCheckExceptionsRequestWithBody(server string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/%s/exceptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIPreviewExceptionGroupsResourcesRequest calls the generic InsightsAPIPreviewExceptionGroupsResources builder with application/json body
func NewInsightsAPIPreviewExceptionGroupsResourcesRequest(server string, ruleId string, body InsightsAPIPreviewExceptionGroupsResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIPreviewExceptionGroupsResourcesRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewInsightsAPIPreviewExceptionGroupsResourcesRequestWithBody generates requests for InsightsAPIPreviewExceptionGroupsResources with any type of body
func NewInsightsAPIPreviewExceptionGroupsResourcesRequestWithBody(server string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/%s/exceptions/preview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetCheckResourcesRequest calls the generic InsightsAPIGetCheckResources builder with application/json body
func NewInsightsAPIGetCheckResourcesRequest(server string, ruleId string, body InsightsAPIGetCheckResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIGetCheckResourcesRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewInsightsAPIGetCheckResourcesRequestWithBody generates requests for InsightsAPIGetCheckResources with any type of body
func NewInsightsAPIGetCheckResourcesRequestWithBody(server string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIDeletePolicyEnforcementRequest generates requests for InsightsAPIDeletePolicyEnforcement
func NewInsightsAPIDeletePolicyEnforcementRequest(server string, enforcementId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "enforcementId", runtime.ParamLocationPath, enforcementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/enforcements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetBestPracticesReportFiltersRequest generates requests for InsightsAPIGetBestPracticesReportFilters
func NewInsightsAPIGetBestPracticesReportFiltersRequest(server string, params *InsightsAPIGetBestPracticesReportFiltersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/filters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIScheduleBestPracticesScanRequest calls the generic InsightsAPIScheduleBestPracticesScan builder with application/json body
func NewInsightsAPIScheduleBestPracticesScanRequest(server string, body InsightsAPIScheduleBestPracticesScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIScheduleBestPracticesScanRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPIScheduleBestPracticesScanRequestWithBody generates requests for InsightsAPIScheduleBestPracticesScan with any type of body
func NewInsightsAPIScheduleBestPracticesScanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/schedule-scan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetBestPracticesReportSummaryRequest generates requests for InsightsAPIGetBestPracticesReportSummary
func NewInsightsAPIGetBestPracticesReportSummaryRequest(server string, params *InsightsAPIGetBestPracticesReportSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severityLevel", runtime.ParamLocationQuery, *params.SeverityLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Standard != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standard", runtime.ParamLocationQuery, *params.Standard); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetDailySummaryRequest generates requests for InsightsAPIGetDailySummary
func NewInsightsAPIGetDailySummaryRequest(server string, date string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/daily-summary/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetExceptedChecksRequest generates requests for InsightsAPIGetExceptedChecks
func NewInsightsAPIGetExceptedChecksRequest(server string, params *InsightsAPIGetExceptedChecksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/exceptions/best-practices/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespaces != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaces", runtime.ParamLocationQuery, *params.Namespaces); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityLevels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severityLevels", runtime.ParamLocationQuery, *params.SeverityLevels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Standard != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standard", runtime.ParamLocationQuery, *params.Standard); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImagesRequest generates requests for InsightsAPIGetContainerImages
func NewInsightsAPIGetContainerImagesRequest(server string, params *InsightsAPIGetContainerImagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cves != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cves", runtime.ParamLocationQuery, *params.Cves); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Packages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "packages", runtime.ParamLocationQuery, *params.Packages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespaces != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaces", runtime.ParamLocationQuery, *params.Namespaces); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExceptionFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exceptionFilter", runtime.ParamLocationQuery, *params.ExceptionFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIDeleteImagesRequest calls the generic InsightsAPIDeleteImages builder with application/json body
func NewInsightsAPIDeleteImagesRequest(server string, body InsightsAPIDeleteImagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIDeleteImagesRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPIDeleteImagesRequestWithBody generates requests for InsightsAPIDeleteImages with any type of body
func NewInsightsAPIDeleteImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIImageExceptionChangesRequest calls the generic InsightsAPIImageExceptionChanges builder with application/json body
func NewInsightsAPIImageExceptionChangesRequest(server string, body InsightsAPIImageExceptionChangesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIImageExceptionChangesRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPIImageExceptionChangesRequestWithBody generates requests for InsightsAPIImageExceptionChanges with any type of body
func NewInsightsAPIImageExceptionChangesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/exceptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetContainerImagesFiltersRequest generates requests for InsightsAPIGetContainerImagesFilters
func NewInsightsAPIGetContainerImagesFiltersRequest(server string, params *InsightsAPIGetContainerImagesFiltersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/filters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImagesSummaryRequest generates requests for InsightsAPIGetContainerImagesSummary
func NewInsightsAPIGetContainerImagesSummaryRequest(server string, params *InsightsAPIGetContainerImagesSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetPublicImageAlternativesRequest generates requests for InsightsAPIGetPublicImageAlternatives
func NewInsightsAPIGetPublicImageAlternativesRequest(server string, tagId string, params *InsightsAPIGetPublicImageAlternativesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/%s/alternatives", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImageDetailsRequest generates requests for InsightsAPIGetContainerImageDetails
func NewInsightsAPIGetContainerImageDetailsRequest(server string, tagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/%s/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImageDigestsRequest generates requests for InsightsAPIGetContainerImageDigests
func NewInsightsAPIGetContainerImageDigestsRequest(server string, tagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/%s/digests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImagePackagesRequest generates requests for InsightsAPIGetContainerImagePackages
func NewInsightsAPIGetContainerImagePackagesRequest(server string, tagId string, params *InsightsAPIGetContainerImagePackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/%s/packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExceptionFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exceptionFilter", runtime.ParamLocationQuery, *params.ExceptionFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImageResourcesRequest generates requests for InsightsAPIGetContainerImageResources
func NewInsightsAPIGetContainerImageResourcesRequest(server string, tagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImageVulnerabilitiesRequest generates requests for InsightsAPIGetContainerImageVulnerabilities
func NewInsightsAPIGetContainerImageVulnerabilitiesRequest(server string, tagId string, params *InsightsAPIGetContainerImageVulnerabilitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/%s/vulnerabilities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PkgId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pkgId", runtime.ParamLocationQuery, *params.PkgId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExceptionFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exceptionFilter", runtime.ParamLocationQuery, *params.ExceptionFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetContainerImagePackageVulnerabilityDetailsRequest generates requests for InsightsAPIGetContainerImagePackageVulnerabilityDetails
func NewInsightsAPIGetContainerImagePackageVulnerabilityDetailsRequest(server string, tagId string, pkgVulnId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pkgVulnId", runtime.ParamLocationPath, pkgVulnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/images/%s/vulnerabilities/%s/details", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetAttackPathsOverviewRequest generates requests for InsightsAPIGetAttackPathsOverview
func NewInsightsAPIGetAttackPathsOverviewRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/overview/attack-paths")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetBestPracticesOverviewRequest generates requests for InsightsAPIGetBestPracticesOverview
func NewInsightsAPIGetBestPracticesOverviewRequest(server string, params *InsightsAPIGetBestPracticesOverviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/overview/best-practices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Standard != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standard", runtime.ParamLocationQuery, *params.Standard); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetImageSecurityOverviewRequest generates requests for InsightsAPIGetImageSecurityOverview
func NewInsightsAPIGetImageSecurityOverviewRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/overview/image-security")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetNodesOverviewRequest generates requests for InsightsAPIGetNodesOverview
func NewInsightsAPIGetNodesOverviewRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/overview/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetResourceDetailsRequest generates requests for InsightsAPIGetResourceDetails
func NewInsightsAPIGetResourceDetailsRequest(server string, id string, params *InsightsAPIGetResourceDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standard", runtime.ParamLocationQuery, params.Standard); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetAgentStatusRequest generates requests for InsightsAPIGetAgentStatus
func NewInsightsAPIGetAgentStatusRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/%s/agent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIIngestAgentLogRequest calls the generic InsightsAPIIngestAgentLog builder with application/json body
func NewInsightsAPIIngestAgentLogRequest(server string, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIIngestAgentLogRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewInsightsAPIIngestAgentLogRequestWithBody generates requests for InsightsAPIIngestAgentLog with any type of body
func NewInsightsAPIIngestAgentLogRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/%s/log", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetAgentSyncStateRequest calls the generic InsightsAPIGetAgentSyncState builder with application/json body
func NewInsightsAPIGetAgentSyncStateRequest(server string, clusterId string, body InsightsAPIGetAgentSyncStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIGetAgentSyncStateRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewInsightsAPIGetAgentSyncStateRequestWithBody generates requests for InsightsAPIGetAgentSyncState with any type of body
func NewInsightsAPIGetAgentSyncStateRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/%s/sync-state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIPostAgentTelemetryRequest calls the generic InsightsAPIPostAgentTelemetry builder with application/json body
func NewInsightsAPIPostAgentTelemetryRequest(server string, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIPostAgentTelemetryRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewInsightsAPIPostAgentTelemetryRequestWithBody generates requests for InsightsAPIPostAgentTelemetry with any type of body
func NewInsightsAPIPostAgentTelemetryRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/%s/telemetry", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIListIntegrationsRequest generates requests for InsightsAPIListIntegrations
func NewInsightsAPIListIntegrationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPICreateIntegrationRequest calls the generic InsightsAPICreateIntegration builder with application/json body
func NewInsightsAPICreateIntegrationRequest(server string, body InsightsAPICreateIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPICreateIntegrationRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPICreateIntegrationRequestWithBody generates requests for InsightsAPICreateIntegration with any type of body
func NewInsightsAPICreateIntegrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIDeleteIntegrationRequest generates requests for InsightsAPIDeleteIntegration
func NewInsightsAPIDeleteIntegrationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetIntegrationRequest generates requests for InsightsAPIGetIntegration
func NewInsightsAPIGetIntegrationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIUpdateIntegrationRequest calls the generic InsightsAPIUpdateIntegration builder with application/json body
func NewInsightsAPIUpdateIntegrationRequest(server string, id string, body InsightsAPIUpdateIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIUpdateIntegrationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInsightsAPIUpdateIntegrationRequestWithBody generates requests for InsightsAPIUpdateIntegration with any type of body
func NewInsightsAPIUpdateIntegrationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPICreateTicketRequest calls the generic InsightsAPICreateTicket builder with application/json body
func NewInsightsAPICreateTicketRequest(server string, id string, body InsightsAPICreateTicketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPICreateTicketRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInsightsAPICreateTicketRequestWithBody generates requests for InsightsAPICreateTicket with any type of body
func NewInsightsAPICreateTicketRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/integrations/%s/ticket", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRuntimeSecurityAPIGetAnomaliesRequest generates requests for RuntimeSecurityAPIGetAnomalies
func NewRuntimeSecurityAPIGetAnomaliesRequest(server string, params *RuntimeSecurityAPIGetAnomaliesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/runtime/anomalies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespaces != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaces", runtime.ParamLocationQuery, *params.Namespaces); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuntimeSecurityAPIAckAnomaliesRequest generates requests for RuntimeSecurityAPIAckAnomalies
func NewRuntimeSecurityAPIAckAnomaliesRequest(server string, params *RuntimeSecurityAPIAckAnomaliesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/runtime/anomalies/ack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuntimeSecurityAPICloseAnomaliesRequest generates requests for RuntimeSecurityAPICloseAnomalies
func NewRuntimeSecurityAPICloseAnomaliesRequest(server string, params *RuntimeSecurityAPICloseAnomaliesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/runtime/anomalies/close")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReasonDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reasonDescription", runtime.ParamLocationQuery, *params.ReasonDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuntimeSecurityAPIGetAnomalyRequest generates requests for RuntimeSecurityAPIGetAnomaly
func NewRuntimeSecurityAPIGetAnomalyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/runtime/anomalies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuntimeSecurityAPIGetAnomaliesOverviewRequest generates requests for RuntimeSecurityAPIGetAnomaliesOverview
func NewRuntimeSecurityAPIGetAnomaliesOverviewRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/runtime/overview/anomalies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuntimeSecurityAPIGetKvisordScriptRequest generates requests for RuntimeSecurityAPIGetKvisordScript
func NewRuntimeSecurityAPIGetKvisordScriptRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/runtime/%s/kvisord-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIConfigureClusterSecuritySettingsRequest calls the generic InsightsAPIConfigureClusterSecuritySettings builder with application/json body
func NewInsightsAPIConfigureClusterSecuritySettingsRequest(server string, id string, body InsightsAPIConfigureClusterSecuritySettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIConfigureClusterSecuritySettingsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewInsightsAPIConfigureClusterSecuritySettingsRequestWithBody generates requests for InsightsAPIConfigureClusterSecuritySettings with any type of body
func NewInsightsAPIConfigureClusterSecuritySettingsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/settings/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSSOAPIListSSOConnectionsRequest generates requests for SSOAPIListSSOConnections
func NewSSOAPIListSSOConnectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSSOAPICreateSSOConnectionRequest calls the generic SSOAPICreateSSOConnection builder with application/json body
func NewSSOAPICreateSSOConnectionRequest(server string, body SSOAPICreateSSOConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSSOAPICreateSSOConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewSSOAPICreateSSOConnectionRequestWithBody generates requests for SSOAPICreateSSOConnection with any type of body
func NewSSOAPICreateSSOConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSSOAPIDeleteSSOConnectionRequest generates requests for SSOAPIDeleteSSOConnection
func NewSSOAPIDeleteSSOConnectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSSOAPIGetSSOConnectionRequest generates requests for SSOAPIGetSSOConnection
func NewSSOAPIGetSSOConnectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSSOAPIUpdateSSOConnectionRequest calls the generic SSOAPIUpdateSSOConnection builder with application/json body
func NewSSOAPIUpdateSSOConnectionRequest(server string, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSSOAPIUpdateSSOConnectionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSSOAPIUpdateSSOConnectionRequestWithBody generates requests for SSOAPIUpdateSSOConnection with any type of body
func NewSSOAPIUpdateSSOConnectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIListAvailableRebalancingTZRequest generates requests for ScheduledRebalancingAPIListAvailableRebalancingTZ
func NewScheduledRebalancingAPIListAvailableRebalancingTZRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/time-zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetAgentStatus2Request generates requests for WorkloadOptimizationAPIGetAgentStatus2
func NewWorkloadOptimizationAPIGetAgentStatus2Request(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/components/workload-autoscaler", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloadScalingPoliciesRequest generates requests for WorkloadOptimizationAPIListWorkloadScalingPolicies
func NewWorkloadOptimizationAPIListWorkloadScalingPoliciesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequest calls the generic WorkloadOptimizationAPICreateWorkloadScalingPolicy builder with application/json body
func NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequest(server string, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody generates requests for WorkloadOptimizationAPICreateWorkloadScalingPolicy with any type of body
func NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIDeleteWorkloadScalingPolicyRequest generates requests for WorkloadOptimizationAPIDeleteWorkloadScalingPolicy
func NewWorkloadOptimizationAPIDeleteWorkloadScalingPolicyRequest(server string, clusterId string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequest calls the generic WorkloadOptimizationAPIUpdateWorkloadScalingPolicy builder with application/json body
func NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequest(server string, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody(server, clusterId, policyId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody generates requests for WorkloadOptimizationAPIUpdateWorkloadScalingPolicy with any type of body
func NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody(server string, clusterId string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest calls the generic WorkloadOptimizationAPIAssignScalingPolicyWorkloads builder with application/json body
func NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest(server string, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody(server, clusterId, policyId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody generates requests for WorkloadOptimizationAPIAssignScalingPolicyWorkloads with any type of body
func NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody(server string, clusterId string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies/%s/workloads", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloadEvents2Request generates requests for WorkloadOptimizationAPIListWorkloadEvents2
func NewWorkloadOptimizationAPIListWorkloadEvents2Request(server string, clusterId string, params *WorkloadOptimizationAPIListWorkloadEvents2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workload-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorkloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadId", runtime.ParamLocationQuery, *params.WorkloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkloadName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadName", runtime.ParamLocationQuery, *params.WorkloadName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloads2Request generates requests for WorkloadOptimizationAPIListWorkloads2
func NewWorkloadOptimizationAPIListWorkloads2Request(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetWorkload2Request generates requests for WorkloadOptimizationAPIGetWorkload2
func NewWorkloadOptimizationAPIGetWorkload2Request(server string, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkload2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadId", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeMetrics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMetrics", runtime.ParamLocationQuery, *params.IncludeMetrics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIUpdateWorkload2Request calls the generic WorkloadOptimizationAPIUpdateWorkload2 builder with application/json body
func NewWorkloadOptimizationAPIUpdateWorkload2Request(server string, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkload2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIUpdateWorkload2RequestWithBody(server, clusterId, workloadId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIUpdateWorkload2RequestWithBody generates requests for WorkloadOptimizationAPIUpdateWorkload2 with any type of body
func NewWorkloadOptimizationAPIUpdateWorkload2RequestWithBody(server string, clusterId string, workloadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadId", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIGetInstallCmd2Request generates requests for WorkloadOptimizationAPIGetInstallCmd2
func NewWorkloadOptimizationAPIGetInstallCmd2Request(server string, params *WorkloadOptimizationAPIGetInstallCmd2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/scripts/workload-autoscaler-install")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetInstallScript2Request generates requests for WorkloadOptimizationAPIGetInstallScript2
func NewWorkloadOptimizationAPIGetInstallScript2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/scripts/workload-autoscaler-install.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AutoscalerAPIGetAgentScriptWithResponse request
	AutoscalerAPIGetAgentScriptWithResponse(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetAgentScriptResponse, error)

	// AuditAPIListAuditEntriesWithResponse request
	AuditAPIListAuditEntriesWithResponse(ctx context.Context, params *AuditAPIListAuditEntriesParams, reqEditors ...RequestEditorFn) (*AuditAPIListAuditEntriesResponse, error)

	// LoginCallbackWithResponse request
	LoginCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginCallbackResponse, error)

	// LoginWithResponse request
	LoginWithResponse(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// LogoutWithResponse request
	LogoutWithResponse(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// SamlAcsWithResponse request
	SamlAcsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SamlAcsResponse, error)

	// GetSessionWithResponse request
	GetSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionResponse, error)

	// AuthTokenAPIListAuthTokensWithResponse request
	AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*AuthTokenAPIListAuthTokensResponse, error)

	// AuthTokenAPICreateAuthTokenWithBodyWithResponse request with any body
	AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenAPICreateAuthTokenResponse, error)

	AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenAPICreateAuthTokenResponse, error)

	// AuthTokenAPIDeleteAuthTokenWithResponse request
	AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AuthTokenAPIDeleteAuthTokenResponse, error)

	// AuthTokenAPIGetAuthTokenWithResponse request
	AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AuthTokenAPIGetAuthTokenResponse, error)

	// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse request with any body
	AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenAPIUpdateAuthTokenResponse, error)

	AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenAPIUpdateAuthTokenResponse, error)

	// BillingSsoWithResponse request
	BillingSsoWithResponse(ctx context.Context, params *BillingSsoParams, reqEditors ...RequestEditorFn) (*BillingSsoResponse, error)

	// SubscriptionWithResponse request
	SubscriptionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubscriptionResponse, error)

	// SubscriptionCheckoutWithResponse request
	SubscriptionCheckoutWithResponse(ctx context.Context, params *SubscriptionCheckoutParams, reqEditors ...RequestEditorFn) (*SubscriptionCheckoutResponse, error)

	// BillingAPIGetUsageReportWithResponse request
	BillingAPIGetUsageReportWithResponse(ctx context.Context, params *BillingAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*BillingAPIGetUsageReportResponse, error)

	// WorkloadOptimizationAPIGetAgentStatusWithResponse request
	WorkloadOptimizationAPIGetAgentStatusWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetAgentStatusResponse, error)

	// ComponentsAPIIngestLogsWithBodyWithResponse request with any body
	ComponentsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, component string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComponentsAPIIngestLogsResponse, error)

	ComponentsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, component string, body ComponentsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComponentsAPIIngestLogsResponse, error)

	// WorkloadOptimizationAPIListWorkloadEventsWithResponse request
	WorkloadOptimizationAPIListWorkloadEventsWithResponse(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadEventsResponse, error)

	// WorkloadOptimizationAPIListWorkloadsWithResponse request
	WorkloadOptimizationAPIListWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadsResponse, error)

	// WorkloadOptimizationAPIGetWorkloadWithResponse request
	WorkloadOptimizationAPIGetWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetWorkloadResponse, error)

	// WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse request with any body
	WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error)

	WorkloadOptimizationAPIUpdateWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error)

	// AllocationGroupAPIGetAllocationGroupCostTimedSummariesWithResponse request
	AllocationGroupAPIGetAllocationGroupCostTimedSummariesWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostTimedSummariesParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse, error)

	// AllocationGroupAPIGetAllocationGroupCostSummariesWithResponse request
	AllocationGroupAPIGetAllocationGroupCostSummariesWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostSummariesParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupCostSummariesResponse, error)

	// AllocationGroupAPIListAllocationGroupsWithResponse request
	AllocationGroupAPIListAllocationGroupsWithResponse(ctx context.Context, params *AllocationGroupAPIListAllocationGroupsParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIListAllocationGroupsResponse, error)

	// AllocationGroupAPICreateAllocationGroupWithBodyWithResponse request with any body
	AllocationGroupAPICreateAllocationGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocationGroupAPICreateAllocationGroupResponse, error)

	AllocationGroupAPICreateAllocationGroupWithResponse(ctx context.Context, body AllocationGroupAPICreateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocationGroupAPICreateAllocationGroupResponse, error)

	// AllocationGroupAPIGetAllocationGroupTotalCostTimedWithResponse request
	AllocationGroupAPIGetAllocationGroupTotalCostTimedWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupTotalCostTimedParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse, error)

	// AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryWithResponse request
	AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryWithResponse(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse, error)

	// AllocationGroupAPIGetAllocationGroupEfficiencySummaryWithResponse request
	AllocationGroupAPIGetAllocationGroupEfficiencySummaryWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupEfficiencySummaryParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse, error)

	// AllocationGroupAPIGetCostAllocationGroupSummaryWithResponse request
	AllocationGroupAPIGetCostAllocationGroupSummaryWithResponse(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupSummaryParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupSummaryResponse, error)

	// AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsWithResponse request
	AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsWithResponse(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse, error)

	// AllocationGroupAPIGetCostAllocationGroupWorkloadsWithResponse request
	AllocationGroupAPIGetCostAllocationGroupWorkloadsWithResponse(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupWorkloadsParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse, error)

	// AllocationGroupAPIDeleteAllocationGroupWithResponse request
	AllocationGroupAPIDeleteAllocationGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AllocationGroupAPIDeleteAllocationGroupResponse, error)

	// AllocationGroupAPIUpdateAllocationGroupWithBodyWithResponse request with any body
	AllocationGroupAPIUpdateAllocationGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocationGroupAPIUpdateAllocationGroupResponse, error)

	AllocationGroupAPIUpdateAllocationGroupWithResponse(ctx context.Context, id string, body AllocationGroupAPIUpdateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocationGroupAPIUpdateAllocationGroupResponse, error)

	// ClusterReportAPIGetClusterCostReportWithResponse request
	ClusterReportAPIGetClusterCostReportWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterCostReportResponse, error)

	// WorkloadReportAPIGetWorkloadDataTransferCostWithResponse request
	WorkloadReportAPIGetWorkloadDataTransferCostWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadDataTransferCostResponse, error)

	// WorkloadReportAPIGetWorkloadDataTransferCost2WithBodyWithResponse request with any body
	WorkloadReportAPIGetWorkloadDataTransferCost2WithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadDataTransferCost2Response, error)

	WorkloadReportAPIGetWorkloadDataTransferCost2WithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, body WorkloadReportAPIGetWorkloadDataTransferCost2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadDataTransferCost2Response, error)

	// ClusterReportAPIGetClusterEfficiencyReportWithResponse request
	ClusterReportAPIGetClusterEfficiencyReportWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterEfficiencyReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterEfficiencyReportResponse, error)

	// ClusterReportAPIGetSavingsRecommendationWithResponse request
	ClusterReportAPIGetSavingsRecommendationWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetSavingsRecommendationResponse, error)

	// ClusterReportAPIGetClusterCostHistoryWithResponse request
	ClusterReportAPIGetClusterCostHistoryWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostHistoryParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterCostHistoryResponse, error)

	// ReportConfigurationAPIGetGroupingConfigWithResponse request
	ReportConfigurationAPIGetGroupingConfigWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetGroupingConfigResponse, error)

	// ReportConfigurationAPIUpsertGroupingConfigWithBodyWithResponse request with any body
	ReportConfigurationAPIUpsertGroupingConfigWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIUpsertGroupingConfigResponse, error)

	ReportConfigurationAPIUpsertGroupingConfigWithResponse(ctx context.Context, clusterId string, body ReportConfigurationAPIUpsertGroupingConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIUpsertGroupingConfigResponse, error)

	// NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBodyWithResponse request with any body
	NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBodyWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse, error)

	NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, body NamespaceReportAPIGetClusterNamespaceCostReportSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse, error)

	// NamespaceReportAPIGetClusterNamespaceDataTransferCostWithResponse request
	NamespaceReportAPIGetClusterNamespaceDataTransferCostWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferCostParams, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse, error)

	// NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostWithResponse request
	NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostParams, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse, error)

	// NamespaceReportAPIGetClusterNamespaceCostReportWithBodyWithResponse request with any body
	NamespaceReportAPIGetClusterNamespaceCostReportWithBodyWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportResponse, error)

	NamespaceReportAPIGetClusterNamespaceCostReportWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, body NamespaceReportAPIGetClusterNamespaceCostReportJSONRequestBody, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportResponse, error)

	// NamespaceReportAPIGetSingleNamespaceCostReportWithResponse request
	NamespaceReportAPIGetSingleNamespaceCostReportWithResponse(ctx context.Context, clusterId string, namespace string, params *NamespaceReportAPIGetSingleNamespaceCostReportParams, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetSingleNamespaceCostReportResponse, error)

	// WorkloadReportAPIGetSingleWorkloadCostReportWithResponse request
	WorkloadReportAPIGetSingleWorkloadCostReportWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadCostReportParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetSingleWorkloadCostReportResponse, error)

	// WorkloadReportAPIGetSingleWorkloadDataTransferCostWithResponse request
	WorkloadReportAPIGetSingleWorkloadDataTransferCostWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse, error)

	// WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameWithResponse request
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse, error)

	// WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryWithResponse request
	WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse, error)

	// WorkloadReportAPIGetWorkloadTrafficDestinationsWithResponse request
	WorkloadReportAPIGetWorkloadTrafficDestinationsWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadTrafficDestinationsResponse, error)

	// ReportConfigurationAPIGetReportingCapabilitiesWithResponse request
	ReportConfigurationAPIGetReportingCapabilitiesWithResponse(ctx context.Context, clusterId string, params *ReportConfigurationAPIGetReportingCapabilitiesParams, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetReportingCapabilitiesResponse, error)

	// ClusterReportAPIGetClusterResourceUsageWithResponse request
	ClusterReportAPIGetClusterResourceUsageWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterResourceUsageParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterResourceUsageResponse, error)

	// WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBodyWithResponse request with any body
	WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse, error)

	WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithResponse(ctx context.Context, clusterId string, body WorkloadReportAPIGetClusterWorkloadRightsizingPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse, error)

	// ClusterReportAPIGetRightsizingSummaryWithResponse request
	ClusterReportAPIGetRightsizingSummaryWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetRightsizingSummaryResponse, error)

	// ClusterReportAPIGetClusterSavingsReportWithResponse request
	ClusterReportAPIGetClusterSavingsReportWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterSavingsReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterSavingsReportResponse, error)

	// ClusterReportAPIGetClusterSummaryWithResponse request
	ClusterReportAPIGetClusterSummaryWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterSummaryResponse, error)

	// WorkloadReportAPIGetWorkloadCostSummariesWithBodyWithResponse request with any body
	WorkloadReportAPIGetWorkloadCostSummariesWithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadCostSummariesResponse, error)

	WorkloadReportAPIGetWorkloadCostSummariesWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, body WorkloadReportAPIGetWorkloadCostSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadCostSummariesResponse, error)

	// WorkloadReportAPIGetClusterWorkloadReportWithResponse request
	WorkloadReportAPIGetClusterWorkloadReportWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReportParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadReportResponse, error)

	// WorkloadReportAPIGetClusterWorkloadReport2WithBodyWithResponse request with any body
	WorkloadReportAPIGetClusterWorkloadReport2WithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadReport2Response, error)

	WorkloadReportAPIGetClusterWorkloadReport2WithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, body WorkloadReportAPIGetClusterWorkloadReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadReport2Response, error)

	// WorkloadReportAPIGetClusterWorkloadEfficiencyReportWithResponse request
	WorkloadReportAPIGetClusterWorkloadEfficiencyReportWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse, error)

	// WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBodyWithResponse request with any body
	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response, error)

	WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, body WorkloadReportAPIGetClusterWorkloadEfficiencyReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response, error)

	// WorkloadReportAPIGetClusterWorkloadLabelsWithResponse request
	WorkloadReportAPIGetClusterWorkloadLabelsWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadLabelsParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadLabelsResponse, error)

	// WorkloadReportAPIGetNamespacesForClustersWithBodyWithResponse request with any body
	WorkloadReportAPIGetNamespacesForClustersWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetNamespacesForClustersResponse, error)

	WorkloadReportAPIGetNamespacesForClustersWithResponse(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, body WorkloadReportAPIGetNamespacesForClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetNamespacesForClustersResponse, error)

	// NodeReportAPIGetNodeLabelNamesWithBodyWithResponse request with any body
	NodeReportAPIGetNodeLabelNamesWithBodyWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelNamesResponse, error)

	NodeReportAPIGetNodeLabelNamesWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, body NodeReportAPIGetNodeLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelNamesResponse, error)

	// NodeReportAPIGetNodeLabelValuesWithBodyWithResponse request with any body
	NodeReportAPIGetNodeLabelValuesWithBodyWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelValuesResponse, error)

	NodeReportAPIGetNodeLabelValuesWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, body NodeReportAPIGetNodeLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelValuesResponse, error)

	// ClusterReportAPIGetOrganizationClustersCostReportWithResponse request
	ClusterReportAPIGetOrganizationClustersCostReportWithResponse(ctx context.Context, params *ClusterReportAPIGetOrganizationClustersCostReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetOrganizationClustersCostReportResponse, error)

	// ClusterReportAPIGetClustersSummaryWithResponse request
	ClusterReportAPIGetClustersSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClustersSummaryResponse, error)

	// ClusterReportAPIGetClustersCostReportWithResponse request
	ClusterReportAPIGetClustersCostReportWithResponse(ctx context.Context, params *ClusterReportAPIGetClustersCostReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClustersCostReportResponse, error)

	// WorkloadReportAPIGetWorkloadLabelNamesWithBodyWithResponse request with any body
	WorkloadReportAPIGetWorkloadLabelNamesWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelNamesResponse, error)

	WorkloadReportAPIGetWorkloadLabelNamesWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, body WorkloadReportAPIGetWorkloadLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelNamesResponse, error)

	// WorkloadReportAPIGetWorkloadLabelValuesWithBodyWithResponse request with any body
	WorkloadReportAPIGetWorkloadLabelValuesWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesResponse, error)

	WorkloadReportAPIGetWorkloadLabelValuesWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, body WorkloadReportAPIGetWorkloadLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesResponse, error)

	// WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBodyWithResponse request with any body
	WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBodyWithResponse(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse, error)

	WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithResponse(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, body WorkloadReportAPIGetWorkloadLabelValuesDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse, error)

	// WorkloadReportAPIGetWorkloadsMetadataWithBodyWithResponse request with any body
	WorkloadReportAPIGetWorkloadsMetadataWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadsMetadataResponse, error)

	WorkloadReportAPIGetWorkloadsMetadataWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, body WorkloadReportAPIGetWorkloadsMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadsMetadataResponse, error)

	// DedicatedInstanceAPIListDedicatedInstancesWithResponse request
	DedicatedInstanceAPIListDedicatedInstancesWithResponse(ctx context.Context, params *DedicatedInstanceAPIListDedicatedInstancesParams, reqEditors ...RequestEditorFn) (*DedicatedInstanceAPIListDedicatedInstancesResponse, error)

	// FeaturesAPIListWithResponse request
	FeaturesAPIListWithResponse(ctx context.Context, params *FeaturesAPIListParams, reqEditors ...RequestEditorFn) (*FeaturesAPIListResponse, error)

	// FeaturesAPIResolveWithBodyWithResponse request with any body
	FeaturesAPIResolveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FeaturesAPIResolveResponse, error)

	FeaturesAPIResolveWithResponse(ctx context.Context, body FeaturesAPIResolveJSONRequestBody, reqEditors ...RequestEditorFn) (*FeaturesAPIResolveResponse, error)

	// InventoryBlacklistAPIListBlacklistsWithResponse request
	InventoryBlacklistAPIListBlacklistsWithResponse(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIListBlacklistsResponse, error)

	// InventoryBlacklistAPIAddBlacklistWithBodyWithResponse request with any body
	InventoryBlacklistAPIAddBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIAddBlacklistResponse, error)

	InventoryBlacklistAPIAddBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIAddBlacklistResponse, error)

	// InventoryBlacklistAPIRemoveBlacklistWithBodyWithResponse request with any body
	InventoryBlacklistAPIRemoveBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIRemoveBlacklistResponse, error)

	InventoryBlacklistAPIRemoveBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIRemoveBlacklistResponse, error)

	// UsersAPIListInvitationsWithResponse request
	UsersAPIListInvitationsWithResponse(ctx context.Context, params *UsersAPIListInvitationsParams, reqEditors ...RequestEditorFn) (*UsersAPIListInvitationsResponse, error)

	// UsersAPICreateInvitationsWithBodyWithResponse request with any body
	UsersAPICreateInvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPICreateInvitationsResponse, error)

	UsersAPICreateInvitationsWithResponse(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPICreateInvitationsResponse, error)

	// UsersAPIDeleteInvitationWithResponse request
	UsersAPIDeleteInvitationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersAPIDeleteInvitationResponse, error)

	// UsersAPIClaimInvitationWithBodyWithResponse request with any body
	UsersAPIClaimInvitationWithBodyWithResponse(ctx context.Context, invitationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIClaimInvitationResponse, error)

	UsersAPIClaimInvitationWithResponse(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIClaimInvitationResponse, error)

	// ClusterActionsAPIPollClusterActionsWithResponse request
	ClusterActionsAPIPollClusterActionsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterActionsAPIPollClusterActionsResponse, error)

	// ClusterActionsAPIIngestLogsWithBodyWithResponse request with any body
	ClusterActionsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterActionsAPIIngestLogsResponse, error)

	ClusterActionsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterActionsAPIIngestLogsResponse, error)

	// ClusterActionsAPIAckClusterActionWithBodyWithResponse request with any body
	ClusterActionsAPIAckClusterActionWithBodyWithResponse(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterActionsAPIAckClusterActionResponse, error)

	ClusterActionsAPIAckClusterActionWithResponse(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterActionsAPIAckClusterActionResponse, error)

	// AlgorithmStatsAPISubmitWithBodyWithResponse request with any body
	AlgorithmStatsAPISubmitWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlgorithmStatsAPISubmitResponse, error)

	AlgorithmStatsAPISubmitWithResponse(ctx context.Context, clusterId string, body AlgorithmStatsAPISubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*AlgorithmStatsAPISubmitResponse, error)

	// ReportConfigurationAPIGetEgressdScriptWithResponse request
	ReportConfigurationAPIGetEgressdScriptWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetEgressdScriptResponse, error)

	// EvictorAPIGetAdvancedConfigWithResponse request
	EvictorAPIGetAdvancedConfigWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*EvictorAPIGetAdvancedConfigResponse, error)

	// EvictorAPIUpsertAdvancedConfigWithBodyWithResponse request with any body
	EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvictorAPIUpsertAdvancedConfigResponse, error)

	EvictorAPIUpsertAdvancedConfigWithResponse(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EvictorAPIUpsertAdvancedConfigResponse, error)

	// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse request with any body
	NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIFilterInstanceTypesResponse, error)

	NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIFilterInstanceTypesResponse, error)

	// NodeTemplatesAPIGenerateNodeTemplatesWithResponse request
	NodeTemplatesAPIGenerateNodeTemplatesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIGenerateNodeTemplatesResponse, error)

	// AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse request
	AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse, error)

	// AutoscalerAPIMigrateKarpenterDefinitionsWithBodyWithResponse request with any body
	AutoscalerAPIMigrateKarpenterDefinitionsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error)

	AutoscalerAPIMigrateKarpenterDefinitionsWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error)

	// NodeConfigurationAPIListConfigurationsWithResponse request
	NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIListConfigurationsResponse, error)

	// NodeConfigurationAPICreateConfigurationWithBodyWithResponse request with any body
	NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeConfigurationAPICreateConfigurationResponse, error)

	NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeConfigurationAPICreateConfigurationResponse, error)

	// NodeConfigurationAPIGetSuggestedConfigurationWithResponse request
	NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIGetSuggestedConfigurationResponse, error)

	// NodeConfigurationAPIDeleteConfigurationWithResponse request
	NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIDeleteConfigurationResponse, error)

	// NodeConfigurationAPIGetConfigurationWithResponse request
	NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIGetConfigurationResponse, error)

	// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse request with any body
	NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIUpdateConfigurationResponse, error)

	NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIUpdateConfigurationResponse, error)

	// NodeConfigurationAPISetDefaultWithResponse request
	NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPISetDefaultResponse, error)

	// PoliciesAPIGetClusterNodeConstraintsWithResponse request
	PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PoliciesAPIGetClusterNodeConstraintsResponse, error)

	// NodeTemplatesAPIListNodeTemplatesWithResponse request
	NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIListNodeTemplatesResponse, error)

	// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse request with any body
	NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeTemplatesAPICreateNodeTemplateResponse, error)

	NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeTemplatesAPICreateNodeTemplateResponse, error)

	// NodeTemplatesAPIDeleteNodeTemplateWithResponse request
	NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error)

	// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse request with any body
	NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error)

	NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error)

	// PoliciesAPIGetClusterPoliciesWithResponse request
	PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PoliciesAPIGetClusterPoliciesResponse, error)

	// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse request with any body
	PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesAPIUpsertClusterPoliciesResponse, error)

	PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesAPIUpsertClusterPoliciesResponse, error)

	// AutoscalerAPIGetProblematicNodesWithResponse request
	AutoscalerAPIGetProblematicNodesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetProblematicNodesResponse, error)

	// AutoscalerAPIGetProblematicWorkloadsWithResponse request
	AutoscalerAPIGetProblematicWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetProblematicWorkloadsResponse, error)

	// AutoscalerAPIGetRebalancedWorkloadsWithResponse request
	AutoscalerAPIGetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetRebalancedWorkloadsResponse, error)

	// ScheduledRebalancingAPIListRebalancingJobsWithResponse request
	ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIListRebalancingJobsResponse, error)

	// ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse request with any body
	ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error)

	ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error)

	// ScheduledRebalancingAPIDeleteRebalancingJobWithResponse request
	ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIDeleteRebalancingJobResponse, error)

	// ScheduledRebalancingAPIGetRebalancingJobWithResponse request
	ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIGetRebalancingJobResponse, error)

	// ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse request with any body
	ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error)

	ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error)

	// AutoscalerAPIListRebalancingPlansWithResponse request
	AutoscalerAPIListRebalancingPlansWithResponse(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*AutoscalerAPIListRebalancingPlansResponse, error)

	// AutoscalerAPIGenerateRebalancingPlanWithBodyWithResponse request with any body
	AutoscalerAPIGenerateRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AutoscalerAPIGenerateRebalancingPlanResponse, error)

	AutoscalerAPIGenerateRebalancingPlanWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*AutoscalerAPIGenerateRebalancingPlanResponse, error)

	// AutoscalerAPIGetRebalancingPlanWithResponse request
	AutoscalerAPIGetRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetRebalancingPlanResponse, error)

	// AutoscalerAPIExecuteRebalancingPlanWithResponse request
	AutoscalerAPIExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIExecuteRebalancingPlanResponse, error)

	// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse request with any body
	ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error)

	ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error)

	// AutoscalerAPIGetClusterSettingsWithResponse request
	AutoscalerAPIGetClusterSettingsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetClusterSettingsResponse, error)

	// ClusterReportAPIGetClusterUnscheduledPodsWithResponse request
	ClusterReportAPIGetClusterUnscheduledPodsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterUnscheduledPodsResponse, error)

	// AutoscalerAPIGetClusterWorkloadsWithResponse request
	AutoscalerAPIGetClusterWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetClusterWorkloadsResponse, error)

	// ExternalClusterAPIListClustersWithResponse request
	ExternalClusterAPIListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExternalClusterAPIListClustersResponse, error)

	// ExternalClusterAPIRegisterClusterWithBodyWithResponse request with any body
	ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIRegisterClusterResponse, error)

	ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIRegisterClusterResponse, error)

	// OperationsAPIGetOperationWithResponse request
	OperationsAPIGetOperationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OperationsAPIGetOperationResponse, error)

	// ExternalClusterAPIDeleteClusterWithResponse request
	ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDeleteClusterResponse, error)

	// ExternalClusterAPIGetClusterWithResponse request
	ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetClusterResponse, error)

	// ExternalClusterAPIUpdateClusterWithBodyWithResponse request with any body
	ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterResponse, error)

	ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterResponse, error)

	// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse request
	ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error)

	// ExternalClusterAPIGetAssumeRolePrincipalWithResponse request
	ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error)

	// ExternalClusterAPICreateAssumeRolePrincipalWithResponse request
	ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error)

	// ExternalClusterAPIGetAssumeRoleUserWithResponse request
	ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetAssumeRoleUserResponse, error)

	// ExternalClusterAPIGetCleanupScriptWithResponse request
	ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCleanupScriptResponse, error)

	// ExternalClusterAPIGetCredentialsScriptWithResponse request
	ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCredentialsScriptResponse, error)

	// ExternalClusterAPIDisconnectClusterWithBodyWithResponse request with any body
	ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDisconnectClusterResponse, error)

	ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDisconnectClusterResponse, error)

	// ExternalClusterAPIHandleCloudEventWithBodyWithResponse request with any body
	ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIHandleCloudEventResponse, error)

	ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIHandleCloudEventResponse, error)

	// ExternalClusterAPIListNodesWithResponse request
	ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIListNodesResponse, error)

	// ExternalClusterAPIAddNodeWithBodyWithResponse request with any body
	ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIAddNodeResponse, error)

	ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIAddNodeResponse, error)

	// ExternalClusterAPIDeleteNodeWithResponse request
	ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDeleteNodeResponse, error)

	// ExternalClusterAPIGetNodeWithResponse request
	ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetNodeResponse, error)

	// ExternalClusterAPIDrainNodeWithBodyWithResponse request with any body
	ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDrainNodeResponse, error)

	ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDrainNodeResponse, error)

	// ExternalClusterAPIReconcileClusterWithResponse request
	ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIReconcileClusterResponse, error)

	// ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse request with any body
	ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterTagsResponse, error)

	ExternalClusterAPIUpdateClusterTagsWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterTagsResponse, error)

	// ExternalClusterAPICreateClusterTokenWithResponse request
	ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPICreateClusterTokenResponse, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportWithResponse request
	OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportWithResponse(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportWithResponse request
	OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportWithResponse(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportWithResponse request
	OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportWithResponse(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportWithResponse request
	OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportWithResponse(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportWithResponse request
	OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportWithResponse(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportWithResponse request
	OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportWithResponse(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse, error)

	// OpenAILLMOptimizationAPIGetChatCompletionsUsageReportWithResponse request
	OpenAILLMOptimizationAPIGetChatCompletionsUsageReportWithResponse(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsUsageReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse, error)

	// LLMSettingsAPIGetSettingsWithResponse request
	LLMSettingsAPIGetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LLMSettingsAPIGetSettingsResponse, error)

	// LLMSettingsAPIUpsertSettingsWithBodyWithResponse request with any body
	LLMSettingsAPIUpsertSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LLMSettingsAPIUpsertSettingsResponse, error)

	LLMSettingsAPIUpsertSettingsWithResponse(ctx context.Context, body LLMSettingsAPIUpsertSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*LLMSettingsAPIUpsertSettingsResponse, error)

	// UsersAPICurrentUserProfileWithResponse request
	UsersAPICurrentUserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersAPICurrentUserProfileResponse, error)

	// UsersAPIUpdateCurrentUserProfileWithBodyWithResponse request with any body
	UsersAPIUpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIUpdateCurrentUserProfileResponse, error)

	UsersAPIUpdateCurrentUserProfileWithResponse(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIUpdateCurrentUserProfileResponse, error)

	// ReportMetricsAPIGetNodeTemplatePromMetricsWithResponse request
	ReportMetricsAPIGetNodeTemplatePromMetricsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ReportMetricsAPIGetNodeTemplatePromMetricsResponse, error)

	// ReportMetricsAPIGetWorkloadPromMetricsWithResponse request
	ReportMetricsAPIGetWorkloadPromMetricsWithResponse(ctx context.Context, clusterId string, params *ReportMetricsAPIGetWorkloadPromMetricsParams, reqEditors ...RequestEditorFn) (*ReportMetricsAPIGetWorkloadPromMetricsResponse, error)

	// ReportMetricsAPIGetPromMetricsWithResponse request
	ReportMetricsAPIGetPromMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReportMetricsAPIGetPromMetricsResponse, error)

	// NotificationAPIListNotificationsWithResponse request
	NotificationAPIListNotificationsWithResponse(ctx context.Context, params *NotificationAPIListNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationAPIListNotificationsResponse, error)

	// NotificationAPIAckNotificationsWithBodyWithResponse request with any body
	NotificationAPIAckNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationAPIAckNotificationsResponse, error)

	NotificationAPIAckNotificationsWithResponse(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationAPIAckNotificationsResponse, error)

	// NotificationAPIListWebhookCategoriesWithResponse request
	NotificationAPIListWebhookCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NotificationAPIListWebhookCategoriesResponse, error)

	// NotificationAPIListWebhookConfigsWithResponse request
	NotificationAPIListWebhookConfigsWithResponse(ctx context.Context, params *NotificationAPIListWebhookConfigsParams, reqEditors ...RequestEditorFn) (*NotificationAPIListWebhookConfigsResponse, error)

	// NotificationAPICreateWebhookConfigWithBodyWithResponse request with any body
	NotificationAPICreateWebhookConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationAPICreateWebhookConfigResponse, error)

	NotificationAPICreateWebhookConfigWithResponse(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationAPICreateWebhookConfigResponse, error)

	// NotificationAPIDeleteWebhookConfigWithResponse request
	NotificationAPIDeleteWebhookConfigWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NotificationAPIDeleteWebhookConfigResponse, error)

	// NotificationAPIGetWebhookConfigWithResponse request
	NotificationAPIGetWebhookConfigWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NotificationAPIGetWebhookConfigResponse, error)

	// NotificationAPIUpdateWebhookConfigWithBodyWithResponse request with any body
	NotificationAPIUpdateWebhookConfigWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationAPIUpdateWebhookConfigResponse, error)

	NotificationAPIUpdateWebhookConfigWithResponse(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationAPIUpdateWebhookConfigResponse, error)

	// NotificationAPIGetNotificationWithResponse request
	NotificationAPIGetNotificationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NotificationAPIGetNotificationResponse, error)

	// UsersAPIListOrganizationsWithResponse request
	UsersAPIListOrganizationsWithResponse(ctx context.Context, params *UsersAPIListOrganizationsParams, reqEditors ...RequestEditorFn) (*UsersAPIListOrganizationsResponse, error)

	// UsersAPICreateOrganizationWithBodyWithResponse request with any body
	UsersAPICreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPICreateOrganizationResponse, error)

	UsersAPICreateOrganizationWithResponse(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPICreateOrganizationResponse, error)

	// InventoryAPIGetOrganizationReservationsBalanceWithResponse request
	InventoryAPIGetOrganizationReservationsBalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InventoryAPIGetOrganizationReservationsBalanceResponse, error)

	// InventoryAPIGetOrganizationResourceUsageWithResponse request
	InventoryAPIGetOrganizationResourceUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InventoryAPIGetOrganizationResourceUsageResponse, error)

	// UsersAPIDeleteOrganizationWithResponse request
	UsersAPIDeleteOrganizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersAPIDeleteOrganizationResponse, error)

	// UsersAPIGetOrganizationWithResponse request
	UsersAPIGetOrganizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersAPIGetOrganizationResponse, error)

	// UsersAPIEditOrganizationWithBodyWithResponse request with any body
	UsersAPIEditOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIEditOrganizationResponse, error)

	UsersAPIEditOrganizationWithResponse(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIEditOrganizationResponse, error)

	// InventoryAPISyncClusterResourcesWithResponse request
	InventoryAPISyncClusterResourcesWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*InventoryAPISyncClusterResourcesResponse, error)

	// InventoryAPIGetReservationsWithResponse request
	InventoryAPIGetReservationsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*InventoryAPIGetReservationsResponse, error)

	// InventoryAPIAddReservationWithBodyWithResponse request with any body
	InventoryAPIAddReservationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryAPIAddReservationResponse, error)

	InventoryAPIAddReservationWithResponse(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryAPIAddReservationResponse, error)

	// InventoryAPIGetReservationsBalanceWithResponse request
	InventoryAPIGetReservationsBalanceWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*InventoryAPIGetReservationsBalanceResponse, error)

	// InventoryAPIOverwriteReservationsWithBodyWithResponse request with any body
	InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryAPIOverwriteReservationsResponse, error)

	InventoryAPIOverwriteReservationsWithResponse(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryAPIOverwriteReservationsResponse, error)

	// InventoryAPIDeleteReservationWithResponse request
	InventoryAPIDeleteReservationWithResponse(ctx context.Context, organizationId string, reservationId string, reqEditors ...RequestEditorFn) (*InventoryAPIDeleteReservationResponse, error)

	// UsersAPIListOrganizationUsersWithResponse request
	UsersAPIListOrganizationUsersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*UsersAPIListOrganizationUsersResponse, error)

	// UsersAPIAddUserToOrganizationWithBodyWithResponse request with any body
	UsersAPIAddUserToOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIAddUserToOrganizationResponse, error)

	UsersAPIAddUserToOrganizationWithResponse(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIAddUserToOrganizationResponse, error)

	// UsersAPIRemoveUserFromOrganizationWithResponse request
	UsersAPIRemoveUserFromOrganizationWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*UsersAPIRemoveUserFromOrganizationResponse, error)

	// UsersAPIUpdateOrganizationUserWithBodyWithResponse request with any body
	UsersAPIUpdateOrganizationUserWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIUpdateOrganizationUserResponse, error)

	UsersAPIUpdateOrganizationUserWithResponse(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIUpdateOrganizationUserResponse, error)

	// PartnersAPIListOrganizationsWithResponse request
	PartnersAPIListOrganizationsWithResponse(ctx context.Context, partnerOrganizationId string, reqEditors ...RequestEditorFn) (*PartnersAPIListOrganizationsResponse, error)

	// PartnersAPICreateOrganizationWithBodyWithResponse request with any body
	PartnersAPICreateOrganizationWithBodyWithResponse(ctx context.Context, partnerOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartnersAPICreateOrganizationResponse, error)

	PartnersAPICreateOrganizationWithResponse(ctx context.Context, partnerOrganizationId string, body PartnersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PartnersAPICreateOrganizationResponse, error)

	// PartnersAPICreateTokenWithBodyWithResponse request with any body
	PartnersAPICreateTokenWithBodyWithResponse(ctx context.Context, partnerOrganizationId string, childOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartnersAPICreateTokenResponse, error)

	PartnersAPICreateTokenWithResponse(ctx context.Context, partnerOrganizationId string, childOrganizationId string, body PartnersAPICreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PartnersAPICreateTokenResponse, error)

	// PartnersAPIDeleteTokenWithResponse request
	PartnersAPIDeleteTokenWithResponse(ctx context.Context, partnerOrganizationId string, childOrganizationId string, id string, reqEditors ...RequestEditorFn) (*PartnersAPIDeleteTokenResponse, error)

	// PricingAPIGetPricingForClusterNodesWithResponse request
	PricingAPIGetPricingForClusterNodesWithResponse(ctx context.Context, clusterId string, params *PricingAPIGetPricingForClusterNodesParams, reqEditors ...RequestEditorFn) (*PricingAPIGetPricingForClusterNodesResponse, error)

	// PricingAPIGetPricingForClusterNodeWithResponse request
	PricingAPIGetPricingForClusterNodeWithResponse(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*PricingAPIGetPricingForClusterNodeResponse, error)

	// PricingAPIGetPricingForOrganizationNodesWithResponse request
	PricingAPIGetPricingForOrganizationNodesWithResponse(ctx context.Context, params *PricingAPIGetPricingForOrganizationNodesParams, reqEditors ...RequestEditorFn) (*PricingAPIGetPricingForOrganizationNodesResponse, error)

	// PricingAPISyncGCPBillingAPIDataWithResponse request
	PricingAPISyncGCPBillingAPIDataWithResponse(ctx context.Context, params *PricingAPISyncGCPBillingAPIDataParams, reqEditors ...RequestEditorFn) (*PricingAPISyncGCPBillingAPIDataResponse, error)

	// ScheduledRebalancingAPIListRebalancingSchedulesWithResponse request
	ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIListRebalancingSchedulesResponse, error)

	// ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse request with any body
	ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error)

	ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error)

	// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse request with any body
	ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error)

	ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error)

	// ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse request
	ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error)

	// ScheduledRebalancingAPIGetRebalancingScheduleWithResponse request
	ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIGetRebalancingScheduleResponse, error)

	// UsageAPIGetUsageReportWithResponse request
	UsageAPIGetUsageReportWithResponse(ctx context.Context, params *UsageAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*UsageAPIGetUsageReportResponse, error)

	// UsageAPIGetUsageSummaryWithResponse request
	UsageAPIGetUsageSummaryWithResponse(ctx context.Context, params *UsageAPIGetUsageSummaryParams, reqEditors ...RequestEditorFn) (*UsageAPIGetUsageSummaryResponse, error)

	// CommitmentsAPIGetCommitmentsAssignmentsWithResponse request
	CommitmentsAPIGetCommitmentsAssignmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetCommitmentsAssignmentsResponse, error)

	// CommitmentsAPICreateCommitmentAssignmentWithResponse request
	CommitmentsAPICreateCommitmentAssignmentWithResponse(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams, reqEditors ...RequestEditorFn) (*CommitmentsAPICreateCommitmentAssignmentResponse, error)

	// CommitmentsAPIDeleteCommitmentAssignmentWithResponse request
	CommitmentsAPIDeleteCommitmentAssignmentWithResponse(ctx context.Context, assignmentId string, reqEditors ...RequestEditorFn) (*CommitmentsAPIDeleteCommitmentAssignmentResponse, error)

	// CommitmentsAPIGetCommitmentsWithResponse request
	CommitmentsAPIGetCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetCommitmentsResponse, error)

	// CommitmentsAPIImportAzureReservationsWithBodyWithResponse request with any body
	CommitmentsAPIImportAzureReservationsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportAzureReservationsResponse, error)

	CommitmentsAPIImportAzureReservationsWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportAzureReservationsResponse, error)

	// CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse request with any body
	CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportGCPCommitmentsResponse, error)

	CommitmentsAPIImportGCPCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportGCPCommitmentsResponse, error)

	// CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse request
	CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetGCPCommitmentsImportScriptResponse, error)

	// CommitmentsAPIDeleteCommitmentWithResponse request
	CommitmentsAPIDeleteCommitmentWithResponse(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*CommitmentsAPIDeleteCommitmentResponse, error)

	// CommitmentsAPIUpdateCommitmentWithBodyWithResponse request with any body
	CommitmentsAPIUpdateCommitmentWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIUpdateCommitmentResponse, error)

	CommitmentsAPIUpdateCommitmentWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIUpdateCommitmentResponse, error)

	// CommitmentsAPIGetCommitmentAssignmentsWithResponse request
	CommitmentsAPIGetCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetCommitmentAssignmentsResponse, error)

	// CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse request with any body
	CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error)

	CommitmentsAPIReplaceCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error)

	// CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse request
	CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse, error)

	// ReportConfigurationAPIGetEgressdScriptTemplateWithResponse request
	ReportConfigurationAPIGetEgressdScriptTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetEgressdScriptTemplateResponse, error)

	// RuntimeSecurityAPIGetKvisordScriptTemplateWithResponse request
	RuntimeSecurityAPIGetKvisordScriptTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetKvisordScriptTemplateResponse, error)

	// WorkloadOptimizationAPIGetInstallCmdWithResponse request
	WorkloadOptimizationAPIGetInstallCmdWithResponse(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallCmdResponse, error)

	// WorkloadOptimizationAPIGetInstallScriptWithResponse request
	WorkloadOptimizationAPIGetInstallScriptWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallScriptResponse, error)

	// ExternalClusterAPIGetCleanupScriptTemplateWithResponse request
	ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error)

	// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse request
	ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error)

	// InsightsAPIGetAgentsStatusWithBodyWithResponse request with any body
	InsightsAPIGetAgentsStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentsStatusResponse, error)

	InsightsAPIGetAgentsStatusWithResponse(ctx context.Context, body InsightsAPIGetAgentsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentsStatusResponse, error)

	// InsightsAPIGetAttackPathsWithResponse request
	InsightsAPIGetAttackPathsWithResponse(ctx context.Context, params *InsightsAPIGetAttackPathsParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetAttackPathsResponse, error)

	// InsightsAPIGetAttackPathDetailsWithResponse request
	InsightsAPIGetAttackPathDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InsightsAPIGetAttackPathDetailsResponse, error)

	// InsightsAPIGetBestPracticesReportWithResponse request
	InsightsAPIGetBestPracticesReportWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesReportResponse, error)

	// InsightsAPIGetChecksResourcesWithBodyWithResponse request with any body
	InsightsAPIGetChecksResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetChecksResourcesResponse, error)

	InsightsAPIGetChecksResourcesWithResponse(ctx context.Context, body InsightsAPIGetChecksResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetChecksResourcesResponse, error)

	// InsightsAPIGetBestPracticesCheckDetailsWithResponse request
	InsightsAPIGetBestPracticesCheckDetailsWithResponse(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesCheckDetailsResponse, error)

	// InsightsAPIEnforceCheckPolicyWithBodyWithResponse request with any body
	InsightsAPIEnforceCheckPolicyWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIEnforceCheckPolicyResponse, error)

	InsightsAPIEnforceCheckPolicyWithResponse(ctx context.Context, ruleId string, body InsightsAPIEnforceCheckPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIEnforceCheckPolicyResponse, error)

	// InsightsAPIGetCheckExceptionsWithResponse request
	InsightsAPIGetCheckExceptionsWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetCheckExceptionsResponse, error)

	// InsightsAPISaveCheckExceptionsWithBodyWithResponse request with any body
	InsightsAPISaveCheckExceptionsWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPISaveCheckExceptionsResponse, error)

	InsightsAPISaveCheckExceptionsWithResponse(ctx context.Context, ruleId string, body InsightsAPISaveCheckExceptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPISaveCheckExceptionsResponse, error)

	// InsightsAPIPreviewExceptionGroupsResourcesWithBodyWithResponse request with any body
	InsightsAPIPreviewExceptionGroupsResourcesWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIPreviewExceptionGroupsResourcesResponse, error)

	InsightsAPIPreviewExceptionGroupsResourcesWithResponse(ctx context.Context, ruleId string, body InsightsAPIPreviewExceptionGroupsResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIPreviewExceptionGroupsResourcesResponse, error)

	// InsightsAPIGetCheckResourcesWithBodyWithResponse request with any body
	InsightsAPIGetCheckResourcesWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetCheckResourcesResponse, error)

	InsightsAPIGetCheckResourcesWithResponse(ctx context.Context, ruleId string, body InsightsAPIGetCheckResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetCheckResourcesResponse, error)

	// InsightsAPIDeletePolicyEnforcementWithResponse request
	InsightsAPIDeletePolicyEnforcementWithResponse(ctx context.Context, enforcementId string, reqEditors ...RequestEditorFn) (*InsightsAPIDeletePolicyEnforcementResponse, error)

	// InsightsAPIGetBestPracticesReportFiltersWithResponse request
	InsightsAPIGetBestPracticesReportFiltersWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesReportFiltersResponse, error)

	// InsightsAPIScheduleBestPracticesScanWithBodyWithResponse request with any body
	InsightsAPIScheduleBestPracticesScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIScheduleBestPracticesScanResponse, error)

	InsightsAPIScheduleBestPracticesScanWithResponse(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIScheduleBestPracticesScanResponse, error)

	// InsightsAPIGetBestPracticesReportSummaryWithResponse request
	InsightsAPIGetBestPracticesReportSummaryWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesReportSummaryResponse, error)

	// InsightsAPIGetDailySummaryWithResponse request
	InsightsAPIGetDailySummaryWithResponse(ctx context.Context, date string, reqEditors ...RequestEditorFn) (*InsightsAPIGetDailySummaryResponse, error)

	// InsightsAPIGetExceptedChecksWithResponse request
	InsightsAPIGetExceptedChecksWithResponse(ctx context.Context, params *InsightsAPIGetExceptedChecksParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetExceptedChecksResponse, error)

	// InsightsAPIGetContainerImagesWithResponse request
	InsightsAPIGetContainerImagesWithResponse(ctx context.Context, params *InsightsAPIGetContainerImagesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagesResponse, error)

	// InsightsAPIDeleteImagesWithBodyWithResponse request with any body
	InsightsAPIDeleteImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIDeleteImagesResponse, error)

	InsightsAPIDeleteImagesWithResponse(ctx context.Context, body InsightsAPIDeleteImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIDeleteImagesResponse, error)

	// InsightsAPIImageExceptionChangesWithBodyWithResponse request with any body
	InsightsAPIImageExceptionChangesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIImageExceptionChangesResponse, error)

	InsightsAPIImageExceptionChangesWithResponse(ctx context.Context, body InsightsAPIImageExceptionChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIImageExceptionChangesResponse, error)

	// InsightsAPIGetContainerImagesFiltersWithResponse request
	InsightsAPIGetContainerImagesFiltersWithResponse(ctx context.Context, params *InsightsAPIGetContainerImagesFiltersParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagesFiltersResponse, error)

	// InsightsAPIGetContainerImagesSummaryWithResponse request
	InsightsAPIGetContainerImagesSummaryWithResponse(ctx context.Context, params *InsightsAPIGetContainerImagesSummaryParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagesSummaryResponse, error)

	// InsightsAPIGetPublicImageAlternativesWithResponse request
	InsightsAPIGetPublicImageAlternativesWithResponse(ctx context.Context, tagId string, params *InsightsAPIGetPublicImageAlternativesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetPublicImageAlternativesResponse, error)

	// InsightsAPIGetContainerImageDetailsWithResponse request
	InsightsAPIGetContainerImageDetailsWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageDetailsResponse, error)

	// InsightsAPIGetContainerImageDigestsWithResponse request
	InsightsAPIGetContainerImageDigestsWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageDigestsResponse, error)

	// InsightsAPIGetContainerImagePackagesWithResponse request
	InsightsAPIGetContainerImagePackagesWithResponse(ctx context.Context, tagId string, params *InsightsAPIGetContainerImagePackagesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagePackagesResponse, error)

	// InsightsAPIGetContainerImageResourcesWithResponse request
	InsightsAPIGetContainerImageResourcesWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageResourcesResponse, error)

	// InsightsAPIGetContainerImageVulnerabilitiesWithResponse request
	InsightsAPIGetContainerImageVulnerabilitiesWithResponse(ctx context.Context, tagId string, params *InsightsAPIGetContainerImageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageVulnerabilitiesResponse, error)

	// InsightsAPIGetContainerImagePackageVulnerabilityDetailsWithResponse request
	InsightsAPIGetContainerImagePackageVulnerabilityDetailsWithResponse(ctx context.Context, tagId string, pkgVulnId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse, error)

	// InsightsAPIGetAttackPathsOverviewWithResponse request
	InsightsAPIGetAttackPathsOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIGetAttackPathsOverviewResponse, error)

	// InsightsAPIGetBestPracticesOverviewWithResponse request
	InsightsAPIGetBestPracticesOverviewWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesOverviewResponse, error)

	// InsightsAPIGetImageSecurityOverviewWithResponse request
	InsightsAPIGetImageSecurityOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIGetImageSecurityOverviewResponse, error)

	// InsightsAPIGetNodesOverviewWithResponse request
	InsightsAPIGetNodesOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIGetNodesOverviewResponse, error)

	// InsightsAPIGetResourceDetailsWithResponse request
	InsightsAPIGetResourceDetailsWithResponse(ctx context.Context, id string, params *InsightsAPIGetResourceDetailsParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetResourceDetailsResponse, error)

	// InsightsAPIGetAgentStatusWithResponse request
	InsightsAPIGetAgentStatusWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentStatusResponse, error)

	// InsightsAPIIngestAgentLogWithBodyWithResponse request with any body
	InsightsAPIIngestAgentLogWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIIngestAgentLogResponse, error)

	InsightsAPIIngestAgentLogWithResponse(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIIngestAgentLogResponse, error)

	// InsightsAPIGetAgentSyncStateWithBodyWithResponse request with any body
	InsightsAPIGetAgentSyncStateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentSyncStateResponse, error)

	InsightsAPIGetAgentSyncStateWithResponse(ctx context.Context, clusterId string, body InsightsAPIGetAgentSyncStateJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentSyncStateResponse, error)

	// InsightsAPIPostAgentTelemetryWithBodyWithResponse request with any body
	InsightsAPIPostAgentTelemetryWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIPostAgentTelemetryResponse, error)

	InsightsAPIPostAgentTelemetryWithResponse(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIPostAgentTelemetryResponse, error)

	// InsightsAPIListIntegrationsWithResponse request
	InsightsAPIListIntegrationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIListIntegrationsResponse, error)

	// InsightsAPICreateIntegrationWithBodyWithResponse request with any body
	InsightsAPICreateIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPICreateIntegrationResponse, error)

	InsightsAPICreateIntegrationWithResponse(ctx context.Context, body InsightsAPICreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPICreateIntegrationResponse, error)

	// InsightsAPIDeleteIntegrationWithResponse request
	InsightsAPIDeleteIntegrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InsightsAPIDeleteIntegrationResponse, error)

	// InsightsAPIGetIntegrationWithResponse request
	InsightsAPIGetIntegrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InsightsAPIGetIntegrationResponse, error)

	// InsightsAPIUpdateIntegrationWithBodyWithResponse request with any body
	InsightsAPIUpdateIntegrationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIUpdateIntegrationResponse, error)

	InsightsAPIUpdateIntegrationWithResponse(ctx context.Context, id string, body InsightsAPIUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIUpdateIntegrationResponse, error)

	// InsightsAPICreateTicketWithBodyWithResponse request with any body
	InsightsAPICreateTicketWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPICreateTicketResponse, error)

	InsightsAPICreateTicketWithResponse(ctx context.Context, id string, body InsightsAPICreateTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPICreateTicketResponse, error)

	// RuntimeSecurityAPIGetAnomaliesWithResponse request
	RuntimeSecurityAPIGetAnomaliesWithResponse(ctx context.Context, params *RuntimeSecurityAPIGetAnomaliesParams, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetAnomaliesResponse, error)

	// RuntimeSecurityAPIAckAnomaliesWithResponse request
	RuntimeSecurityAPIAckAnomaliesWithResponse(ctx context.Context, params *RuntimeSecurityAPIAckAnomaliesParams, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIAckAnomaliesResponse, error)

	// RuntimeSecurityAPICloseAnomaliesWithResponse request
	RuntimeSecurityAPICloseAnomaliesWithResponse(ctx context.Context, params *RuntimeSecurityAPICloseAnomaliesParams, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPICloseAnomaliesResponse, error)

	// RuntimeSecurityAPIGetAnomalyWithResponse request
	RuntimeSecurityAPIGetAnomalyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetAnomalyResponse, error)

	// RuntimeSecurityAPIGetAnomaliesOverviewWithResponse request
	RuntimeSecurityAPIGetAnomaliesOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetAnomaliesOverviewResponse, error)

	// RuntimeSecurityAPIGetKvisordScriptWithResponse request
	RuntimeSecurityAPIGetKvisordScriptWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetKvisordScriptResponse, error)

	// InsightsAPIConfigureClusterSecuritySettingsWithBodyWithResponse request with any body
	InsightsAPIConfigureClusterSecuritySettingsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIConfigureClusterSecuritySettingsResponse, error)

	InsightsAPIConfigureClusterSecuritySettingsWithResponse(ctx context.Context, id string, body InsightsAPIConfigureClusterSecuritySettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIConfigureClusterSecuritySettingsResponse, error)

	// SSOAPIListSSOConnectionsWithResponse request
	SSOAPIListSSOConnectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SSOAPIListSSOConnectionsResponse, error)

	// SSOAPICreateSSOConnectionWithBodyWithResponse request with any body
	SSOAPICreateSSOConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SSOAPICreateSSOConnectionResponse, error)

	SSOAPICreateSSOConnectionWithResponse(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SSOAPICreateSSOConnectionResponse, error)

	// SSOAPIDeleteSSOConnectionWithResponse request
	SSOAPIDeleteSSOConnectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SSOAPIDeleteSSOConnectionResponse, error)

	// SSOAPIGetSSOConnectionWithResponse request
	SSOAPIGetSSOConnectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SSOAPIGetSSOConnectionResponse, error)

	// SSOAPIUpdateSSOConnectionWithBodyWithResponse request with any body
	SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SSOAPIUpdateSSOConnectionResponse, error)

	SSOAPIUpdateSSOConnectionWithResponse(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SSOAPIUpdateSSOConnectionResponse, error)

	// ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse request
	ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error)

	// WorkloadOptimizationAPIGetAgentStatus2WithResponse request
	WorkloadOptimizationAPIGetAgentStatus2WithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetAgentStatus2Response, error)

	// WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse request
	WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse, error)

	// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse request with any body
	WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error)

	WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error)

	// WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse request
	WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse, error)

	// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse request with any body
	WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error)

	WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error)

	// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse request with any body
	WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error)

	WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error)

	// WorkloadOptimizationAPIListWorkloadEvents2WithResponse request
	WorkloadOptimizationAPIListWorkloadEvents2WithResponse(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEvents2Params, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadEvents2Response, error)

	// WorkloadOptimizationAPIListWorkloads2WithResponse request
	WorkloadOptimizationAPIListWorkloads2WithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloads2Response, error)

	// WorkloadOptimizationAPIGetWorkload2WithResponse request
	WorkloadOptimizationAPIGetWorkload2WithResponse(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkload2Params, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetWorkload2Response, error)

	// WorkloadOptimizationAPIUpdateWorkload2WithBodyWithResponse request with any body
	WorkloadOptimizationAPIUpdateWorkload2WithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkload2Response, error)

	WorkloadOptimizationAPIUpdateWorkload2WithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkload2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkload2Response, error)

	// WorkloadOptimizationAPIGetInstallCmd2WithResponse request
	WorkloadOptimizationAPIGetInstallCmd2WithResponse(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmd2Params, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallCmd2Response, error)

	// WorkloadOptimizationAPIGetInstallScript2WithResponse request
	WorkloadOptimizationAPIGetInstallScript2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallScript2Response, error)
}

type AutoscalerAPIGetAgentScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetAgentScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetAgentScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuditAPIListAuditEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuditV1beta1ListAuditEntriesResponse
}

// Status returns HTTPResponse.Status
func (r AuditAPIListAuditEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuditAPIListAuditEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SamlAcsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SamlAcsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SamlAcsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSession
}

// Status returns HTTPResponse.Status
func (r GetSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenAPIListAuthTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1ListAuthTokensResponse
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIListAuthTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIListAuthTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenAPICreateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPICreateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPICreateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenAPIDeleteAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1DeleteAuthTokenResponse
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIDeleteAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIDeleteAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenAPIGetAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIGetAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIGetAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenAPIUpdateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIUpdateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIUpdateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingSsoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PortalSession
}

// Status returns HTTPResponse.Status
func (r BillingSsoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingSsoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
}

// Status returns HTTPResponse.Status
func (r SubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscriptionCheckoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostedPage
}

// Status returns HTTPResponse.Status
func (r SubscriptionCheckoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscriptionCheckoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingAPIGetUsageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingV1GetUsageReportResponse
}

// Status returns HTTPResponse.Status
func (r BillingAPIGetUsageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingAPIGetUsageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetAgentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetAgentStatusResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetAgentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetAgentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComponentsAPIIngestLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComponentsV1IngestLogsResponse
}

// Status returns HTTPResponse.Status
func (r ComponentsAPIIngestLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComponentsAPIIngestLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIListWorkloadEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadEventsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloadEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloadEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIListWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetWorkloadResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIUpdateWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1UpdateWorkloadResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIUpdateWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIUpdateWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetAllocationGroupCostTimedSummariesResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetAllocationGroupCostSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetAllocationGroupCostSummariesResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetAllocationGroupCostSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetAllocationGroupCostSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIListAllocationGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1ListAllocationGroupsResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIListAllocationGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIListAllocationGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPICreateAllocationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1AllocationGroup
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPICreateAllocationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPICreateAllocationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetAllocationGroupTotalCostTimedResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetAllocationGroupEfficiencySummaryResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetCostAllocationGroupSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetCostAllocationGroupSummaryResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetCostAllocationGroupSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetCostAllocationGroupSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetCostAllocationGroupWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIDeleteAllocationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1DeleteAllocationGroupResponse
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIDeleteAllocationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIDeleteAllocationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocationGroupAPIUpdateAllocationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1AllocationGroup
}

// Status returns HTTPResponse.Status
func (r AllocationGroupAPIUpdateAllocationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocationGroupAPIUpdateAllocationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClusterCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterCostReportResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClusterCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClusterCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadDataTransferCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadDataTransferCostResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadDataTransferCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadDataTransferCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadDataTransferCost2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadDataTransferCostResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadDataTransferCost2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadDataTransferCost2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClusterEfficiencyReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterEfficiencyReportResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClusterEfficiencyReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClusterEfficiencyReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetSavingsRecommendationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetSavingsRecommendationResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetSavingsRecommendationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetSavingsRecommendationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClusterCostHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterCostHistoryResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClusterCostHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClusterCostHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportConfigurationAPIGetGroupingConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetGroupingConfigResponse
}

// Status returns HTTPResponse.Status
func (r ReportConfigurationAPIGetGroupingConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportConfigurationAPIGetGroupingConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportConfigurationAPIUpsertGroupingConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1UpsertGroupingConfigResponse
}

// Status returns HTTPResponse.Status
func (r ReportConfigurationAPIUpsertGroupingConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportConfigurationAPIUpsertGroupingConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterNamespaceCostReportSummariesResponse
}

// Status returns HTTPResponse.Status
func (r NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterNamespaceDataTransferCostResponse
}

// Status returns HTTPResponse.Status
func (r NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponse
}

// Status returns HTTPResponse.Status
func (r NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamespaceReportAPIGetClusterNamespaceCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterNamespaceCostReportResponse
}

// Status returns HTTPResponse.Status
func (r NamespaceReportAPIGetClusterNamespaceCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamespaceReportAPIGetClusterNamespaceCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamespaceReportAPIGetSingleNamespaceCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetSingleNamespaceCostReportResponse
}

// Status returns HTTPResponse.Status
func (r NamespaceReportAPIGetSingleNamespaceCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamespaceReportAPIGetSingleNamespaceCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetSingleWorkloadCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetSingleWorkloadCostReportResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetSingleWorkloadCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetSingleWorkloadCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetSingleWorkloadDataTransferCostResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadEfficiencyReportByNameResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadTrafficDestinationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadTrafficDestinationsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadTrafficDestinationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadTrafficDestinationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportConfigurationAPIGetReportingCapabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetReportingCapabilitiesResponse
}

// Status returns HTTPResponse.Status
func (r ReportConfigurationAPIGetReportingCapabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportConfigurationAPIGetReportingCapabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClusterResourceUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterResourceUsageResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClusterResourceUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClusterResourceUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetRightsizingSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetRightsizingSummaryResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetRightsizingSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetRightsizingSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClusterSavingsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterSavingsReportResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClusterSavingsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClusterSavingsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClusterSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterSummaryResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClusterSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClusterSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadCostSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadCostSummariesResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadCostSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadCostSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetClusterWorkloadReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadReportResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetClusterWorkloadReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetClusterWorkloadReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetClusterWorkloadReport2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadReportResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetClusterWorkloadReport2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetClusterWorkloadReport2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadEfficiencyReportResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadEfficiencyReportResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetClusterWorkloadLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadLabelsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetClusterWorkloadLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetClusterWorkloadLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetNamespacesForClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetNamespacesForClustersResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetNamespacesForClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetNamespacesForClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeReportAPIGetNodeLabelNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetNodeLabelNamesResponse
}

// Status returns HTTPResponse.Status
func (r NodeReportAPIGetNodeLabelNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeReportAPIGetNodeLabelNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeReportAPIGetNodeLabelValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetNodeLabelValuesResponse
}

// Status returns HTTPResponse.Status
func (r NodeReportAPIGetNodeLabelValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeReportAPIGetNodeLabelValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetOrganizationClustersCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetOrganizationClustersCostReportResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetOrganizationClustersCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetOrganizationClustersCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClustersSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClustersSummaryResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClustersSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClustersSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClustersCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClustersCostReportResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClustersCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClustersCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadLabelNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadLabelNamesResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadLabelNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadLabelNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadLabelValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadLabelValuesResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadLabelValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadLabelValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadLabelValuesDeprecatedResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadReportAPIGetWorkloadsMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetWorkloadsMetadataResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadReportAPIGetWorkloadsMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadReportAPIGetWorkloadsMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DedicatedInstanceAPIListDedicatedInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DedicatedinstanceV1beta1ListDedicatedInstancesResponse
}

// Status returns HTTPResponse.Status
func (r DedicatedInstanceAPIListDedicatedInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DedicatedInstanceAPIListDedicatedInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FeaturesAPIListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiFeaturesV1ListResponse
}

// Status returns HTTPResponse.Status
func (r FeaturesAPIListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FeaturesAPIListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FeaturesAPIResolveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiFeaturesV1ResolveResponse
}

// Status returns HTTPResponse.Status
func (r FeaturesAPIResolveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FeaturesAPIResolveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryBlacklistAPIListBlacklistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryblacklistV1ListBlacklistsResponse
}

// Status returns HTTPResponse.Status
func (r InventoryBlacklistAPIListBlacklistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryBlacklistAPIListBlacklistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryBlacklistAPIAddBlacklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryblacklistV1AddBlacklistResponse
}

// Status returns HTTPResponse.Status
func (r InventoryBlacklistAPIAddBlacklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryBlacklistAPIAddBlacklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryBlacklistAPIRemoveBlacklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryblacklistV1RemoveBlacklistResponse
}

// Status returns HTTPResponse.Status
func (r InventoryBlacklistAPIRemoveBlacklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryBlacklistAPIRemoveBlacklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIListInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ListInvitationsResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIListInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIListInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPICreateInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1CreateInvitationsResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPICreateInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPICreateInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIDeleteInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1DeleteInvitationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIDeleteInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIDeleteInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIClaimInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ClaimInvitationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIClaimInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIClaimInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterActionsAPIPollClusterActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1PollClusterActionsResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIPollClusterActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIPollClusterActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterActionsAPIIngestLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1IngestLogsResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIIngestLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIIngestLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterActionsAPIAckClusterActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1AckClusterActionResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIAckClusterActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIAckClusterActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlgorithmStatsAPISubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAlgorithmstatsV1beta1SubmitResponse
}

// Status returns HTTPResponse.Status
func (r AlgorithmStatsAPISubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlgorithmStatsAPISubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportConfigurationAPIGetEgressdScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetEgressdScriptResponse
}

// Status returns HTTPResponse.Status
func (r ReportConfigurationAPIGetEgressdScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportConfigurationAPIGetEgressdScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvictorAPIGetAdvancedConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiEvictorV1AdvancedConfig
}

// Status returns HTTPResponse.Status
func (r EvictorAPIGetAdvancedConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvictorAPIGetAdvancedConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvictorAPIUpsertAdvancedConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiEvictorV1AdvancedConfig
}

// Status returns HTTPResponse.Status
func (r EvictorAPIUpsertAdvancedConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvictorAPIUpsertAdvancedConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeTemplatesAPIFilterInstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1FilterInstanceTypesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIFilterInstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIFilterInstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeTemplatesAPIGenerateNodeTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1GenerateNodeTemplatesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIGenerateNodeTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIGenerateNodeTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetKarpenterMigrationIntentResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIMigrateKarpenterDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1MigrateKarpenterDefinitionsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIMigrateKarpenterDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIMigrateKarpenterDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeConfigurationAPIListConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1ListConfigurationsResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIListConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIListConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeConfigurationAPICreateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPICreateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPICreateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeConfigurationAPIGetSuggestedConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1GetSuggestedConfigurationResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIGetSuggestedConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIGetSuggestedConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeConfigurationAPIDeleteConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1DeleteConfigurationResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIDeleteConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIDeleteConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeConfigurationAPIGetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIGetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIGetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeConfigurationAPIUpdateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIUpdateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIUpdateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeConfigurationAPISetDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPISetDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPISetDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesAPIGetClusterNodeConstraintsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1GetClusterNodeConstraintsResponse
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIGetClusterNodeConstraintsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIGetClusterNodeConstraintsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeTemplatesAPIListNodeTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1ListNodeTemplatesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIListNodeTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIListNodeTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeTemplatesAPICreateNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1NodeTemplate
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPICreateNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPICreateNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeTemplatesAPIDeleteNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1DeleteNodeTemplateResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeTemplatesAPIUpdateNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1NodeTemplate
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesAPIGetClusterPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1Policies
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIGetClusterPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIGetClusterPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesAPIUpsertClusterPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1Policies
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIUpsertClusterPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIUpsertClusterPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGetProblematicNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetProblematicNodesResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetProblematicNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetProblematicNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGetProblematicWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetProblematicWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetProblematicWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetProblematicWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGetRebalancedWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetRebalancedWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetRebalancedWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIListRebalancingJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1ListRebalancingJobsResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIListRebalancingJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIListRebalancingJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPICreateRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingJob
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPICreateRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPICreateRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIDeleteRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1DeleteRebalancingJobResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIDeleteRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIDeleteRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIGetRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingJob
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIGetRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIGetRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIUpdateRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingJob
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIUpdateRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIUpdateRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIListRebalancingPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1ListRebalancingPlansResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIListRebalancingPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIListRebalancingPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGenerateRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CastaiAutoscalerV1beta1GenerateRebalancingPlanResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGenerateRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGenerateRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGetRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1RebalancingPlanResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIExecuteRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CastaiAutoscalerV1beta1RebalancingPlanResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIExecuteRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIExecuteRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIPreviewRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1PreviewRebalancingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIPreviewRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIPreviewRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGetClusterSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetClusterSettingsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetClusterSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetClusterSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterReportAPIGetClusterUnscheduledPodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterUnscheduledPodsResponse
}

// Status returns HTTPResponse.Status
func (r ClusterReportAPIGetClusterUnscheduledPodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterReportAPIGetClusterUnscheduledPodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoscalerAPIGetClusterWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetClusterWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetClusterWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetClusterWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIRegisterClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIRegisterClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIRegisterClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsAPIGetOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiOperationsV1beta1Operation
}

// Status returns HTTPResponse.Status
func (r OperationsAPIGetOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsAPIGetOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIDeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIUpdateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIDeleteAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPICreateAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetAssumeRoleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetAssumeRoleUserResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetAssumeRoleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetAssumeRoleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetCleanupScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCleanupScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCleanupScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCleanupScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetCredentialsScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCredentialsScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIDisconnectClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDisconnectClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDisconnectClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIHandleCloudEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1HandleCloudEventResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIHandleCloudEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIHandleCloudEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIListNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListNodesResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIAddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1AddNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIAddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIAddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIDeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Node
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIDrainNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DrainNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDrainNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDrainNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIReconcileClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ReconcileClusterResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIReconcileClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIReconcileClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIUpdateClusterTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1UpdateClusterTagsResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPICreateClusterTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateClusterTokenResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateClusterTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateClusterTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetChatCompletionsAPIKeysSavingsReportResponse
}

// Status returns HTTPResponse.Status
func (r OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetChatCompletionsRecommendationsReportResponse
}

// Status returns HTTPResponse.Status
func (r OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetChatCompletionsAPIKeyUsageReportResponse
}

// Status returns HTTPResponse.Status
func (r OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetChatCompletionsCategoryRecommendationsReportResponse
}

// Status returns HTTPResponse.Status
func (r OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetChatCompletionsCategoryUsageReportResponse
}

// Status returns HTTPResponse.Status
func (r OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetChatCompletionsRecommendationsReportResponse
}

// Status returns HTTPResponse.Status
func (r OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetChatCompletionsUsageReportResponse
}

// Status returns HTTPResponse.Status
func (r OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LLMSettingsAPIGetSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1GetSettingsResponse
}

// Status returns HTTPResponse.Status
func (r LLMSettingsAPIGetSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LLMSettingsAPIGetSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LLMSettingsAPIUpsertSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LlmoptimizationV1UpsertSettingsResponse
}

// Status returns HTTPResponse.Status
func (r LLMSettingsAPIUpsertSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LLMSettingsAPIUpsertSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPICurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1CurrentUserProfileResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPICurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPICurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIUpdateCurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1User
}

// Status returns HTTPResponse.Status
func (r UsersAPIUpdateCurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIUpdateCurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportMetricsAPIGetNodeTemplatePromMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportMetricsAPIGetNodeTemplatePromMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportMetricsAPIGetNodeTemplatePromMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportMetricsAPIGetWorkloadPromMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportMetricsAPIGetWorkloadPromMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportMetricsAPIGetWorkloadPromMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportMetricsAPIGetPromMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportMetricsAPIGetPromMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportMetricsAPIGetPromMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIListNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1ListNotificationsResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIListNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIListNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIAckNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1AckNotificationsResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIAckNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIAckNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIListWebhookCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1ListWebhookCategoriesResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIListWebhookCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIListWebhookCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIListWebhookConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1ListWebhookConfigsResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIListWebhookConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIListWebhookConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPICreateWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1WebhookConfig
}

// Status returns HTTPResponse.Status
func (r NotificationAPICreateWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPICreateWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIDeleteWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1DeleteWebhookConfigResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIDeleteWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIDeleteWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIGetWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1WebhookConfig
}

// Status returns HTTPResponse.Status
func (r NotificationAPIGetWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIGetWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIUpdateWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1WebhookConfig
}

// Status returns HTTPResponse.Status
func (r NotificationAPIUpdateWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIUpdateWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationAPIGetNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1Notification
}

// Status returns HTTPResponse.Status
func (r NotificationAPIGetNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIGetNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ListOrganizationsResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPICreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Organization
}

// Status returns HTTPResponse.Status
func (r UsersAPICreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPICreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPIGetOrganizationReservationsBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetOrganizationReservationsBalanceResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetOrganizationReservationsBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetOrganizationReservationsBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPIGetOrganizationResourceUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetOrganizationResourceUsageResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetOrganizationResourceUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetOrganizationResourceUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIDeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1DeleteOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIDeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIDeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIGetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Organization
}

// Status returns HTTPResponse.Status
func (r UsersAPIGetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIGetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIEditOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Organization
}

// Status returns HTTPResponse.Status
func (r UsersAPIEditOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIEditOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPISyncClusterResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r InventoryAPISyncClusterResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPISyncClusterResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPIGetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetReservationsResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPIAddReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1AddReservationResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIAddReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIAddReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPIGetReservationsBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetReservationsBalanceResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetReservationsBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetReservationsBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPIOverwriteReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1OverwriteReservationsResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIOverwriteReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIOverwriteReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InventoryAPIDeleteReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r InventoryAPIDeleteReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIDeleteReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIListOrganizationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ListOrganizationUsersResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIListOrganizationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIListOrganizationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIAddUserToOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1AddUserToOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIAddUserToOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIAddUserToOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIRemoveUserFromOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1RemoveUserFromOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIRemoveUserFromOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIRemoveUserFromOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAPIUpdateOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Membership
}

// Status returns HTTPResponse.Status
func (r UsersAPIUpdateOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIUpdateOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartnersAPIListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiPartnersV1beta1ListOrganizationsResponse
}

// Status returns HTTPResponse.Status
func (r PartnersAPIListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnersAPIListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartnersAPICreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Organization
}

// Status returns HTTPResponse.Status
func (r PartnersAPICreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnersAPICreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartnersAPICreateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r PartnersAPICreateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnersAPICreateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartnersAPIDeleteTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiPartnersV1beta1DeleteTokenResponse
}

// Status returns HTTPResponse.Status
func (r PartnersAPIDeleteTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnersAPIDeleteTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PricingAPIGetPricingForClusterNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetPricingForClusterNodesResponse
}

// Status returns HTTPResponse.Status
func (r PricingAPIGetPricingForClusterNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PricingAPIGetPricingForClusterNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PricingAPIGetPricingForClusterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetPricingForClusterNodeResponse
}

// Status returns HTTPResponse.Status
func (r PricingAPIGetPricingForClusterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PricingAPIGetPricingForClusterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PricingAPIGetPricingForOrganizationNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetPricingForOrganizationNodesResponse
}

// Status returns HTTPResponse.Status
func (r PricingAPIGetPricingForOrganizationNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PricingAPIGetPricingForOrganizationNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PricingAPISyncGCPBillingAPIDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1SyncGCPBillingAPIDataResponse
}

// Status returns HTTPResponse.Status
func (r PricingAPISyncGCPBillingAPIDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PricingAPISyncGCPBillingAPIDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIListRebalancingSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1ListRebalancingSchedulesResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIListRebalancingSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIListRebalancingSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPICreateRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingSchedule
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPICreateRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPICreateRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIUpdateRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingSchedule
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIUpdateRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIUpdateRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIDeleteRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1DeleteRebalancingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIDeleteRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIDeleteRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIGetRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingSchedule
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIGetRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIGetRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsageAPIGetUsageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsageV1beta1GetUsageReportResponse
}

// Status returns HTTPResponse.Status
func (r UsageAPIGetUsageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsageAPIGetUsageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsageAPIGetUsageSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsageV1beta1GetUsageSummaryResponse
}

// Status returns HTTPResponse.Status
func (r UsageAPIGetUsageSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsageAPIGetUsageSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIGetCommitmentsAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetCommitmentsAssignmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetCommitmentsAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetCommitmentsAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPICreateCommitmentAssignmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPICreateCommitmentAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPICreateCommitmentAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIDeleteCommitmentAssignmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIDeleteCommitmentAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIDeleteCommitmentAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIGetCommitmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetCommitmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetCommitmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetCommitmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIImportAzureReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIImportAzureReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIImportAzureReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIImportGCPCommitmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIImportGCPCommitmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIImportGCPCommitmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIGetGCPCommitmentsImportScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetGCPCommitmentsImportScriptResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetGCPCommitmentsImportScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetGCPCommitmentsImportScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIDeleteCommitmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIDeleteCommitmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIDeleteCommitmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIUpdateCommitmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1UpdateCommitmentResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIUpdateCommitmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIUpdateCommitmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIGetCommitmentAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetCommitmentAssignmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetCommitmentAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetCommitmentAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIReplaceCommitmentAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1ReplaceCommitmentAssignmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIReplaceCommitmentAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIReplaceCommitmentAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportConfigurationAPIGetEgressdScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportConfigurationAPIGetEgressdScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportConfigurationAPIGetEgressdScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuntimeSecurityAPIGetKvisordScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RuntimeSecurityAPIGetKvisordScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuntimeSecurityAPIGetKvisordScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetInstallCmdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetInstallCmdResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetInstallCmdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetInstallCmdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetInstallScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetInstallScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetInstallScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetCleanupScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExternalClusterAPIGetCredentialsScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetAgentsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetAgentsStatusResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAgentsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAgentsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetAttackPathsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetAttackPathsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAttackPathsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAttackPathsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetAttackPathDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetAttackPathDetailsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAttackPathDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAttackPathDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetBestPracticesReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesReportResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetChecksResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetChecksResourcesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetChecksResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetChecksResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetBestPracticesCheckDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesCheckDetailsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesCheckDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesCheckDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIEnforceCheckPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1EnforceCheckPolicyResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIEnforceCheckPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIEnforceCheckPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetCheckExceptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetCheckExceptionsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetCheckExceptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetCheckExceptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPISaveCheckExceptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1SaveCheckExceptionsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPISaveCheckExceptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPISaveCheckExceptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIPreviewExceptionGroupsResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1PreviewExceptionGroupsResourcesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIPreviewExceptionGroupsResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIPreviewExceptionGroupsResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetCheckResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetCheckResourcesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetCheckResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetCheckResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIDeletePolicyEnforcementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1DeletePolicyEnforcementResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIDeletePolicyEnforcementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIDeletePolicyEnforcementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetBestPracticesReportFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesReportFiltersResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesReportFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesReportFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIScheduleBestPracticesScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1ScheduleBestPracticesScanResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIScheduleBestPracticesScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIScheduleBestPracticesScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetBestPracticesReportSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesReportSummaryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesReportSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesReportSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetDailySummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetDailySummaryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetDailySummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetDailySummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetExceptedChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetExceptedChecksResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetExceptedChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetExceptedChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImagesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIDeleteImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1DeleteImagesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIDeleteImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIDeleteImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIImageExceptionChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1ImageExceptionChangesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIImageExceptionChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIImageExceptionChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImagesFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImagesFiltersResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImagesFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImagesFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImagesSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImagesSummaryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImagesSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImagesSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetPublicImageAlternativesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetPublicImageAlternativesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetPublicImageAlternativesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetPublicImageAlternativesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImageDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImageDetailsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImageDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImageDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImageDigestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImageDigestsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImageDigestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImageDigestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImagePackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImagePackagesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImagePackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImagePackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImageResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImageResourcesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImageResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImageResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImageVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImageVulnerabilitiesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImageVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImageVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetContainerImagePackageVulnerabilityDetailsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetAttackPathsOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetAttackPathsOverviewResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAttackPathsOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAttackPathsOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetBestPracticesOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesOverviewResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetImageSecurityOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetImageSecurityOverviewResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetImageSecurityOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetImageSecurityOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetNodesOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetNodesOverviewResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetNodesOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetNodesOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetResourceDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetResourceDetailsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetResourceDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetResourceDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetAgentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetAgentStatusResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAgentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAgentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIIngestAgentLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1IngestAgentLogResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIIngestAgentLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIIngestAgentLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetAgentSyncStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetAgentSyncStateResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAgentSyncStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAgentSyncStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIPostAgentTelemetryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1PostAgentTelemetryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIPostAgentTelemetryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIPostAgentTelemetryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIListIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1ListIntegrationsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIListIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIListIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPICreateIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1CreateIntegrationResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPICreateIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPICreateIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIDeleteIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1DeleteIntegrationResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIDeleteIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIDeleteIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIGetIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetIntegrationResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIUpdateIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1UpdateIntegrationResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIUpdateIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIUpdateIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPICreateTicketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1CreateTicketResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPICreateTicketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPICreateTicketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuntimeSecurityAPIGetAnomaliesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeV1GetAnomaliesResponse
}

// Status returns HTTPResponse.Status
func (r RuntimeSecurityAPIGetAnomaliesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuntimeSecurityAPIGetAnomaliesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuntimeSecurityAPIAckAnomaliesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeV1AckAnomaliesResponse
}

// Status returns HTTPResponse.Status
func (r RuntimeSecurityAPIAckAnomaliesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuntimeSecurityAPIAckAnomaliesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuntimeSecurityAPICloseAnomaliesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeV1CloseAnomaliesResponse
}

// Status returns HTTPResponse.Status
func (r RuntimeSecurityAPICloseAnomaliesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuntimeSecurityAPICloseAnomaliesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuntimeSecurityAPIGetAnomalyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeV1GetAnomalyResponse
}

// Status returns HTTPResponse.Status
func (r RuntimeSecurityAPIGetAnomalyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuntimeSecurityAPIGetAnomalyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuntimeSecurityAPIGetAnomaliesOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeV1GetAnomaliesOverviewResponse
}

// Status returns HTTPResponse.Status
func (r RuntimeSecurityAPIGetAnomaliesOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuntimeSecurityAPIGetAnomaliesOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuntimeSecurityAPIGetKvisordScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeV1GetKvisordScriptResponse
}

// Status returns HTTPResponse.Status
func (r RuntimeSecurityAPIGetKvisordScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuntimeSecurityAPIGetKvisordScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsightsAPIConfigureClusterSecuritySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1ConfigureClusterSecuritySettingsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIConfigureClusterSecuritySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIConfigureClusterSecuritySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SSOAPIListSSOConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1ListSSOConnectionsResponse
}

// Status returns HTTPResponse.Status
func (r SSOAPIListSSOConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIListSSOConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SSOAPICreateSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1SSOConnection
}

// Status returns HTTPResponse.Status
func (r SSOAPICreateSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPICreateSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SSOAPIDeleteSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1DeleteSSOConnectionResponse
}

// Status returns HTTPResponse.Status
func (r SSOAPIDeleteSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIDeleteSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SSOAPIGetSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1SSOConnection
}

// Status returns HTTPResponse.Status
func (r SSOAPIGetSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIGetSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SSOAPIUpdateSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1SSOConnection
}

// Status returns HTTPResponse.Status
func (r SSOAPIUpdateSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIUpdateSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduledRebalancingAPIListAvailableRebalancingTZResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1ListAvailableRebalancingTZResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIListAvailableRebalancingTZResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIListAvailableRebalancingTZResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetAgentStatus2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetAgentStatusResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetAgentStatus2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetAgentStatus2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadScalingPoliciesResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1WorkloadScalingPolicy
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1DeleteWorkloadScalingPolicyResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1WorkloadScalingPolicy
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1AssignScalingPolicyWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIListWorkloadEvents2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadEventsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloadEvents2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloadEvents2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIListWorkloads2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloads2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloads2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetWorkload2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetWorkloadResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetWorkload2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetWorkload2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIUpdateWorkload2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1UpdateWorkloadResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIUpdateWorkload2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIUpdateWorkload2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetInstallCmd2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetInstallCmdResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetInstallCmd2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetInstallCmd2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadOptimizationAPIGetInstallScript2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetInstallScript2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetInstallScript2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AutoscalerAPIGetAgentScriptWithResponse request returning *AutoscalerAPIGetAgentScriptResponse
func (c *ClientWithResponses) AutoscalerAPIGetAgentScriptWithResponse(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetAgentScriptResponse, error) {
	rsp, err := c.AutoscalerAPIGetAgentScript(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetAgentScriptResponse(rsp)
}

// AuditAPIListAuditEntriesWithResponse request returning *AuditAPIListAuditEntriesResponse
func (c *ClientWithResponses) AuditAPIListAuditEntriesWithResponse(ctx context.Context, params *AuditAPIListAuditEntriesParams, reqEditors ...RequestEditorFn) (*AuditAPIListAuditEntriesResponse, error) {
	rsp, err := c.AuditAPIListAuditEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuditAPIListAuditEntriesResponse(rsp)
}

// LoginCallbackWithResponse request returning *LoginCallbackResponse
func (c *ClientWithResponses) LoginCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginCallbackResponse, error) {
	rsp, err := c.LoginCallback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginCallbackResponse(rsp)
}

// LoginWithResponse request returning *LoginResponse
func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// SamlAcsWithResponse request returning *SamlAcsResponse
func (c *ClientWithResponses) SamlAcsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SamlAcsResponse, error) {
	rsp, err := c.SamlAcs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSamlAcsResponse(rsp)
}

// GetSessionWithResponse request returning *GetSessionResponse
func (c *ClientWithResponses) GetSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionResponse, error) {
	rsp, err := c.GetSession(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionResponse(rsp)
}

// AuthTokenAPIListAuthTokensWithResponse request returning *AuthTokenAPIListAuthTokensResponse
func (c *ClientWithResponses) AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*AuthTokenAPIListAuthTokensResponse, error) {
	rsp, err := c.AuthTokenAPIListAuthTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIListAuthTokensResponse(rsp)
}

// AuthTokenAPICreateAuthTokenWithBodyWithResponse request with arbitrary body returning *AuthTokenAPICreateAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenAPICreateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPICreateAuthTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPICreateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenAPICreateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPICreateAuthToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPICreateAuthTokenResponse(rsp)
}

// AuthTokenAPIDeleteAuthTokenWithResponse request returning *AuthTokenAPIDeleteAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AuthTokenAPIDeleteAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIDeleteAuthToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIDeleteAuthTokenResponse(rsp)
}

// AuthTokenAPIGetAuthTokenWithResponse request returning *AuthTokenAPIGetAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AuthTokenAPIGetAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIGetAuthToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIGetAuthTokenResponse(rsp)
}

// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse request with arbitrary body returning *AuthTokenAPIUpdateAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIUpdateAuthTokenWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIUpdateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIUpdateAuthToken(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIUpdateAuthTokenResponse(rsp)
}

// BillingSsoWithResponse request returning *BillingSsoResponse
func (c *ClientWithResponses) BillingSsoWithResponse(ctx context.Context, params *BillingSsoParams, reqEditors ...RequestEditorFn) (*BillingSsoResponse, error) {
	rsp, err := c.BillingSso(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingSsoResponse(rsp)
}

// SubscriptionWithResponse request returning *SubscriptionResponse
func (c *ClientWithResponses) SubscriptionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubscriptionResponse, error) {
	rsp, err := c.Subscription(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionResponse(rsp)
}

// SubscriptionCheckoutWithResponse request returning *SubscriptionCheckoutResponse
func (c *ClientWithResponses) SubscriptionCheckoutWithResponse(ctx context.Context, params *SubscriptionCheckoutParams, reqEditors ...RequestEditorFn) (*SubscriptionCheckoutResponse, error) {
	rsp, err := c.SubscriptionCheckout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionCheckoutResponse(rsp)
}

// BillingAPIGetUsageReportWithResponse request returning *BillingAPIGetUsageReportResponse
func (c *ClientWithResponses) BillingAPIGetUsageReportWithResponse(ctx context.Context, params *BillingAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*BillingAPIGetUsageReportResponse, error) {
	rsp, err := c.BillingAPIGetUsageReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingAPIGetUsageReportResponse(rsp)
}

// WorkloadOptimizationAPIGetAgentStatusWithResponse request returning *WorkloadOptimizationAPIGetAgentStatusResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetAgentStatusWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetAgentStatusResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetAgentStatus(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetAgentStatusResponse(rsp)
}

// ComponentsAPIIngestLogsWithBodyWithResponse request with arbitrary body returning *ComponentsAPIIngestLogsResponse
func (c *ClientWithResponses) ComponentsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, component string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComponentsAPIIngestLogsResponse, error) {
	rsp, err := c.ComponentsAPIIngestLogsWithBody(ctx, clusterId, component, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsAPIIngestLogsResponse(rsp)
}

func (c *ClientWithResponses) ComponentsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, component string, body ComponentsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComponentsAPIIngestLogsResponse, error) {
	rsp, err := c.ComponentsAPIIngestLogs(ctx, clusterId, component, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsAPIIngestLogsResponse(rsp)
}

// WorkloadOptimizationAPIListWorkloadEventsWithResponse request returning *WorkloadOptimizationAPIListWorkloadEventsResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloadEventsWithResponse(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadEventsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloadEvents(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloadEventsResponse(rsp)
}

// WorkloadOptimizationAPIListWorkloadsWithResponse request returning *WorkloadOptimizationAPIListWorkloadsResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloads(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloadsResponse(rsp)
}

// WorkloadOptimizationAPIGetWorkloadWithResponse request returning *WorkloadOptimizationAPIGetWorkloadResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetWorkloadResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetWorkload(ctx, clusterId, workloadId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetWorkloadResponse(rsp)
}

// WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIUpdateWorkloadResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx, clusterId, workloadId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkload(ctx, clusterId, workloadId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadResponse(rsp)
}

// AllocationGroupAPIGetAllocationGroupCostTimedSummariesWithResponse request returning *AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse
func (c *ClientWithResponses) AllocationGroupAPIGetAllocationGroupCostTimedSummariesWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostTimedSummariesParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse, error) {
	rsp, err := c.AllocationGroupAPIGetAllocationGroupCostTimedSummaries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse(rsp)
}

// AllocationGroupAPIGetAllocationGroupCostSummariesWithResponse request returning *AllocationGroupAPIGetAllocationGroupCostSummariesResponse
func (c *ClientWithResponses) AllocationGroupAPIGetAllocationGroupCostSummariesWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupCostSummariesParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupCostSummariesResponse, error) {
	rsp, err := c.AllocationGroupAPIGetAllocationGroupCostSummaries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetAllocationGroupCostSummariesResponse(rsp)
}

// AllocationGroupAPIListAllocationGroupsWithResponse request returning *AllocationGroupAPIListAllocationGroupsResponse
func (c *ClientWithResponses) AllocationGroupAPIListAllocationGroupsWithResponse(ctx context.Context, params *AllocationGroupAPIListAllocationGroupsParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIListAllocationGroupsResponse, error) {
	rsp, err := c.AllocationGroupAPIListAllocationGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIListAllocationGroupsResponse(rsp)
}

// AllocationGroupAPICreateAllocationGroupWithBodyWithResponse request with arbitrary body returning *AllocationGroupAPICreateAllocationGroupResponse
func (c *ClientWithResponses) AllocationGroupAPICreateAllocationGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocationGroupAPICreateAllocationGroupResponse, error) {
	rsp, err := c.AllocationGroupAPICreateAllocationGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPICreateAllocationGroupResponse(rsp)
}

func (c *ClientWithResponses) AllocationGroupAPICreateAllocationGroupWithResponse(ctx context.Context, body AllocationGroupAPICreateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocationGroupAPICreateAllocationGroupResponse, error) {
	rsp, err := c.AllocationGroupAPICreateAllocationGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPICreateAllocationGroupResponse(rsp)
}

// AllocationGroupAPIGetAllocationGroupTotalCostTimedWithResponse request returning *AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse
func (c *ClientWithResponses) AllocationGroupAPIGetAllocationGroupTotalCostTimedWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupTotalCostTimedParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse, error) {
	rsp, err := c.AllocationGroupAPIGetAllocationGroupTotalCostTimed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetAllocationGroupTotalCostTimedResponse(rsp)
}

// AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryWithResponse request returning *AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse
func (c *ClientWithResponses) AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryWithResponse(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse, error) {
	rsp, err := c.AllocationGroupAPIGetCostAllocationGroupDataTransferSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse(rsp)
}

// AllocationGroupAPIGetAllocationGroupEfficiencySummaryWithResponse request returning *AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse
func (c *ClientWithResponses) AllocationGroupAPIGetAllocationGroupEfficiencySummaryWithResponse(ctx context.Context, params *AllocationGroupAPIGetAllocationGroupEfficiencySummaryParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse, error) {
	rsp, err := c.AllocationGroupAPIGetAllocationGroupEfficiencySummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse(rsp)
}

// AllocationGroupAPIGetCostAllocationGroupSummaryWithResponse request returning *AllocationGroupAPIGetCostAllocationGroupSummaryResponse
func (c *ClientWithResponses) AllocationGroupAPIGetCostAllocationGroupSummaryWithResponse(ctx context.Context, params *AllocationGroupAPIGetCostAllocationGroupSummaryParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupSummaryResponse, error) {
	rsp, err := c.AllocationGroupAPIGetCostAllocationGroupSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetCostAllocationGroupSummaryResponse(rsp)
}

// AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsWithResponse request returning *AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse
func (c *ClientWithResponses) AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsWithResponse(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse, error) {
	rsp, err := c.AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloads(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse(rsp)
}

// AllocationGroupAPIGetCostAllocationGroupWorkloadsWithResponse request returning *AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse
func (c *ClientWithResponses) AllocationGroupAPIGetCostAllocationGroupWorkloadsWithResponse(ctx context.Context, groupId string, params *AllocationGroupAPIGetCostAllocationGroupWorkloadsParams, reqEditors ...RequestEditorFn) (*AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse, error) {
	rsp, err := c.AllocationGroupAPIGetCostAllocationGroupWorkloads(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIGetCostAllocationGroupWorkloadsResponse(rsp)
}

// AllocationGroupAPIDeleteAllocationGroupWithResponse request returning *AllocationGroupAPIDeleteAllocationGroupResponse
func (c *ClientWithResponses) AllocationGroupAPIDeleteAllocationGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AllocationGroupAPIDeleteAllocationGroupResponse, error) {
	rsp, err := c.AllocationGroupAPIDeleteAllocationGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIDeleteAllocationGroupResponse(rsp)
}

// AllocationGroupAPIUpdateAllocationGroupWithBodyWithResponse request with arbitrary body returning *AllocationGroupAPIUpdateAllocationGroupResponse
func (c *ClientWithResponses) AllocationGroupAPIUpdateAllocationGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocationGroupAPIUpdateAllocationGroupResponse, error) {
	rsp, err := c.AllocationGroupAPIUpdateAllocationGroupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIUpdateAllocationGroupResponse(rsp)
}

func (c *ClientWithResponses) AllocationGroupAPIUpdateAllocationGroupWithResponse(ctx context.Context, id string, body AllocationGroupAPIUpdateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocationGroupAPIUpdateAllocationGroupResponse, error) {
	rsp, err := c.AllocationGroupAPIUpdateAllocationGroup(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocationGroupAPIUpdateAllocationGroupResponse(rsp)
}

// ClusterReportAPIGetClusterCostReportWithResponse request returning *ClusterReportAPIGetClusterCostReportResponse
func (c *ClientWithResponses) ClusterReportAPIGetClusterCostReportWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterCostReportResponse, error) {
	rsp, err := c.ClusterReportAPIGetClusterCostReport(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClusterCostReportResponse(rsp)
}

// WorkloadReportAPIGetWorkloadDataTransferCostWithResponse request returning *WorkloadReportAPIGetWorkloadDataTransferCostResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadDataTransferCostWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadDataTransferCostResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadDataTransferCost(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadDataTransferCostResponse(rsp)
}

// WorkloadReportAPIGetWorkloadDataTransferCost2WithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetWorkloadDataTransferCost2Response
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadDataTransferCost2WithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadDataTransferCost2Response, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadDataTransferCost2WithBody(ctx, clusterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadDataTransferCost2Response(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadDataTransferCost2WithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadDataTransferCost2Params, body WorkloadReportAPIGetWorkloadDataTransferCost2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadDataTransferCost2Response, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadDataTransferCost2(ctx, clusterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadDataTransferCost2Response(rsp)
}

// ClusterReportAPIGetClusterEfficiencyReportWithResponse request returning *ClusterReportAPIGetClusterEfficiencyReportResponse
func (c *ClientWithResponses) ClusterReportAPIGetClusterEfficiencyReportWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterEfficiencyReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterEfficiencyReportResponse, error) {
	rsp, err := c.ClusterReportAPIGetClusterEfficiencyReport(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClusterEfficiencyReportResponse(rsp)
}

// ClusterReportAPIGetSavingsRecommendationWithResponse request returning *ClusterReportAPIGetSavingsRecommendationResponse
func (c *ClientWithResponses) ClusterReportAPIGetSavingsRecommendationWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetSavingsRecommendationResponse, error) {
	rsp, err := c.ClusterReportAPIGetSavingsRecommendation(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetSavingsRecommendationResponse(rsp)
}

// ClusterReportAPIGetClusterCostHistoryWithResponse request returning *ClusterReportAPIGetClusterCostHistoryResponse
func (c *ClientWithResponses) ClusterReportAPIGetClusterCostHistoryWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterCostHistoryParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterCostHistoryResponse, error) {
	rsp, err := c.ClusterReportAPIGetClusterCostHistory(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClusterCostHistoryResponse(rsp)
}

// ReportConfigurationAPIGetGroupingConfigWithResponse request returning *ReportConfigurationAPIGetGroupingConfigResponse
func (c *ClientWithResponses) ReportConfigurationAPIGetGroupingConfigWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetGroupingConfigResponse, error) {
	rsp, err := c.ReportConfigurationAPIGetGroupingConfig(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportConfigurationAPIGetGroupingConfigResponse(rsp)
}

// ReportConfigurationAPIUpsertGroupingConfigWithBodyWithResponse request with arbitrary body returning *ReportConfigurationAPIUpsertGroupingConfigResponse
func (c *ClientWithResponses) ReportConfigurationAPIUpsertGroupingConfigWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIUpsertGroupingConfigResponse, error) {
	rsp, err := c.ReportConfigurationAPIUpsertGroupingConfigWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportConfigurationAPIUpsertGroupingConfigResponse(rsp)
}

func (c *ClientWithResponses) ReportConfigurationAPIUpsertGroupingConfigWithResponse(ctx context.Context, clusterId string, body ReportConfigurationAPIUpsertGroupingConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIUpsertGroupingConfigResponse, error) {
	rsp, err := c.ReportConfigurationAPIUpsertGroupingConfig(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportConfigurationAPIUpsertGroupingConfigResponse(rsp)
}

// NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBodyWithResponse request with arbitrary body returning *NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse
func (c *ClientWithResponses) NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBodyWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse, error) {
	rsp, err := c.NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithBody(ctx, clusterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse(rsp)
}

func (c *ClientWithResponses) NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportSummariesParams, body NamespaceReportAPIGetClusterNamespaceCostReportSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse, error) {
	rsp, err := c.NamespaceReportAPIGetClusterNamespaceCostReportSummaries(ctx, clusterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse(rsp)
}

// NamespaceReportAPIGetClusterNamespaceDataTransferCostWithResponse request returning *NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse
func (c *ClientWithResponses) NamespaceReportAPIGetClusterNamespaceDataTransferCostWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferCostParams, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse, error) {
	rsp, err := c.NamespaceReportAPIGetClusterNamespaceDataTransferCost(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceReportAPIGetClusterNamespaceDataTransferCostResponse(rsp)
}

// NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostWithResponse request returning *NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse
func (c *ClientWithResponses) NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostParams, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse, error) {
	rsp, err := c.NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCost(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse(rsp)
}

// NamespaceReportAPIGetClusterNamespaceCostReportWithBodyWithResponse request with arbitrary body returning *NamespaceReportAPIGetClusterNamespaceCostReportResponse
func (c *ClientWithResponses) NamespaceReportAPIGetClusterNamespaceCostReportWithBodyWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportResponse, error) {
	rsp, err := c.NamespaceReportAPIGetClusterNamespaceCostReportWithBody(ctx, clusterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceReportAPIGetClusterNamespaceCostReportResponse(rsp)
}

func (c *ClientWithResponses) NamespaceReportAPIGetClusterNamespaceCostReportWithResponse(ctx context.Context, clusterId string, params *NamespaceReportAPIGetClusterNamespaceCostReportParams, body NamespaceReportAPIGetClusterNamespaceCostReportJSONRequestBody, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetClusterNamespaceCostReportResponse, error) {
	rsp, err := c.NamespaceReportAPIGetClusterNamespaceCostReport(ctx, clusterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceReportAPIGetClusterNamespaceCostReportResponse(rsp)
}

// NamespaceReportAPIGetSingleNamespaceCostReportWithResponse request returning *NamespaceReportAPIGetSingleNamespaceCostReportResponse
func (c *ClientWithResponses) NamespaceReportAPIGetSingleNamespaceCostReportWithResponse(ctx context.Context, clusterId string, namespace string, params *NamespaceReportAPIGetSingleNamespaceCostReportParams, reqEditors ...RequestEditorFn) (*NamespaceReportAPIGetSingleNamespaceCostReportResponse, error) {
	rsp, err := c.NamespaceReportAPIGetSingleNamespaceCostReport(ctx, clusterId, namespace, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceReportAPIGetSingleNamespaceCostReportResponse(rsp)
}

// WorkloadReportAPIGetSingleWorkloadCostReportWithResponse request returning *WorkloadReportAPIGetSingleWorkloadCostReportResponse
func (c *ClientWithResponses) WorkloadReportAPIGetSingleWorkloadCostReportWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadCostReportParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetSingleWorkloadCostReportResponse, error) {
	rsp, err := c.WorkloadReportAPIGetSingleWorkloadCostReport(ctx, clusterId, namespace, workloadType, workloadName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetSingleWorkloadCostReportResponse(rsp)
}

// WorkloadReportAPIGetSingleWorkloadDataTransferCostWithResponse request returning *WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse
func (c *ClientWithResponses) WorkloadReportAPIGetSingleWorkloadDataTransferCostWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetSingleWorkloadDataTransferCostParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse, error) {
	rsp, err := c.WorkloadReportAPIGetSingleWorkloadDataTransferCost(ctx, clusterId, namespace, workloadType, workloadName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetSingleWorkloadDataTransferCostResponse(rsp)
}

// WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameWithResponse request returning *WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse
func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadEfficiencyReportByName(ctx, clusterId, namespace, workloadType, workloadName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse(rsp)
}

// WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryWithResponse request returning *WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadTrafficDestinationsHistory(ctx, clusterId, namespace, workloadType, workloadName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse(rsp)
}

// WorkloadReportAPIGetWorkloadTrafficDestinationsWithResponse request returning *WorkloadReportAPIGetWorkloadTrafficDestinationsResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadTrafficDestinationsWithResponse(ctx context.Context, clusterId string, namespace string, workloadType string, workloadName string, params *WorkloadReportAPIGetWorkloadTrafficDestinationsParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadTrafficDestinationsResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadTrafficDestinations(ctx, clusterId, namespace, workloadType, workloadName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadTrafficDestinationsResponse(rsp)
}

// ReportConfigurationAPIGetReportingCapabilitiesWithResponse request returning *ReportConfigurationAPIGetReportingCapabilitiesResponse
func (c *ClientWithResponses) ReportConfigurationAPIGetReportingCapabilitiesWithResponse(ctx context.Context, clusterId string, params *ReportConfigurationAPIGetReportingCapabilitiesParams, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetReportingCapabilitiesResponse, error) {
	rsp, err := c.ReportConfigurationAPIGetReportingCapabilities(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportConfigurationAPIGetReportingCapabilitiesResponse(rsp)
}

// ClusterReportAPIGetClusterResourceUsageWithResponse request returning *ClusterReportAPIGetClusterResourceUsageResponse
func (c *ClientWithResponses) ClusterReportAPIGetClusterResourceUsageWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterResourceUsageParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterResourceUsageResponse, error) {
	rsp, err := c.ClusterReportAPIGetClusterResourceUsage(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClusterResourceUsageResponse(rsp)
}

// WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse
func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithResponse(ctx context.Context, clusterId string, body WorkloadReportAPIGetClusterWorkloadRightsizingPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadRightsizingPatch(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse(rsp)
}

// ClusterReportAPIGetRightsizingSummaryWithResponse request returning *ClusterReportAPIGetRightsizingSummaryResponse
func (c *ClientWithResponses) ClusterReportAPIGetRightsizingSummaryWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetRightsizingSummaryResponse, error) {
	rsp, err := c.ClusterReportAPIGetRightsizingSummary(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetRightsizingSummaryResponse(rsp)
}

// ClusterReportAPIGetClusterSavingsReportWithResponse request returning *ClusterReportAPIGetClusterSavingsReportResponse
func (c *ClientWithResponses) ClusterReportAPIGetClusterSavingsReportWithResponse(ctx context.Context, clusterId string, params *ClusterReportAPIGetClusterSavingsReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterSavingsReportResponse, error) {
	rsp, err := c.ClusterReportAPIGetClusterSavingsReport(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClusterSavingsReportResponse(rsp)
}

// ClusterReportAPIGetClusterSummaryWithResponse request returning *ClusterReportAPIGetClusterSummaryResponse
func (c *ClientWithResponses) ClusterReportAPIGetClusterSummaryWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterSummaryResponse, error) {
	rsp, err := c.ClusterReportAPIGetClusterSummary(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClusterSummaryResponse(rsp)
}

// WorkloadReportAPIGetWorkloadCostSummariesWithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetWorkloadCostSummariesResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadCostSummariesWithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadCostSummariesResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadCostSummariesWithBody(ctx, clusterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadCostSummariesResponse(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadCostSummariesWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetWorkloadCostSummariesParams, body WorkloadReportAPIGetWorkloadCostSummariesJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadCostSummariesResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadCostSummaries(ctx, clusterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadCostSummariesResponse(rsp)
}

// WorkloadReportAPIGetClusterWorkloadReportWithResponse request returning *WorkloadReportAPIGetClusterWorkloadReportResponse
func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadReportWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReportParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadReportResponse, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadReport(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadReportResponse(rsp)
}

// WorkloadReportAPIGetClusterWorkloadReport2WithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetClusterWorkloadReport2Response
func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadReport2WithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadReport2Response, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadReport2WithBody(ctx, clusterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadReport2Response(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadReport2WithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadReport2Params, body WorkloadReportAPIGetClusterWorkloadReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadReport2Response, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadReport2(ctx, clusterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadReport2Response(rsp)
}

// WorkloadReportAPIGetClusterWorkloadEfficiencyReportWithResponse request returning *WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse
func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadEfficiencyReportWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReportParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadEfficiencyReport(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse(rsp)
}

// WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response
func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBodyWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithBody(ctx, clusterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Params, body WorkloadReportAPIGetClusterWorkloadEfficiencyReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadEfficiencyReport2(ctx, clusterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response(rsp)
}

// WorkloadReportAPIGetClusterWorkloadLabelsWithResponse request returning *WorkloadReportAPIGetClusterWorkloadLabelsResponse
func (c *ClientWithResponses) WorkloadReportAPIGetClusterWorkloadLabelsWithResponse(ctx context.Context, clusterId string, params *WorkloadReportAPIGetClusterWorkloadLabelsParams, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetClusterWorkloadLabelsResponse, error) {
	rsp, err := c.WorkloadReportAPIGetClusterWorkloadLabels(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetClusterWorkloadLabelsResponse(rsp)
}

// WorkloadReportAPIGetNamespacesForClustersWithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetNamespacesForClustersResponse
func (c *ClientWithResponses) WorkloadReportAPIGetNamespacesForClustersWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetNamespacesForClustersResponse, error) {
	rsp, err := c.WorkloadReportAPIGetNamespacesForClustersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetNamespacesForClustersResponse(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetNamespacesForClustersWithResponse(ctx context.Context, params *WorkloadReportAPIGetNamespacesForClustersParams, body WorkloadReportAPIGetNamespacesForClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetNamespacesForClustersResponse, error) {
	rsp, err := c.WorkloadReportAPIGetNamespacesForClusters(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetNamespacesForClustersResponse(rsp)
}

// NodeReportAPIGetNodeLabelNamesWithBodyWithResponse request with arbitrary body returning *NodeReportAPIGetNodeLabelNamesResponse
func (c *ClientWithResponses) NodeReportAPIGetNodeLabelNamesWithBodyWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelNamesResponse, error) {
	rsp, err := c.NodeReportAPIGetNodeLabelNamesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeReportAPIGetNodeLabelNamesResponse(rsp)
}

func (c *ClientWithResponses) NodeReportAPIGetNodeLabelNamesWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelNamesParams, body NodeReportAPIGetNodeLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelNamesResponse, error) {
	rsp, err := c.NodeReportAPIGetNodeLabelNames(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeReportAPIGetNodeLabelNamesResponse(rsp)
}

// NodeReportAPIGetNodeLabelValuesWithBodyWithResponse request with arbitrary body returning *NodeReportAPIGetNodeLabelValuesResponse
func (c *ClientWithResponses) NodeReportAPIGetNodeLabelValuesWithBodyWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelValuesResponse, error) {
	rsp, err := c.NodeReportAPIGetNodeLabelValuesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeReportAPIGetNodeLabelValuesResponse(rsp)
}

func (c *ClientWithResponses) NodeReportAPIGetNodeLabelValuesWithResponse(ctx context.Context, params *NodeReportAPIGetNodeLabelValuesParams, body NodeReportAPIGetNodeLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeReportAPIGetNodeLabelValuesResponse, error) {
	rsp, err := c.NodeReportAPIGetNodeLabelValues(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeReportAPIGetNodeLabelValuesResponse(rsp)
}

// ClusterReportAPIGetOrganizationClustersCostReportWithResponse request returning *ClusterReportAPIGetOrganizationClustersCostReportResponse
func (c *ClientWithResponses) ClusterReportAPIGetOrganizationClustersCostReportWithResponse(ctx context.Context, params *ClusterReportAPIGetOrganizationClustersCostReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetOrganizationClustersCostReportResponse, error) {
	rsp, err := c.ClusterReportAPIGetOrganizationClustersCostReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetOrganizationClustersCostReportResponse(rsp)
}

// ClusterReportAPIGetClustersSummaryWithResponse request returning *ClusterReportAPIGetClustersSummaryResponse
func (c *ClientWithResponses) ClusterReportAPIGetClustersSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClustersSummaryResponse, error) {
	rsp, err := c.ClusterReportAPIGetClustersSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClustersSummaryResponse(rsp)
}

// ClusterReportAPIGetClustersCostReportWithResponse request returning *ClusterReportAPIGetClustersCostReportResponse
func (c *ClientWithResponses) ClusterReportAPIGetClustersCostReportWithResponse(ctx context.Context, params *ClusterReportAPIGetClustersCostReportParams, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClustersCostReportResponse, error) {
	rsp, err := c.ClusterReportAPIGetClustersCostReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClustersCostReportResponse(rsp)
}

// WorkloadReportAPIGetWorkloadLabelNamesWithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetWorkloadLabelNamesResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadLabelNamesWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelNamesResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadLabelNamesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadLabelNamesResponse(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadLabelNamesWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelNamesParams, body WorkloadReportAPIGetWorkloadLabelNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelNamesResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadLabelNames(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadLabelNamesResponse(rsp)
}

// WorkloadReportAPIGetWorkloadLabelValuesWithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetWorkloadLabelValuesResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadLabelValuesWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadLabelValuesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadLabelValuesResponse(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadLabelValuesWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadLabelValuesParams, body WorkloadReportAPIGetWorkloadLabelValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadLabelValues(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadLabelValuesResponse(rsp)
}

// WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBodyWithResponse(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithBody(ctx, label, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithResponse(ctx context.Context, label string, params *WorkloadReportAPIGetWorkloadLabelValuesDeprecatedParams, body WorkloadReportAPIGetWorkloadLabelValuesDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadLabelValuesDeprecated(ctx, label, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse(rsp)
}

// WorkloadReportAPIGetWorkloadsMetadataWithBodyWithResponse request with arbitrary body returning *WorkloadReportAPIGetWorkloadsMetadataResponse
func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadsMetadataWithBodyWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadsMetadataResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadsMetadataWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadsMetadataResponse(rsp)
}

func (c *ClientWithResponses) WorkloadReportAPIGetWorkloadsMetadataWithResponse(ctx context.Context, params *WorkloadReportAPIGetWorkloadsMetadataParams, body WorkloadReportAPIGetWorkloadsMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadReportAPIGetWorkloadsMetadataResponse, error) {
	rsp, err := c.WorkloadReportAPIGetWorkloadsMetadata(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadReportAPIGetWorkloadsMetadataResponse(rsp)
}

// DedicatedInstanceAPIListDedicatedInstancesWithResponse request returning *DedicatedInstanceAPIListDedicatedInstancesResponse
func (c *ClientWithResponses) DedicatedInstanceAPIListDedicatedInstancesWithResponse(ctx context.Context, params *DedicatedInstanceAPIListDedicatedInstancesParams, reqEditors ...RequestEditorFn) (*DedicatedInstanceAPIListDedicatedInstancesResponse, error) {
	rsp, err := c.DedicatedInstanceAPIListDedicatedInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDedicatedInstanceAPIListDedicatedInstancesResponse(rsp)
}

// FeaturesAPIListWithResponse request returning *FeaturesAPIListResponse
func (c *ClientWithResponses) FeaturesAPIListWithResponse(ctx context.Context, params *FeaturesAPIListParams, reqEditors ...RequestEditorFn) (*FeaturesAPIListResponse, error) {
	rsp, err := c.FeaturesAPIList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFeaturesAPIListResponse(rsp)
}

// FeaturesAPIResolveWithBodyWithResponse request with arbitrary body returning *FeaturesAPIResolveResponse
func (c *ClientWithResponses) FeaturesAPIResolveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FeaturesAPIResolveResponse, error) {
	rsp, err := c.FeaturesAPIResolveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFeaturesAPIResolveResponse(rsp)
}

func (c *ClientWithResponses) FeaturesAPIResolveWithResponse(ctx context.Context, body FeaturesAPIResolveJSONRequestBody, reqEditors ...RequestEditorFn) (*FeaturesAPIResolveResponse, error) {
	rsp, err := c.FeaturesAPIResolve(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFeaturesAPIResolveResponse(rsp)
}

// InventoryBlacklistAPIListBlacklistsWithResponse request returning *InventoryBlacklistAPIListBlacklistsResponse
func (c *ClientWithResponses) InventoryBlacklistAPIListBlacklistsWithResponse(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIListBlacklistsResponse, error) {
	rsp, err := c.InventoryBlacklistAPIListBlacklists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIListBlacklistsResponse(rsp)
}

// InventoryBlacklistAPIAddBlacklistWithBodyWithResponse request with arbitrary body returning *InventoryBlacklistAPIAddBlacklistResponse
func (c *ClientWithResponses) InventoryBlacklistAPIAddBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIAddBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIAddBlacklistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIAddBlacklistResponse(rsp)
}

func (c *ClientWithResponses) InventoryBlacklistAPIAddBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIAddBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIAddBlacklist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIAddBlacklistResponse(rsp)
}

// InventoryBlacklistAPIRemoveBlacklistWithBodyWithResponse request with arbitrary body returning *InventoryBlacklistAPIRemoveBlacklistResponse
func (c *ClientWithResponses) InventoryBlacklistAPIRemoveBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIRemoveBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIRemoveBlacklistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIRemoveBlacklistResponse(rsp)
}

func (c *ClientWithResponses) InventoryBlacklistAPIRemoveBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryBlacklistAPIRemoveBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIRemoveBlacklist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIRemoveBlacklistResponse(rsp)
}

// UsersAPIListInvitationsWithResponse request returning *UsersAPIListInvitationsResponse
func (c *ClientWithResponses) UsersAPIListInvitationsWithResponse(ctx context.Context, params *UsersAPIListInvitationsParams, reqEditors ...RequestEditorFn) (*UsersAPIListInvitationsResponse, error) {
	rsp, err := c.UsersAPIListInvitations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIListInvitationsResponse(rsp)
}

// UsersAPICreateInvitationsWithBodyWithResponse request with arbitrary body returning *UsersAPICreateInvitationsResponse
func (c *ClientWithResponses) UsersAPICreateInvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPICreateInvitationsResponse, error) {
	rsp, err := c.UsersAPICreateInvitationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateInvitationsResponse(rsp)
}

func (c *ClientWithResponses) UsersAPICreateInvitationsWithResponse(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPICreateInvitationsResponse, error) {
	rsp, err := c.UsersAPICreateInvitations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateInvitationsResponse(rsp)
}

// UsersAPIDeleteInvitationWithResponse request returning *UsersAPIDeleteInvitationResponse
func (c *ClientWithResponses) UsersAPIDeleteInvitationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersAPIDeleteInvitationResponse, error) {
	rsp, err := c.UsersAPIDeleteInvitation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIDeleteInvitationResponse(rsp)
}

// UsersAPIClaimInvitationWithBodyWithResponse request with arbitrary body returning *UsersAPIClaimInvitationResponse
func (c *ClientWithResponses) UsersAPIClaimInvitationWithBodyWithResponse(ctx context.Context, invitationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIClaimInvitationResponse, error) {
	rsp, err := c.UsersAPIClaimInvitationWithBody(ctx, invitationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIClaimInvitationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIClaimInvitationWithResponse(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIClaimInvitationResponse, error) {
	rsp, err := c.UsersAPIClaimInvitation(ctx, invitationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIClaimInvitationResponse(rsp)
}

// ClusterActionsAPIPollClusterActionsWithResponse request returning *ClusterActionsAPIPollClusterActionsResponse
func (c *ClientWithResponses) ClusterActionsAPIPollClusterActionsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterActionsAPIPollClusterActionsResponse, error) {
	rsp, err := c.ClusterActionsAPIPollClusterActions(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIPollClusterActionsResponse(rsp)
}

// ClusterActionsAPIIngestLogsWithBodyWithResponse request with arbitrary body returning *ClusterActionsAPIIngestLogsResponse
func (c *ClientWithResponses) ClusterActionsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterActionsAPIIngestLogsResponse, error) {
	rsp, err := c.ClusterActionsAPIIngestLogsWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIIngestLogsResponse(rsp)
}

func (c *ClientWithResponses) ClusterActionsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterActionsAPIIngestLogsResponse, error) {
	rsp, err := c.ClusterActionsAPIIngestLogs(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIIngestLogsResponse(rsp)
}

// ClusterActionsAPIAckClusterActionWithBodyWithResponse request with arbitrary body returning *ClusterActionsAPIAckClusterActionResponse
func (c *ClientWithResponses) ClusterActionsAPIAckClusterActionWithBodyWithResponse(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterActionsAPIAckClusterActionResponse, error) {
	rsp, err := c.ClusterActionsAPIAckClusterActionWithBody(ctx, clusterId, actionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIAckClusterActionResponse(rsp)
}

func (c *ClientWithResponses) ClusterActionsAPIAckClusterActionWithResponse(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterActionsAPIAckClusterActionResponse, error) {
	rsp, err := c.ClusterActionsAPIAckClusterAction(ctx, clusterId, actionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIAckClusterActionResponse(rsp)
}

// AlgorithmStatsAPISubmitWithBodyWithResponse request with arbitrary body returning *AlgorithmStatsAPISubmitResponse
func (c *ClientWithResponses) AlgorithmStatsAPISubmitWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlgorithmStatsAPISubmitResponse, error) {
	rsp, err := c.AlgorithmStatsAPISubmitWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlgorithmStatsAPISubmitResponse(rsp)
}

func (c *ClientWithResponses) AlgorithmStatsAPISubmitWithResponse(ctx context.Context, clusterId string, body AlgorithmStatsAPISubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*AlgorithmStatsAPISubmitResponse, error) {
	rsp, err := c.AlgorithmStatsAPISubmit(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlgorithmStatsAPISubmitResponse(rsp)
}

// ReportConfigurationAPIGetEgressdScriptWithResponse request returning *ReportConfigurationAPIGetEgressdScriptResponse
func (c *ClientWithResponses) ReportConfigurationAPIGetEgressdScriptWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetEgressdScriptResponse, error) {
	rsp, err := c.ReportConfigurationAPIGetEgressdScript(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportConfigurationAPIGetEgressdScriptResponse(rsp)
}

// EvictorAPIGetAdvancedConfigWithResponse request returning *EvictorAPIGetAdvancedConfigResponse
func (c *ClientWithResponses) EvictorAPIGetAdvancedConfigWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*EvictorAPIGetAdvancedConfigResponse, error) {
	rsp, err := c.EvictorAPIGetAdvancedConfig(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvictorAPIGetAdvancedConfigResponse(rsp)
}

// EvictorAPIUpsertAdvancedConfigWithBodyWithResponse request with arbitrary body returning *EvictorAPIUpsertAdvancedConfigResponse
func (c *ClientWithResponses) EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvictorAPIUpsertAdvancedConfigResponse, error) {
	rsp, err := c.EvictorAPIUpsertAdvancedConfigWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvictorAPIUpsertAdvancedConfigResponse(rsp)
}

func (c *ClientWithResponses) EvictorAPIUpsertAdvancedConfigWithResponse(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EvictorAPIUpsertAdvancedConfigResponse, error) {
	rsp, err := c.EvictorAPIUpsertAdvancedConfig(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvictorAPIUpsertAdvancedConfigResponse(rsp)
}

// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPIFilterInstanceTypesResponse
func (c *ClientWithResponses) NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	rsp, err := c.NodeTemplatesAPIFilterInstanceTypesWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	rsp, err := c.NodeTemplatesAPIFilterInstanceTypes(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp)
}

// NodeTemplatesAPIGenerateNodeTemplatesWithResponse request returning *NodeTemplatesAPIGenerateNodeTemplatesResponse
func (c *ClientWithResponses) NodeTemplatesAPIGenerateNodeTemplatesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIGenerateNodeTemplatesResponse, error) {
	rsp, err := c.NodeTemplatesAPIGenerateNodeTemplates(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIGenerateNodeTemplatesResponse(rsp)
}

// AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse request returning *AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse
func (c *ClientWithResponses) AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse, error) {
	rsp, err := c.AutoscalerAPIGetKarpenterDefinitionsMigrationIntent(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse(rsp)
}

// AutoscalerAPIMigrateKarpenterDefinitionsWithBodyWithResponse request with arbitrary body returning *AutoscalerAPIMigrateKarpenterDefinitionsResponse
func (c *ClientWithResponses) AutoscalerAPIMigrateKarpenterDefinitionsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error) {
	rsp, err := c.AutoscalerAPIMigrateKarpenterDefinitionsWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse(rsp)
}

func (c *ClientWithResponses) AutoscalerAPIMigrateKarpenterDefinitionsWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error) {
	rsp, err := c.AutoscalerAPIMigrateKarpenterDefinitions(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse(rsp)
}

// NodeConfigurationAPIListConfigurationsWithResponse request returning *NodeConfigurationAPIListConfigurationsResponse
func (c *ClientWithResponses) NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIListConfigurationsResponse, error) {
	rsp, err := c.NodeConfigurationAPIListConfigurations(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIListConfigurationsResponse(rsp)
}

// NodeConfigurationAPICreateConfigurationWithBodyWithResponse request with arbitrary body returning *NodeConfigurationAPICreateConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPICreateConfigurationWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPICreateConfigurationResponse(rsp)
}

func (c *ClientWithResponses) NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPICreateConfiguration(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPICreateConfigurationResponse(rsp)
}

// NodeConfigurationAPIGetSuggestedConfigurationWithResponse request returning *NodeConfigurationAPIGetSuggestedConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIGetSuggestedConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIGetSuggestedConfiguration(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIGetSuggestedConfigurationResponse(rsp)
}

// NodeConfigurationAPIDeleteConfigurationWithResponse request returning *NodeConfigurationAPIDeleteConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIDeleteConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIDeleteConfiguration(ctx, clusterId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIDeleteConfigurationResponse(rsp)
}

// NodeConfigurationAPIGetConfigurationWithResponse request returning *NodeConfigurationAPIGetConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIGetConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIGetConfiguration(ctx, clusterId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIGetConfigurationResponse(rsp)
}

// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse request with arbitrary body returning *NodeConfigurationAPIUpdateConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIUpdateConfigurationWithBody(ctx, clusterId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp)
}

func (c *ClientWithResponses) NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIUpdateConfiguration(ctx, clusterId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp)
}

// NodeConfigurationAPISetDefaultWithResponse request returning *NodeConfigurationAPISetDefaultResponse
func (c *ClientWithResponses) NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*NodeConfigurationAPISetDefaultResponse, error) {
	rsp, err := c.NodeConfigurationAPISetDefault(ctx, clusterId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPISetDefaultResponse(rsp)
}

// PoliciesAPIGetClusterNodeConstraintsWithResponse request returning *PoliciesAPIGetClusterNodeConstraintsResponse
func (c *ClientWithResponses) PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	rsp, err := c.PoliciesAPIGetClusterNodeConstraints(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIGetClusterNodeConstraintsResponse(rsp)
}

// NodeTemplatesAPIListNodeTemplatesWithResponse request returning *NodeTemplatesAPIListNodeTemplatesResponse
func (c *ClientWithResponses) NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIListNodeTemplatesResponse, error) {
	rsp, err := c.NodeTemplatesAPIListNodeTemplates(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIListNodeTemplatesResponse(rsp)
}

// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPICreateNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPICreateNodeTemplateWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPICreateNodeTemplate(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp)
}

// NodeTemplatesAPIDeleteNodeTemplateWithResponse request returning *NodeTemplatesAPIDeleteNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIDeleteNodeTemplate(ctx, clusterId, nodeTemplateName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIDeleteNodeTemplateResponse(rsp)
}

// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPIUpdateNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx, clusterId, nodeTemplateName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIUpdateNodeTemplate(ctx, clusterId, nodeTemplateName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp)
}

// PoliciesAPIGetClusterPoliciesWithResponse request returning *PoliciesAPIGetClusterPoliciesResponse
func (c *ClientWithResponses) PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PoliciesAPIGetClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIGetClusterPolicies(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIGetClusterPoliciesResponse(rsp)
}

// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse request with arbitrary body returning *PoliciesAPIUpsertClusterPoliciesResponse
func (c *ClientWithResponses) PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIUpsertClusterPoliciesWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIUpsertClusterPolicies(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp)
}

// AutoscalerAPIGetProblematicNodesWithResponse request returning *AutoscalerAPIGetProblematicNodesResponse
func (c *ClientWithResponses) AutoscalerAPIGetProblematicNodesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetProblematicNodesResponse, error) {
	rsp, err := c.AutoscalerAPIGetProblematicNodes(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetProblematicNodesResponse(rsp)
}

// AutoscalerAPIGetProblematicWorkloadsWithResponse request returning *AutoscalerAPIGetProblematicWorkloadsResponse
func (c *ClientWithResponses) AutoscalerAPIGetProblematicWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetProblematicWorkloadsResponse, error) {
	rsp, err := c.AutoscalerAPIGetProblematicWorkloads(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetProblematicWorkloadsResponse(rsp)
}

// AutoscalerAPIGetRebalancedWorkloadsWithResponse request returning *AutoscalerAPIGetRebalancedWorkloadsResponse
func (c *ClientWithResponses) AutoscalerAPIGetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetRebalancedWorkloadsResponse, error) {
	rsp, err := c.AutoscalerAPIGetRebalancedWorkloads(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetRebalancedWorkloadsResponse(rsp)
}

// ScheduledRebalancingAPIListRebalancingJobsWithResponse request returning *ScheduledRebalancingAPIListRebalancingJobsResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIListRebalancingJobsResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIListRebalancingJobs(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIListRebalancingJobsResponse(rsp)
}

// ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPICreateRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingJobResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingJob(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingJobResponse(rsp)
}

// ScheduledRebalancingAPIDeleteRebalancingJobWithResponse request returning *ScheduledRebalancingAPIDeleteRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIDeleteRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIDeleteRebalancingJob(ctx, clusterId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIDeleteRebalancingJobResponse(rsp)
}

// ScheduledRebalancingAPIGetRebalancingJobWithResponse request returning *ScheduledRebalancingAPIGetRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIGetRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIGetRebalancingJob(ctx, clusterId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIGetRebalancingJobResponse(rsp)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPIUpdateRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx, clusterId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingJobResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingJob(ctx, clusterId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingJobResponse(rsp)
}

// AutoscalerAPIListRebalancingPlansWithResponse request returning *AutoscalerAPIListRebalancingPlansResponse
func (c *ClientWithResponses) AutoscalerAPIListRebalancingPlansWithResponse(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*AutoscalerAPIListRebalancingPlansResponse, error) {
	rsp, err := c.AutoscalerAPIListRebalancingPlans(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIListRebalancingPlansResponse(rsp)
}

// AutoscalerAPIGenerateRebalancingPlanWithBodyWithResponse request with arbitrary body returning *AutoscalerAPIGenerateRebalancingPlanResponse
func (c *ClientWithResponses) AutoscalerAPIGenerateRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AutoscalerAPIGenerateRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIGenerateRebalancingPlanWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGenerateRebalancingPlanResponse(rsp)
}

func (c *ClientWithResponses) AutoscalerAPIGenerateRebalancingPlanWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*AutoscalerAPIGenerateRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIGenerateRebalancingPlan(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGenerateRebalancingPlanResponse(rsp)
}

// AutoscalerAPIGetRebalancingPlanWithResponse request returning *AutoscalerAPIGetRebalancingPlanResponse
func (c *ClientWithResponses) AutoscalerAPIGetRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIGetRebalancingPlan(ctx, clusterId, rebalancingPlanId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetRebalancingPlanResponse(rsp)
}

// AutoscalerAPIExecuteRebalancingPlanWithResponse request returning *AutoscalerAPIExecuteRebalancingPlanResponse
func (c *ClientWithResponses) AutoscalerAPIExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIExecuteRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIExecuteRebalancingPlan(ctx, clusterId, rebalancingPlanId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIExecuteRebalancingPlanResponse(rsp)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPIPreviewRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse(rsp)
}

// AutoscalerAPIGetClusterSettingsWithResponse request returning *AutoscalerAPIGetClusterSettingsResponse
func (c *ClientWithResponses) AutoscalerAPIGetClusterSettingsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetClusterSettingsResponse, error) {
	rsp, err := c.AutoscalerAPIGetClusterSettings(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetClusterSettingsResponse(rsp)
}

// ClusterReportAPIGetClusterUnscheduledPodsWithResponse request returning *ClusterReportAPIGetClusterUnscheduledPodsResponse
func (c *ClientWithResponses) ClusterReportAPIGetClusterUnscheduledPodsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ClusterReportAPIGetClusterUnscheduledPodsResponse, error) {
	rsp, err := c.ClusterReportAPIGetClusterUnscheduledPods(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterReportAPIGetClusterUnscheduledPodsResponse(rsp)
}

// AutoscalerAPIGetClusterWorkloadsWithResponse request returning *AutoscalerAPIGetClusterWorkloadsResponse
func (c *ClientWithResponses) AutoscalerAPIGetClusterWorkloadsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*AutoscalerAPIGetClusterWorkloadsResponse, error) {
	rsp, err := c.AutoscalerAPIGetClusterWorkloads(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetClusterWorkloadsResponse(rsp)
}

// ExternalClusterAPIListClustersWithResponse request returning *ExternalClusterAPIListClustersResponse
func (c *ClientWithResponses) ExternalClusterAPIListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExternalClusterAPIListClustersResponse, error) {
	rsp, err := c.ExternalClusterAPIListClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListClustersResponse(rsp)
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIRegisterClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

// OperationsAPIGetOperationWithResponse request returning *OperationsAPIGetOperationResponse
func (c *ClientWithResponses) OperationsAPIGetOperationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OperationsAPIGetOperationResponse, error) {
	rsp, err := c.OperationsAPIGetOperation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsAPIGetOperationResponse(rsp)
}

// ExternalClusterAPIDeleteClusterWithResponse request returning *ExternalClusterAPIDeleteClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDeleteClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteClusterResponse(rsp)
}

// ExternalClusterAPIGetClusterWithResponse request returning *ExternalClusterAPIGetClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateCluster(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse request returning *ExternalClusterAPIDeleteAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteAssumeRolePrincipal(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPIGetAssumeRolePrincipalWithResponse request returning *ExternalClusterAPIGetAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPIGetAssumeRolePrincipal(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPICreateAssumeRolePrincipalWithResponse request returning *ExternalClusterAPICreateAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPICreateAssumeRolePrincipal(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse request returning *ExternalClusterAPIGetAssumeRoleUserResponse
func (c *ClientWithResponses) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	rsp, err := c.ExternalClusterAPIGetAssumeRoleUser(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp)
}

// ExternalClusterAPIGetCleanupScriptWithResponse request returning *ExternalClusterAPIGetCleanupScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCleanupScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCleanupScript(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCleanupScriptResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptWithResponse request returning *ExternalClusterAPIGetCredentialsScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScript(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptResponse(rsp)
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDisconnectClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectClusterWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectCluster(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIHandleCloudEventResponse
func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEventWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEvent(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

// ExternalClusterAPIListNodesWithResponse request returning *ExternalClusterAPIListNodesResponse
func (c *ClientWithResponses) ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIListNodesResponse, error) {
	rsp, err := c.ExternalClusterAPIListNodes(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListNodesResponse(rsp)
}

// ExternalClusterAPIAddNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIAddNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNodeWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNode(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

// ExternalClusterAPIDeleteNodeWithResponse request returning *ExternalClusterAPIDeleteNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDeleteNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteNode(ctx, clusterId, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteNodeResponse(rsp)
}

// ExternalClusterAPIGetNodeWithResponse request returning *ExternalClusterAPIGetNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIGetNode(ctx, clusterId, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetNodeResponse(rsp)
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDrainNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNodeWithBody(ctx, clusterId, nodeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNode(ctx, clusterId, nodeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

// ExternalClusterAPIReconcileClusterWithResponse request returning *ExternalClusterAPIReconcileClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIReconcileClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIReconcileCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIReconcileClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterTagsResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterTagsWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterTagsResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterTagsWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterTags(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterTagsResponse(rsp)
}

// ExternalClusterAPICreateClusterTokenWithResponse request returning *ExternalClusterAPICreateClusterTokenResponse
func (c *ClientWithResponses) ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	rsp, err := c.ExternalClusterAPICreateClusterToken(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateClusterTokenResponse(rsp)
}

// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportWithResponse request returning *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse
func (c *ClientWithResponses) OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportWithResponse(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse, error) {
	rsp, err := c.OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse(rsp)
}

// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportWithResponse request returning *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse
func (c *ClientWithResponses) OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportWithResponse(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse, error) {
	rsp, err := c.OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReport(ctx, apiKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse(rsp)
}

// OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportWithResponse request returning *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse
func (c *ClientWithResponses) OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportWithResponse(ctx context.Context, apiKeyId string, params *OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse, error) {
	rsp, err := c.OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReport(ctx, apiKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse(rsp)
}

// OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportWithResponse request returning *OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse
func (c *ClientWithResponses) OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportWithResponse(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse, error) {
	rsp, err := c.OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReport(ctx, categoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse(rsp)
}

// OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportWithResponse request returning *OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse
func (c *ClientWithResponses) OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportWithResponse(ctx context.Context, categoryId string, params *OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse, error) {
	rsp, err := c.OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReport(ctx, categoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse(rsp)
}

// OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportWithResponse request returning *OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse
func (c *ClientWithResponses) OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportWithResponse(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse, error) {
	rsp, err := c.OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse(rsp)
}

// OpenAILLMOptimizationAPIGetChatCompletionsUsageReportWithResponse request returning *OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse
func (c *ClientWithResponses) OpenAILLMOptimizationAPIGetChatCompletionsUsageReportWithResponse(ctx context.Context, params *OpenAILLMOptimizationAPIGetChatCompletionsUsageReportParams, reqEditors ...RequestEditorFn) (*OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse, error) {
	rsp, err := c.OpenAILLMOptimizationAPIGetChatCompletionsUsageReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse(rsp)
}

// LLMSettingsAPIGetSettingsWithResponse request returning *LLMSettingsAPIGetSettingsResponse
func (c *ClientWithResponses) LLMSettingsAPIGetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LLMSettingsAPIGetSettingsResponse, error) {
	rsp, err := c.LLMSettingsAPIGetSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLLMSettingsAPIGetSettingsResponse(rsp)
}

// LLMSettingsAPIUpsertSettingsWithBodyWithResponse request with arbitrary body returning *LLMSettingsAPIUpsertSettingsResponse
func (c *ClientWithResponses) LLMSettingsAPIUpsertSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LLMSettingsAPIUpsertSettingsResponse, error) {
	rsp, err := c.LLMSettingsAPIUpsertSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLLMSettingsAPIUpsertSettingsResponse(rsp)
}

func (c *ClientWithResponses) LLMSettingsAPIUpsertSettingsWithResponse(ctx context.Context, body LLMSettingsAPIUpsertSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*LLMSettingsAPIUpsertSettingsResponse, error) {
	rsp, err := c.LLMSettingsAPIUpsertSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLLMSettingsAPIUpsertSettingsResponse(rsp)
}

// UsersAPICurrentUserProfileWithResponse request returning *UsersAPICurrentUserProfileResponse
func (c *ClientWithResponses) UsersAPICurrentUserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersAPICurrentUserProfileResponse, error) {
	rsp, err := c.UsersAPICurrentUserProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICurrentUserProfileResponse(rsp)
}

// UsersAPIUpdateCurrentUserProfileWithBodyWithResponse request with arbitrary body returning *UsersAPIUpdateCurrentUserProfileResponse
func (c *ClientWithResponses) UsersAPIUpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIUpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UsersAPIUpdateCurrentUserProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateCurrentUserProfileResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIUpdateCurrentUserProfileWithResponse(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIUpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UsersAPIUpdateCurrentUserProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateCurrentUserProfileResponse(rsp)
}

// ReportMetricsAPIGetNodeTemplatePromMetricsWithResponse request returning *ReportMetricsAPIGetNodeTemplatePromMetricsResponse
func (c *ClientWithResponses) ReportMetricsAPIGetNodeTemplatePromMetricsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ReportMetricsAPIGetNodeTemplatePromMetricsResponse, error) {
	rsp, err := c.ReportMetricsAPIGetNodeTemplatePromMetrics(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportMetricsAPIGetNodeTemplatePromMetricsResponse(rsp)
}

// ReportMetricsAPIGetWorkloadPromMetricsWithResponse request returning *ReportMetricsAPIGetWorkloadPromMetricsResponse
func (c *ClientWithResponses) ReportMetricsAPIGetWorkloadPromMetricsWithResponse(ctx context.Context, clusterId string, params *ReportMetricsAPIGetWorkloadPromMetricsParams, reqEditors ...RequestEditorFn) (*ReportMetricsAPIGetWorkloadPromMetricsResponse, error) {
	rsp, err := c.ReportMetricsAPIGetWorkloadPromMetrics(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportMetricsAPIGetWorkloadPromMetricsResponse(rsp)
}

// ReportMetricsAPIGetPromMetricsWithResponse request returning *ReportMetricsAPIGetPromMetricsResponse
func (c *ClientWithResponses) ReportMetricsAPIGetPromMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReportMetricsAPIGetPromMetricsResponse, error) {
	rsp, err := c.ReportMetricsAPIGetPromMetrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportMetricsAPIGetPromMetricsResponse(rsp)
}

// NotificationAPIListNotificationsWithResponse request returning *NotificationAPIListNotificationsResponse
func (c *ClientWithResponses) NotificationAPIListNotificationsWithResponse(ctx context.Context, params *NotificationAPIListNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationAPIListNotificationsResponse, error) {
	rsp, err := c.NotificationAPIListNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIListNotificationsResponse(rsp)
}

// NotificationAPIAckNotificationsWithBodyWithResponse request with arbitrary body returning *NotificationAPIAckNotificationsResponse
func (c *ClientWithResponses) NotificationAPIAckNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationAPIAckNotificationsResponse, error) {
	rsp, err := c.NotificationAPIAckNotificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIAckNotificationsResponse(rsp)
}

func (c *ClientWithResponses) NotificationAPIAckNotificationsWithResponse(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationAPIAckNotificationsResponse, error) {
	rsp, err := c.NotificationAPIAckNotifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIAckNotificationsResponse(rsp)
}

// NotificationAPIListWebhookCategoriesWithResponse request returning *NotificationAPIListWebhookCategoriesResponse
func (c *ClientWithResponses) NotificationAPIListWebhookCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NotificationAPIListWebhookCategoriesResponse, error) {
	rsp, err := c.NotificationAPIListWebhookCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIListWebhookCategoriesResponse(rsp)
}

// NotificationAPIListWebhookConfigsWithResponse request returning *NotificationAPIListWebhookConfigsResponse
func (c *ClientWithResponses) NotificationAPIListWebhookConfigsWithResponse(ctx context.Context, params *NotificationAPIListWebhookConfigsParams, reqEditors ...RequestEditorFn) (*NotificationAPIListWebhookConfigsResponse, error) {
	rsp, err := c.NotificationAPIListWebhookConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIListWebhookConfigsResponse(rsp)
}

// NotificationAPICreateWebhookConfigWithBodyWithResponse request with arbitrary body returning *NotificationAPICreateWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPICreateWebhookConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationAPICreateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPICreateWebhookConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPICreateWebhookConfigResponse(rsp)
}

func (c *ClientWithResponses) NotificationAPICreateWebhookConfigWithResponse(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationAPICreateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPICreateWebhookConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPICreateWebhookConfigResponse(rsp)
}

// NotificationAPIDeleteWebhookConfigWithResponse request returning *NotificationAPIDeleteWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPIDeleteWebhookConfigWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NotificationAPIDeleteWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIDeleteWebhookConfig(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIDeleteWebhookConfigResponse(rsp)
}

// NotificationAPIGetWebhookConfigWithResponse request returning *NotificationAPIGetWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPIGetWebhookConfigWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NotificationAPIGetWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIGetWebhookConfig(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIGetWebhookConfigResponse(rsp)
}

// NotificationAPIUpdateWebhookConfigWithBodyWithResponse request with arbitrary body returning *NotificationAPIUpdateWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPIUpdateWebhookConfigWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationAPIUpdateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIUpdateWebhookConfigWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIUpdateWebhookConfigResponse(rsp)
}

func (c *ClientWithResponses) NotificationAPIUpdateWebhookConfigWithResponse(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationAPIUpdateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIUpdateWebhookConfig(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIUpdateWebhookConfigResponse(rsp)
}

// NotificationAPIGetNotificationWithResponse request returning *NotificationAPIGetNotificationResponse
func (c *ClientWithResponses) NotificationAPIGetNotificationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NotificationAPIGetNotificationResponse, error) {
	rsp, err := c.NotificationAPIGetNotification(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIGetNotificationResponse(rsp)
}

// UsersAPIListOrganizationsWithResponse request returning *UsersAPIListOrganizationsResponse
func (c *ClientWithResponses) UsersAPIListOrganizationsWithResponse(ctx context.Context, params *UsersAPIListOrganizationsParams, reqEditors ...RequestEditorFn) (*UsersAPIListOrganizationsResponse, error) {
	rsp, err := c.UsersAPIListOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIListOrganizationsResponse(rsp)
}

// UsersAPICreateOrganizationWithBodyWithResponse request with arbitrary body returning *UsersAPICreateOrganizationResponse
func (c *ClientWithResponses) UsersAPICreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPICreateOrganizationResponse, error) {
	rsp, err := c.UsersAPICreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPICreateOrganizationWithResponse(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPICreateOrganizationResponse, error) {
	rsp, err := c.UsersAPICreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateOrganizationResponse(rsp)
}

// InventoryAPIGetOrganizationReservationsBalanceWithResponse request returning *InventoryAPIGetOrganizationReservationsBalanceResponse
func (c *ClientWithResponses) InventoryAPIGetOrganizationReservationsBalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InventoryAPIGetOrganizationReservationsBalanceResponse, error) {
	rsp, err := c.InventoryAPIGetOrganizationReservationsBalance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetOrganizationReservationsBalanceResponse(rsp)
}

// InventoryAPIGetOrganizationResourceUsageWithResponse request returning *InventoryAPIGetOrganizationResourceUsageResponse
func (c *ClientWithResponses) InventoryAPIGetOrganizationResourceUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InventoryAPIGetOrganizationResourceUsageResponse, error) {
	rsp, err := c.InventoryAPIGetOrganizationResourceUsage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetOrganizationResourceUsageResponse(rsp)
}

// UsersAPIDeleteOrganizationWithResponse request returning *UsersAPIDeleteOrganizationResponse
func (c *ClientWithResponses) UsersAPIDeleteOrganizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersAPIDeleteOrganizationResponse, error) {
	rsp, err := c.UsersAPIDeleteOrganization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIDeleteOrganizationResponse(rsp)
}

// UsersAPIGetOrganizationWithResponse request returning *UsersAPIGetOrganizationResponse
func (c *ClientWithResponses) UsersAPIGetOrganizationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersAPIGetOrganizationResponse, error) {
	rsp, err := c.UsersAPIGetOrganization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIGetOrganizationResponse(rsp)
}

// UsersAPIEditOrganizationWithBodyWithResponse request with arbitrary body returning *UsersAPIEditOrganizationResponse
func (c *ClientWithResponses) UsersAPIEditOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIEditOrganizationResponse, error) {
	rsp, err := c.UsersAPIEditOrganizationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIEditOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIEditOrganizationWithResponse(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIEditOrganizationResponse, error) {
	rsp, err := c.UsersAPIEditOrganization(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIEditOrganizationResponse(rsp)
}

// InventoryAPISyncClusterResourcesWithResponse request returning *InventoryAPISyncClusterResourcesResponse
func (c *ClientWithResponses) InventoryAPISyncClusterResourcesWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*InventoryAPISyncClusterResourcesResponse, error) {
	rsp, err := c.InventoryAPISyncClusterResources(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPISyncClusterResourcesResponse(rsp)
}

// InventoryAPIGetReservationsWithResponse request returning *InventoryAPIGetReservationsResponse
func (c *ClientWithResponses) InventoryAPIGetReservationsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*InventoryAPIGetReservationsResponse, error) {
	rsp, err := c.InventoryAPIGetReservations(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetReservationsResponse(rsp)
}

// InventoryAPIAddReservationWithBodyWithResponse request with arbitrary body returning *InventoryAPIAddReservationResponse
func (c *ClientWithResponses) InventoryAPIAddReservationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryAPIAddReservationResponse, error) {
	rsp, err := c.InventoryAPIAddReservationWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIAddReservationResponse(rsp)
}

func (c *ClientWithResponses) InventoryAPIAddReservationWithResponse(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryAPIAddReservationResponse, error) {
	rsp, err := c.InventoryAPIAddReservation(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIAddReservationResponse(rsp)
}

// InventoryAPIGetReservationsBalanceWithResponse request returning *InventoryAPIGetReservationsBalanceResponse
func (c *ClientWithResponses) InventoryAPIGetReservationsBalanceWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*InventoryAPIGetReservationsBalanceResponse, error) {
	rsp, err := c.InventoryAPIGetReservationsBalance(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetReservationsBalanceResponse(rsp)
}

// InventoryAPIOverwriteReservationsWithBodyWithResponse request with arbitrary body returning *InventoryAPIOverwriteReservationsResponse
func (c *ClientWithResponses) InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InventoryAPIOverwriteReservationsResponse, error) {
	rsp, err := c.InventoryAPIOverwriteReservationsWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIOverwriteReservationsResponse(rsp)
}

func (c *ClientWithResponses) InventoryAPIOverwriteReservationsWithResponse(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*InventoryAPIOverwriteReservationsResponse, error) {
	rsp, err := c.InventoryAPIOverwriteReservations(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIOverwriteReservationsResponse(rsp)
}

// InventoryAPIDeleteReservationWithResponse request returning *InventoryAPIDeleteReservationResponse
func (c *ClientWithResponses) InventoryAPIDeleteReservationWithResponse(ctx context.Context, organizationId string, reservationId string, reqEditors ...RequestEditorFn) (*InventoryAPIDeleteReservationResponse, error) {
	rsp, err := c.InventoryAPIDeleteReservation(ctx, organizationId, reservationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIDeleteReservationResponse(rsp)
}

// UsersAPIListOrganizationUsersWithResponse request returning *UsersAPIListOrganizationUsersResponse
func (c *ClientWithResponses) UsersAPIListOrganizationUsersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*UsersAPIListOrganizationUsersResponse, error) {
	rsp, err := c.UsersAPIListOrganizationUsers(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIListOrganizationUsersResponse(rsp)
}

// UsersAPIAddUserToOrganizationWithBodyWithResponse request with arbitrary body returning *UsersAPIAddUserToOrganizationResponse
func (c *ClientWithResponses) UsersAPIAddUserToOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIAddUserToOrganizationResponse, error) {
	rsp, err := c.UsersAPIAddUserToOrganizationWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIAddUserToOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIAddUserToOrganizationWithResponse(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIAddUserToOrganizationResponse, error) {
	rsp, err := c.UsersAPIAddUserToOrganization(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIAddUserToOrganizationResponse(rsp)
}

// UsersAPIRemoveUserFromOrganizationWithResponse request returning *UsersAPIRemoveUserFromOrganizationResponse
func (c *ClientWithResponses) UsersAPIRemoveUserFromOrganizationWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*UsersAPIRemoveUserFromOrganizationResponse, error) {
	rsp, err := c.UsersAPIRemoveUserFromOrganization(ctx, organizationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIRemoveUserFromOrganizationResponse(rsp)
}

// UsersAPIUpdateOrganizationUserWithBodyWithResponse request with arbitrary body returning *UsersAPIUpdateOrganizationUserResponse
func (c *ClientWithResponses) UsersAPIUpdateOrganizationUserWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAPIUpdateOrganizationUserResponse, error) {
	rsp, err := c.UsersAPIUpdateOrganizationUserWithBody(ctx, organizationId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateOrganizationUserResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIUpdateOrganizationUserWithResponse(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAPIUpdateOrganizationUserResponse, error) {
	rsp, err := c.UsersAPIUpdateOrganizationUser(ctx, organizationId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateOrganizationUserResponse(rsp)
}

// PartnersAPIListOrganizationsWithResponse request returning *PartnersAPIListOrganizationsResponse
func (c *ClientWithResponses) PartnersAPIListOrganizationsWithResponse(ctx context.Context, partnerOrganizationId string, reqEditors ...RequestEditorFn) (*PartnersAPIListOrganizationsResponse, error) {
	rsp, err := c.PartnersAPIListOrganizations(ctx, partnerOrganizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnersAPIListOrganizationsResponse(rsp)
}

// PartnersAPICreateOrganizationWithBodyWithResponse request with arbitrary body returning *PartnersAPICreateOrganizationResponse
func (c *ClientWithResponses) PartnersAPICreateOrganizationWithBodyWithResponse(ctx context.Context, partnerOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartnersAPICreateOrganizationResponse, error) {
	rsp, err := c.PartnersAPICreateOrganizationWithBody(ctx, partnerOrganizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnersAPICreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) PartnersAPICreateOrganizationWithResponse(ctx context.Context, partnerOrganizationId string, body PartnersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PartnersAPICreateOrganizationResponse, error) {
	rsp, err := c.PartnersAPICreateOrganization(ctx, partnerOrganizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnersAPICreateOrganizationResponse(rsp)
}

// PartnersAPICreateTokenWithBodyWithResponse request with arbitrary body returning *PartnersAPICreateTokenResponse
func (c *ClientWithResponses) PartnersAPICreateTokenWithBodyWithResponse(ctx context.Context, partnerOrganizationId string, childOrganizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartnersAPICreateTokenResponse, error) {
	rsp, err := c.PartnersAPICreateTokenWithBody(ctx, partnerOrganizationId, childOrganizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnersAPICreateTokenResponse(rsp)
}

func (c *ClientWithResponses) PartnersAPICreateTokenWithResponse(ctx context.Context, partnerOrganizationId string, childOrganizationId string, body PartnersAPICreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PartnersAPICreateTokenResponse, error) {
	rsp, err := c.PartnersAPICreateToken(ctx, partnerOrganizationId, childOrganizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnersAPICreateTokenResponse(rsp)
}

// PartnersAPIDeleteTokenWithResponse request returning *PartnersAPIDeleteTokenResponse
func (c *ClientWithResponses) PartnersAPIDeleteTokenWithResponse(ctx context.Context, partnerOrganizationId string, childOrganizationId string, id string, reqEditors ...RequestEditorFn) (*PartnersAPIDeleteTokenResponse, error) {
	rsp, err := c.PartnersAPIDeleteToken(ctx, partnerOrganizationId, childOrganizationId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnersAPIDeleteTokenResponse(rsp)
}

// PricingAPIGetPricingForClusterNodesWithResponse request returning *PricingAPIGetPricingForClusterNodesResponse
func (c *ClientWithResponses) PricingAPIGetPricingForClusterNodesWithResponse(ctx context.Context, clusterId string, params *PricingAPIGetPricingForClusterNodesParams, reqEditors ...RequestEditorFn) (*PricingAPIGetPricingForClusterNodesResponse, error) {
	rsp, err := c.PricingAPIGetPricingForClusterNodes(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePricingAPIGetPricingForClusterNodesResponse(rsp)
}

// PricingAPIGetPricingForClusterNodeWithResponse request returning *PricingAPIGetPricingForClusterNodeResponse
func (c *ClientWithResponses) PricingAPIGetPricingForClusterNodeWithResponse(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*PricingAPIGetPricingForClusterNodeResponse, error) {
	rsp, err := c.PricingAPIGetPricingForClusterNode(ctx, clusterId, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePricingAPIGetPricingForClusterNodeResponse(rsp)
}

// PricingAPIGetPricingForOrganizationNodesWithResponse request returning *PricingAPIGetPricingForOrganizationNodesResponse
func (c *ClientWithResponses) PricingAPIGetPricingForOrganizationNodesWithResponse(ctx context.Context, params *PricingAPIGetPricingForOrganizationNodesParams, reqEditors ...RequestEditorFn) (*PricingAPIGetPricingForOrganizationNodesResponse, error) {
	rsp, err := c.PricingAPIGetPricingForOrganizationNodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePricingAPIGetPricingForOrganizationNodesResponse(rsp)
}

// PricingAPISyncGCPBillingAPIDataWithResponse request returning *PricingAPISyncGCPBillingAPIDataResponse
func (c *ClientWithResponses) PricingAPISyncGCPBillingAPIDataWithResponse(ctx context.Context, params *PricingAPISyncGCPBillingAPIDataParams, reqEditors ...RequestEditorFn) (*PricingAPISyncGCPBillingAPIDataResponse, error) {
	rsp, err := c.PricingAPISyncGCPBillingAPIData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePricingAPISyncGCPBillingAPIDataResponse(rsp)
}

// ScheduledRebalancingAPIListRebalancingSchedulesWithResponse request returning *ScheduledRebalancingAPIListRebalancingSchedulesResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIListRebalancingSchedulesResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIListRebalancingSchedules(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIListRebalancingSchedulesResponse(rsp)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPICreateRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingSchedule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingScheduleResponse(rsp)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPIUpdateRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse(rsp)
}

// ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse request returning *ScheduledRebalancingAPIDeleteRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIDeleteRebalancingScheduleResponse(rsp)
}

// ScheduledRebalancingAPIGetRebalancingScheduleWithResponse request returning *ScheduledRebalancingAPIGetRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIGetRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIGetRebalancingSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIGetRebalancingScheduleResponse(rsp)
}

// UsageAPIGetUsageReportWithResponse request returning *UsageAPIGetUsageReportResponse
func (c *ClientWithResponses) UsageAPIGetUsageReportWithResponse(ctx context.Context, params *UsageAPIGetUsageReportParams, reqEditors ...RequestEditorFn) (*UsageAPIGetUsageReportResponse, error) {
	rsp, err := c.UsageAPIGetUsageReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsageAPIGetUsageReportResponse(rsp)
}

// UsageAPIGetUsageSummaryWithResponse request returning *UsageAPIGetUsageSummaryResponse
func (c *ClientWithResponses) UsageAPIGetUsageSummaryWithResponse(ctx context.Context, params *UsageAPIGetUsageSummaryParams, reqEditors ...RequestEditorFn) (*UsageAPIGetUsageSummaryResponse, error) {
	rsp, err := c.UsageAPIGetUsageSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsageAPIGetUsageSummaryResponse(rsp)
}

// CommitmentsAPIGetCommitmentsAssignmentsWithResponse request returning *CommitmentsAPIGetCommitmentsAssignmentsResponse
func (c *ClientWithResponses) CommitmentsAPIGetCommitmentsAssignmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetCommitmentsAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIGetCommitmentsAssignments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetCommitmentsAssignmentsResponse(rsp)
}

// CommitmentsAPICreateCommitmentAssignmentWithResponse request returning *CommitmentsAPICreateCommitmentAssignmentResponse
func (c *ClientWithResponses) CommitmentsAPICreateCommitmentAssignmentWithResponse(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams, reqEditors ...RequestEditorFn) (*CommitmentsAPICreateCommitmentAssignmentResponse, error) {
	rsp, err := c.CommitmentsAPICreateCommitmentAssignment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPICreateCommitmentAssignmentResponse(rsp)
}

// CommitmentsAPIDeleteCommitmentAssignmentWithResponse request returning *CommitmentsAPIDeleteCommitmentAssignmentResponse
func (c *ClientWithResponses) CommitmentsAPIDeleteCommitmentAssignmentWithResponse(ctx context.Context, assignmentId string, reqEditors ...RequestEditorFn) (*CommitmentsAPIDeleteCommitmentAssignmentResponse, error) {
	rsp, err := c.CommitmentsAPIDeleteCommitmentAssignment(ctx, assignmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIDeleteCommitmentAssignmentResponse(rsp)
}

// CommitmentsAPIGetCommitmentsWithResponse request returning *CommitmentsAPIGetCommitmentsResponse
func (c *ClientWithResponses) CommitmentsAPIGetCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetCommitmentsResponse, error) {
	rsp, err := c.CommitmentsAPIGetCommitments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetCommitmentsResponse(rsp)
}

// CommitmentsAPIImportAzureReservationsWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIImportAzureReservationsResponse
func (c *ClientWithResponses) CommitmentsAPIImportAzureReservationsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportAzureReservationsResponse, error) {
	rsp, err := c.CommitmentsAPIImportAzureReservationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportAzureReservationsResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIImportAzureReservationsWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportAzureReservationsResponse, error) {
	rsp, err := c.CommitmentsAPIImportAzureReservations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportAzureReservationsResponse(rsp)
}

// CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIImportGCPCommitmentsResponse
func (c *ClientWithResponses) CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportGCPCommitmentsResponse, error) {
	rsp, err := c.CommitmentsAPIImportGCPCommitmentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportGCPCommitmentsResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIImportGCPCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIImportGCPCommitmentsResponse, error) {
	rsp, err := c.CommitmentsAPIImportGCPCommitments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportGCPCommitmentsResponse(rsp)
}

// CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse request returning *CommitmentsAPIGetGCPCommitmentsImportScriptResponse
func (c *ClientWithResponses) CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetGCPCommitmentsImportScriptResponse, error) {
	rsp, err := c.CommitmentsAPIGetGCPCommitmentsImportScript(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetGCPCommitmentsImportScriptResponse(rsp)
}

// CommitmentsAPIDeleteCommitmentWithResponse request returning *CommitmentsAPIDeleteCommitmentResponse
func (c *ClientWithResponses) CommitmentsAPIDeleteCommitmentWithResponse(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*CommitmentsAPIDeleteCommitmentResponse, error) {
	rsp, err := c.CommitmentsAPIDeleteCommitment(ctx, commitmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIDeleteCommitmentResponse(rsp)
}

// CommitmentsAPIUpdateCommitmentWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIUpdateCommitmentResponse
func (c *ClientWithResponses) CommitmentsAPIUpdateCommitmentWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIUpdateCommitmentResponse, error) {
	rsp, err := c.CommitmentsAPIUpdateCommitmentWithBody(ctx, commitmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIUpdateCommitmentResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIUpdateCommitmentWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIUpdateCommitmentResponse, error) {
	rsp, err := c.CommitmentsAPIUpdateCommitment(ctx, commitmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIUpdateCommitmentResponse(rsp)
}

// CommitmentsAPIGetCommitmentAssignmentsWithResponse request returning *CommitmentsAPIGetCommitmentAssignmentsResponse
func (c *ClientWithResponses) CommitmentsAPIGetCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetCommitmentAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIGetCommitmentAssignments(ctx, commitmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetCommitmentAssignmentsResponse(rsp)
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIReplaceCommitmentAssignmentsResponse
func (c *ClientWithResponses) CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx, commitmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIReplaceCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIReplaceCommitmentAssignments(ctx, commitmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse(rsp)
}

// CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse request returning *CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse
func (c *ClientWithResponses) CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse, error) {
	rsp, err := c.CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetGCPCommitmentsScriptTemplateResponse(rsp)
}

// ReportConfigurationAPIGetEgressdScriptTemplateWithResponse request returning *ReportConfigurationAPIGetEgressdScriptTemplateResponse
func (c *ClientWithResponses) ReportConfigurationAPIGetEgressdScriptTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReportConfigurationAPIGetEgressdScriptTemplateResponse, error) {
	rsp, err := c.ReportConfigurationAPIGetEgressdScriptTemplate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportConfigurationAPIGetEgressdScriptTemplateResponse(rsp)
}

// RuntimeSecurityAPIGetKvisordScriptTemplateWithResponse request returning *RuntimeSecurityAPIGetKvisordScriptTemplateResponse
func (c *ClientWithResponses) RuntimeSecurityAPIGetKvisordScriptTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetKvisordScriptTemplateResponse, error) {
	rsp, err := c.RuntimeSecurityAPIGetKvisordScriptTemplate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuntimeSecurityAPIGetKvisordScriptTemplateResponse(rsp)
}

// WorkloadOptimizationAPIGetInstallCmdWithResponse request returning *WorkloadOptimizationAPIGetInstallCmdResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetInstallCmdWithResponse(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallCmdResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetInstallCmd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetInstallCmdResponse(rsp)
}

// WorkloadOptimizationAPIGetInstallScriptWithResponse request returning *WorkloadOptimizationAPIGetInstallScriptResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetInstallScriptWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallScriptResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetInstallScript(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetInstallScriptResponse(rsp)
}

// ExternalClusterAPIGetCleanupScriptTemplateWithResponse request returning *ExternalClusterAPIGetCleanupScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCleanupScriptTemplate(ctx, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCleanupScriptTemplateResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse request returning *ExternalClusterAPIGetCredentialsScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScriptTemplate(ctx, provider, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp)
}

// InsightsAPIGetAgentsStatusWithBodyWithResponse request with arbitrary body returning *InsightsAPIGetAgentsStatusResponse
func (c *ClientWithResponses) InsightsAPIGetAgentsStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentsStatusResponse, error) {
	rsp, err := c.InsightsAPIGetAgentsStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAgentsStatusResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIGetAgentsStatusWithResponse(ctx context.Context, body InsightsAPIGetAgentsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentsStatusResponse, error) {
	rsp, err := c.InsightsAPIGetAgentsStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAgentsStatusResponse(rsp)
}

// InsightsAPIGetAttackPathsWithResponse request returning *InsightsAPIGetAttackPathsResponse
func (c *ClientWithResponses) InsightsAPIGetAttackPathsWithResponse(ctx context.Context, params *InsightsAPIGetAttackPathsParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetAttackPathsResponse, error) {
	rsp, err := c.InsightsAPIGetAttackPaths(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAttackPathsResponse(rsp)
}

// InsightsAPIGetAttackPathDetailsWithResponse request returning *InsightsAPIGetAttackPathDetailsResponse
func (c *ClientWithResponses) InsightsAPIGetAttackPathDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InsightsAPIGetAttackPathDetailsResponse, error) {
	rsp, err := c.InsightsAPIGetAttackPathDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAttackPathDetailsResponse(rsp)
}

// InsightsAPIGetBestPracticesReportWithResponse request returning *InsightsAPIGetBestPracticesReportResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesReportWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesReportResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesReportResponse(rsp)
}

// InsightsAPIGetChecksResourcesWithBodyWithResponse request with arbitrary body returning *InsightsAPIGetChecksResourcesResponse
func (c *ClientWithResponses) InsightsAPIGetChecksResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetChecksResourcesResponse, error) {
	rsp, err := c.InsightsAPIGetChecksResourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetChecksResourcesResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIGetChecksResourcesWithResponse(ctx context.Context, body InsightsAPIGetChecksResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetChecksResourcesResponse, error) {
	rsp, err := c.InsightsAPIGetChecksResources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetChecksResourcesResponse(rsp)
}

// InsightsAPIGetBestPracticesCheckDetailsWithResponse request returning *InsightsAPIGetBestPracticesCheckDetailsResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesCheckDetailsWithResponse(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesCheckDetailsResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesCheckDetails(ctx, ruleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesCheckDetailsResponse(rsp)
}

// InsightsAPIEnforceCheckPolicyWithBodyWithResponse request with arbitrary body returning *InsightsAPIEnforceCheckPolicyResponse
func (c *ClientWithResponses) InsightsAPIEnforceCheckPolicyWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIEnforceCheckPolicyResponse, error) {
	rsp, err := c.InsightsAPIEnforceCheckPolicyWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIEnforceCheckPolicyResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIEnforceCheckPolicyWithResponse(ctx context.Context, ruleId string, body InsightsAPIEnforceCheckPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIEnforceCheckPolicyResponse, error) {
	rsp, err := c.InsightsAPIEnforceCheckPolicy(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIEnforceCheckPolicyResponse(rsp)
}

// InsightsAPIGetCheckExceptionsWithResponse request returning *InsightsAPIGetCheckExceptionsResponse
func (c *ClientWithResponses) InsightsAPIGetCheckExceptionsWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetCheckExceptionsResponse, error) {
	rsp, err := c.InsightsAPIGetCheckExceptions(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetCheckExceptionsResponse(rsp)
}

// InsightsAPISaveCheckExceptionsWithBodyWithResponse request with arbitrary body returning *InsightsAPISaveCheckExceptionsResponse
func (c *ClientWithResponses) InsightsAPISaveCheckExceptionsWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPISaveCheckExceptionsResponse, error) {
	rsp, err := c.InsightsAPISaveCheckExceptionsWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPISaveCheckExceptionsResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPISaveCheckExceptionsWithResponse(ctx context.Context, ruleId string, body InsightsAPISaveCheckExceptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPISaveCheckExceptionsResponse, error) {
	rsp, err := c.InsightsAPISaveCheckExceptions(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPISaveCheckExceptionsResponse(rsp)
}

// InsightsAPIPreviewExceptionGroupsResourcesWithBodyWithResponse request with arbitrary body returning *InsightsAPIPreviewExceptionGroupsResourcesResponse
func (c *ClientWithResponses) InsightsAPIPreviewExceptionGroupsResourcesWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIPreviewExceptionGroupsResourcesResponse, error) {
	rsp, err := c.InsightsAPIPreviewExceptionGroupsResourcesWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIPreviewExceptionGroupsResourcesResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIPreviewExceptionGroupsResourcesWithResponse(ctx context.Context, ruleId string, body InsightsAPIPreviewExceptionGroupsResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIPreviewExceptionGroupsResourcesResponse, error) {
	rsp, err := c.InsightsAPIPreviewExceptionGroupsResources(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIPreviewExceptionGroupsResourcesResponse(rsp)
}

// InsightsAPIGetCheckResourcesWithBodyWithResponse request with arbitrary body returning *InsightsAPIGetCheckResourcesResponse
func (c *ClientWithResponses) InsightsAPIGetCheckResourcesWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetCheckResourcesResponse, error) {
	rsp, err := c.InsightsAPIGetCheckResourcesWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetCheckResourcesResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIGetCheckResourcesWithResponse(ctx context.Context, ruleId string, body InsightsAPIGetCheckResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetCheckResourcesResponse, error) {
	rsp, err := c.InsightsAPIGetCheckResources(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetCheckResourcesResponse(rsp)
}

// InsightsAPIDeletePolicyEnforcementWithResponse request returning *InsightsAPIDeletePolicyEnforcementResponse
func (c *ClientWithResponses) InsightsAPIDeletePolicyEnforcementWithResponse(ctx context.Context, enforcementId string, reqEditors ...RequestEditorFn) (*InsightsAPIDeletePolicyEnforcementResponse, error) {
	rsp, err := c.InsightsAPIDeletePolicyEnforcement(ctx, enforcementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIDeletePolicyEnforcementResponse(rsp)
}

// InsightsAPIGetBestPracticesReportFiltersWithResponse request returning *InsightsAPIGetBestPracticesReportFiltersResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesReportFiltersWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesReportFiltersResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesReportFilters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesReportFiltersResponse(rsp)
}

// InsightsAPIScheduleBestPracticesScanWithBodyWithResponse request with arbitrary body returning *InsightsAPIScheduleBestPracticesScanResponse
func (c *ClientWithResponses) InsightsAPIScheduleBestPracticesScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIScheduleBestPracticesScanResponse, error) {
	rsp, err := c.InsightsAPIScheduleBestPracticesScanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIScheduleBestPracticesScanResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIScheduleBestPracticesScanWithResponse(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIScheduleBestPracticesScanResponse, error) {
	rsp, err := c.InsightsAPIScheduleBestPracticesScan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIScheduleBestPracticesScanResponse(rsp)
}

// InsightsAPIGetBestPracticesReportSummaryWithResponse request returning *InsightsAPIGetBestPracticesReportSummaryResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesReportSummaryWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesReportSummaryResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesReportSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesReportSummaryResponse(rsp)
}

// InsightsAPIGetDailySummaryWithResponse request returning *InsightsAPIGetDailySummaryResponse
func (c *ClientWithResponses) InsightsAPIGetDailySummaryWithResponse(ctx context.Context, date string, reqEditors ...RequestEditorFn) (*InsightsAPIGetDailySummaryResponse, error) {
	rsp, err := c.InsightsAPIGetDailySummary(ctx, date, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetDailySummaryResponse(rsp)
}

// InsightsAPIGetExceptedChecksWithResponse request returning *InsightsAPIGetExceptedChecksResponse
func (c *ClientWithResponses) InsightsAPIGetExceptedChecksWithResponse(ctx context.Context, params *InsightsAPIGetExceptedChecksParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetExceptedChecksResponse, error) {
	rsp, err := c.InsightsAPIGetExceptedChecks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetExceptedChecksResponse(rsp)
}

// InsightsAPIGetContainerImagesWithResponse request returning *InsightsAPIGetContainerImagesResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImagesWithResponse(ctx context.Context, params *InsightsAPIGetContainerImagesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagesResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImagesResponse(rsp)
}

// InsightsAPIDeleteImagesWithBodyWithResponse request with arbitrary body returning *InsightsAPIDeleteImagesResponse
func (c *ClientWithResponses) InsightsAPIDeleteImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIDeleteImagesResponse, error) {
	rsp, err := c.InsightsAPIDeleteImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIDeleteImagesResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIDeleteImagesWithResponse(ctx context.Context, body InsightsAPIDeleteImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIDeleteImagesResponse, error) {
	rsp, err := c.InsightsAPIDeleteImages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIDeleteImagesResponse(rsp)
}

// InsightsAPIImageExceptionChangesWithBodyWithResponse request with arbitrary body returning *InsightsAPIImageExceptionChangesResponse
func (c *ClientWithResponses) InsightsAPIImageExceptionChangesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIImageExceptionChangesResponse, error) {
	rsp, err := c.InsightsAPIImageExceptionChangesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIImageExceptionChangesResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIImageExceptionChangesWithResponse(ctx context.Context, body InsightsAPIImageExceptionChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIImageExceptionChangesResponse, error) {
	rsp, err := c.InsightsAPIImageExceptionChanges(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIImageExceptionChangesResponse(rsp)
}

// InsightsAPIGetContainerImagesFiltersWithResponse request returning *InsightsAPIGetContainerImagesFiltersResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImagesFiltersWithResponse(ctx context.Context, params *InsightsAPIGetContainerImagesFiltersParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagesFiltersResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImagesFilters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImagesFiltersResponse(rsp)
}

// InsightsAPIGetContainerImagesSummaryWithResponse request returning *InsightsAPIGetContainerImagesSummaryResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImagesSummaryWithResponse(ctx context.Context, params *InsightsAPIGetContainerImagesSummaryParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagesSummaryResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImagesSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImagesSummaryResponse(rsp)
}

// InsightsAPIGetPublicImageAlternativesWithResponse request returning *InsightsAPIGetPublicImageAlternativesResponse
func (c *ClientWithResponses) InsightsAPIGetPublicImageAlternativesWithResponse(ctx context.Context, tagId string, params *InsightsAPIGetPublicImageAlternativesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetPublicImageAlternativesResponse, error) {
	rsp, err := c.InsightsAPIGetPublicImageAlternatives(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetPublicImageAlternativesResponse(rsp)
}

// InsightsAPIGetContainerImageDetailsWithResponse request returning *InsightsAPIGetContainerImageDetailsResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImageDetailsWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageDetailsResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImageDetails(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImageDetailsResponse(rsp)
}

// InsightsAPIGetContainerImageDigestsWithResponse request returning *InsightsAPIGetContainerImageDigestsResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImageDigestsWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageDigestsResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImageDigests(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImageDigestsResponse(rsp)
}

// InsightsAPIGetContainerImagePackagesWithResponse request returning *InsightsAPIGetContainerImagePackagesResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImagePackagesWithResponse(ctx context.Context, tagId string, params *InsightsAPIGetContainerImagePackagesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagePackagesResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImagePackages(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImagePackagesResponse(rsp)
}

// InsightsAPIGetContainerImageResourcesWithResponse request returning *InsightsAPIGetContainerImageResourcesResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImageResourcesWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageResourcesResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImageResources(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImageResourcesResponse(rsp)
}

// InsightsAPIGetContainerImageVulnerabilitiesWithResponse request returning *InsightsAPIGetContainerImageVulnerabilitiesResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImageVulnerabilitiesWithResponse(ctx context.Context, tagId string, params *InsightsAPIGetContainerImageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImageVulnerabilitiesResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImageVulnerabilities(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImageVulnerabilitiesResponse(rsp)
}

// InsightsAPIGetContainerImagePackageVulnerabilityDetailsWithResponse request returning *InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse
func (c *ClientWithResponses) InsightsAPIGetContainerImagePackageVulnerabilityDetailsWithResponse(ctx context.Context, tagId string, pkgVulnId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse, error) {
	rsp, err := c.InsightsAPIGetContainerImagePackageVulnerabilityDetails(ctx, tagId, pkgVulnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse(rsp)
}

// InsightsAPIGetAttackPathsOverviewWithResponse request returning *InsightsAPIGetAttackPathsOverviewResponse
func (c *ClientWithResponses) InsightsAPIGetAttackPathsOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIGetAttackPathsOverviewResponse, error) {
	rsp, err := c.InsightsAPIGetAttackPathsOverview(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAttackPathsOverviewResponse(rsp)
}

// InsightsAPIGetBestPracticesOverviewWithResponse request returning *InsightsAPIGetBestPracticesOverviewResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesOverviewWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetBestPracticesOverviewResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesOverview(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesOverviewResponse(rsp)
}

// InsightsAPIGetImageSecurityOverviewWithResponse request returning *InsightsAPIGetImageSecurityOverviewResponse
func (c *ClientWithResponses) InsightsAPIGetImageSecurityOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIGetImageSecurityOverviewResponse, error) {
	rsp, err := c.InsightsAPIGetImageSecurityOverview(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetImageSecurityOverviewResponse(rsp)
}

// InsightsAPIGetNodesOverviewWithResponse request returning *InsightsAPIGetNodesOverviewResponse
func (c *ClientWithResponses) InsightsAPIGetNodesOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIGetNodesOverviewResponse, error) {
	rsp, err := c.InsightsAPIGetNodesOverview(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetNodesOverviewResponse(rsp)
}

// InsightsAPIGetResourceDetailsWithResponse request returning *InsightsAPIGetResourceDetailsResponse
func (c *ClientWithResponses) InsightsAPIGetResourceDetailsWithResponse(ctx context.Context, id string, params *InsightsAPIGetResourceDetailsParams, reqEditors ...RequestEditorFn) (*InsightsAPIGetResourceDetailsResponse, error) {
	rsp, err := c.InsightsAPIGetResourceDetails(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetResourceDetailsResponse(rsp)
}

// InsightsAPIGetAgentStatusWithResponse request returning *InsightsAPIGetAgentStatusResponse
func (c *ClientWithResponses) InsightsAPIGetAgentStatusWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentStatusResponse, error) {
	rsp, err := c.InsightsAPIGetAgentStatus(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAgentStatusResponse(rsp)
}

// InsightsAPIIngestAgentLogWithBodyWithResponse request with arbitrary body returning *InsightsAPIIngestAgentLogResponse
func (c *ClientWithResponses) InsightsAPIIngestAgentLogWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIIngestAgentLogResponse, error) {
	rsp, err := c.InsightsAPIIngestAgentLogWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIIngestAgentLogResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIIngestAgentLogWithResponse(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIIngestAgentLogResponse, error) {
	rsp, err := c.InsightsAPIIngestAgentLog(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIIngestAgentLogResponse(rsp)
}

// InsightsAPIGetAgentSyncStateWithBodyWithResponse request with arbitrary body returning *InsightsAPIGetAgentSyncStateResponse
func (c *ClientWithResponses) InsightsAPIGetAgentSyncStateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentSyncStateResponse, error) {
	rsp, err := c.InsightsAPIGetAgentSyncStateWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAgentSyncStateResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIGetAgentSyncStateWithResponse(ctx context.Context, clusterId string, body InsightsAPIGetAgentSyncStateJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIGetAgentSyncStateResponse, error) {
	rsp, err := c.InsightsAPIGetAgentSyncState(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAgentSyncStateResponse(rsp)
}

// InsightsAPIPostAgentTelemetryWithBodyWithResponse request with arbitrary body returning *InsightsAPIPostAgentTelemetryResponse
func (c *ClientWithResponses) InsightsAPIPostAgentTelemetryWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIPostAgentTelemetryResponse, error) {
	rsp, err := c.InsightsAPIPostAgentTelemetryWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIPostAgentTelemetryResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIPostAgentTelemetryWithResponse(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIPostAgentTelemetryResponse, error) {
	rsp, err := c.InsightsAPIPostAgentTelemetry(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIPostAgentTelemetryResponse(rsp)
}

// InsightsAPIListIntegrationsWithResponse request returning *InsightsAPIListIntegrationsResponse
func (c *ClientWithResponses) InsightsAPIListIntegrationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InsightsAPIListIntegrationsResponse, error) {
	rsp, err := c.InsightsAPIListIntegrations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIListIntegrationsResponse(rsp)
}

// InsightsAPICreateIntegrationWithBodyWithResponse request with arbitrary body returning *InsightsAPICreateIntegrationResponse
func (c *ClientWithResponses) InsightsAPICreateIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPICreateIntegrationResponse, error) {
	rsp, err := c.InsightsAPICreateIntegrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPICreateIntegrationResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPICreateIntegrationWithResponse(ctx context.Context, body InsightsAPICreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPICreateIntegrationResponse, error) {
	rsp, err := c.InsightsAPICreateIntegration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPICreateIntegrationResponse(rsp)
}

// InsightsAPIDeleteIntegrationWithResponse request returning *InsightsAPIDeleteIntegrationResponse
func (c *ClientWithResponses) InsightsAPIDeleteIntegrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InsightsAPIDeleteIntegrationResponse, error) {
	rsp, err := c.InsightsAPIDeleteIntegration(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIDeleteIntegrationResponse(rsp)
}

// InsightsAPIGetIntegrationWithResponse request returning *InsightsAPIGetIntegrationResponse
func (c *ClientWithResponses) InsightsAPIGetIntegrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InsightsAPIGetIntegrationResponse, error) {
	rsp, err := c.InsightsAPIGetIntegration(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetIntegrationResponse(rsp)
}

// InsightsAPIUpdateIntegrationWithBodyWithResponse request with arbitrary body returning *InsightsAPIUpdateIntegrationResponse
func (c *ClientWithResponses) InsightsAPIUpdateIntegrationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIUpdateIntegrationResponse, error) {
	rsp, err := c.InsightsAPIUpdateIntegrationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIUpdateIntegrationResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIUpdateIntegrationWithResponse(ctx context.Context, id string, body InsightsAPIUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIUpdateIntegrationResponse, error) {
	rsp, err := c.InsightsAPIUpdateIntegration(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIUpdateIntegrationResponse(rsp)
}

// InsightsAPICreateTicketWithBodyWithResponse request with arbitrary body returning *InsightsAPICreateTicketResponse
func (c *ClientWithResponses) InsightsAPICreateTicketWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPICreateTicketResponse, error) {
	rsp, err := c.InsightsAPICreateTicketWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPICreateTicketResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPICreateTicketWithResponse(ctx context.Context, id string, body InsightsAPICreateTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPICreateTicketResponse, error) {
	rsp, err := c.InsightsAPICreateTicket(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPICreateTicketResponse(rsp)
}

// RuntimeSecurityAPIGetAnomaliesWithResponse request returning *RuntimeSecurityAPIGetAnomaliesResponse
func (c *ClientWithResponses) RuntimeSecurityAPIGetAnomaliesWithResponse(ctx context.Context, params *RuntimeSecurityAPIGetAnomaliesParams, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetAnomaliesResponse, error) {
	rsp, err := c.RuntimeSecurityAPIGetAnomalies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuntimeSecurityAPIGetAnomaliesResponse(rsp)
}

// RuntimeSecurityAPIAckAnomaliesWithResponse request returning *RuntimeSecurityAPIAckAnomaliesResponse
func (c *ClientWithResponses) RuntimeSecurityAPIAckAnomaliesWithResponse(ctx context.Context, params *RuntimeSecurityAPIAckAnomaliesParams, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIAckAnomaliesResponse, error) {
	rsp, err := c.RuntimeSecurityAPIAckAnomalies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuntimeSecurityAPIAckAnomaliesResponse(rsp)
}

// RuntimeSecurityAPICloseAnomaliesWithResponse request returning *RuntimeSecurityAPICloseAnomaliesResponse
func (c *ClientWithResponses) RuntimeSecurityAPICloseAnomaliesWithResponse(ctx context.Context, params *RuntimeSecurityAPICloseAnomaliesParams, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPICloseAnomaliesResponse, error) {
	rsp, err := c.RuntimeSecurityAPICloseAnomalies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuntimeSecurityAPICloseAnomaliesResponse(rsp)
}

// RuntimeSecurityAPIGetAnomalyWithResponse request returning *RuntimeSecurityAPIGetAnomalyResponse
func (c *ClientWithResponses) RuntimeSecurityAPIGetAnomalyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetAnomalyResponse, error) {
	rsp, err := c.RuntimeSecurityAPIGetAnomaly(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuntimeSecurityAPIGetAnomalyResponse(rsp)
}

// RuntimeSecurityAPIGetAnomaliesOverviewWithResponse request returning *RuntimeSecurityAPIGetAnomaliesOverviewResponse
func (c *ClientWithResponses) RuntimeSecurityAPIGetAnomaliesOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetAnomaliesOverviewResponse, error) {
	rsp, err := c.RuntimeSecurityAPIGetAnomaliesOverview(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuntimeSecurityAPIGetAnomaliesOverviewResponse(rsp)
}

// RuntimeSecurityAPIGetKvisordScriptWithResponse request returning *RuntimeSecurityAPIGetKvisordScriptResponse
func (c *ClientWithResponses) RuntimeSecurityAPIGetKvisordScriptWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*RuntimeSecurityAPIGetKvisordScriptResponse, error) {
	rsp, err := c.RuntimeSecurityAPIGetKvisordScript(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuntimeSecurityAPIGetKvisordScriptResponse(rsp)
}

// InsightsAPIConfigureClusterSecuritySettingsWithBodyWithResponse request with arbitrary body returning *InsightsAPIConfigureClusterSecuritySettingsResponse
func (c *ClientWithResponses) InsightsAPIConfigureClusterSecuritySettingsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsightsAPIConfigureClusterSecuritySettingsResponse, error) {
	rsp, err := c.InsightsAPIConfigureClusterSecuritySettingsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIConfigureClusterSecuritySettingsResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIConfigureClusterSecuritySettingsWithResponse(ctx context.Context, id string, body InsightsAPIConfigureClusterSecuritySettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*InsightsAPIConfigureClusterSecuritySettingsResponse, error) {
	rsp, err := c.InsightsAPIConfigureClusterSecuritySettings(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIConfigureClusterSecuritySettingsResponse(rsp)
}

// SSOAPIListSSOConnectionsWithResponse request returning *SSOAPIListSSOConnectionsResponse
func (c *ClientWithResponses) SSOAPIListSSOConnectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SSOAPIListSSOConnectionsResponse, error) {
	rsp, err := c.SSOAPIListSSOConnections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIListSSOConnectionsResponse(rsp)
}

// SSOAPICreateSSOConnectionWithBodyWithResponse request with arbitrary body returning *SSOAPICreateSSOConnectionResponse
func (c *ClientWithResponses) SSOAPICreateSSOConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SSOAPICreateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPICreateSSOConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPICreateSSOConnectionResponse(rsp)
}

func (c *ClientWithResponses) SSOAPICreateSSOConnectionWithResponse(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SSOAPICreateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPICreateSSOConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPICreateSSOConnectionResponse(rsp)
}

// SSOAPIDeleteSSOConnectionWithResponse request returning *SSOAPIDeleteSSOConnectionResponse
func (c *ClientWithResponses) SSOAPIDeleteSSOConnectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SSOAPIDeleteSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIDeleteSSOConnection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIDeleteSSOConnectionResponse(rsp)
}

// SSOAPIGetSSOConnectionWithResponse request returning *SSOAPIGetSSOConnectionResponse
func (c *ClientWithResponses) SSOAPIGetSSOConnectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SSOAPIGetSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIGetSSOConnection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIGetSSOConnectionResponse(rsp)
}

// SSOAPIUpdateSSOConnectionWithBodyWithResponse request with arbitrary body returning *SSOAPIUpdateSSOConnectionResponse
func (c *ClientWithResponses) SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SSOAPIUpdateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIUpdateSSOConnectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIUpdateSSOConnectionResponse(rsp)
}

func (c *ClientWithResponses) SSOAPIUpdateSSOConnectionWithResponse(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SSOAPIUpdateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIUpdateSSOConnection(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIUpdateSSOConnectionResponse(rsp)
}

// ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse request returning *ScheduledRebalancingAPIListAvailableRebalancingTZResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIListAvailableRebalancingTZResponse(rsp)
}

// WorkloadOptimizationAPIGetAgentStatus2WithResponse request returning *WorkloadOptimizationAPIGetAgentStatus2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIGetAgentStatus2WithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetAgentStatus2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIGetAgentStatus2(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetAgentStatus2Response(rsp)
}

// WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse request returning *WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloadScalingPoliciesResponse(rsp)
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse
func (c *ClientWithResponses) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse(rsp)
}

// WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse request returning *WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx, clusterId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse(rsp)
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx, clusterId, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx, clusterId, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse(rsp)
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx, clusterId, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx, clusterId, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse(rsp)
}

// WorkloadOptimizationAPIListWorkloadEvents2WithResponse request returning *WorkloadOptimizationAPIListWorkloadEvents2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloadEvents2WithResponse(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEvents2Params, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloadEvents2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloadEvents2(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloadEvents2Response(rsp)
}

// WorkloadOptimizationAPIListWorkloads2WithResponse request returning *WorkloadOptimizationAPIListWorkloads2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloads2WithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIListWorkloads2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloads2(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloads2Response(rsp)
}

// WorkloadOptimizationAPIGetWorkload2WithResponse request returning *WorkloadOptimizationAPIGetWorkload2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIGetWorkload2WithResponse(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkload2Params, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetWorkload2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIGetWorkload2(ctx, clusterId, workloadId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetWorkload2Response(rsp)
}

// WorkloadOptimizationAPIUpdateWorkload2WithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIUpdateWorkload2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkload2WithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkload2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkload2WithBody(ctx, clusterId, workloadId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkload2Response(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkload2WithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkload2JSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIUpdateWorkload2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkload2(ctx, clusterId, workloadId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkload2Response(rsp)
}

// WorkloadOptimizationAPIGetInstallCmd2WithResponse request returning *WorkloadOptimizationAPIGetInstallCmd2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIGetInstallCmd2WithResponse(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmd2Params, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallCmd2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIGetInstallCmd2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetInstallCmd2Response(rsp)
}

// WorkloadOptimizationAPIGetInstallScript2WithResponse request returning *WorkloadOptimizationAPIGetInstallScript2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIGetInstallScript2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WorkloadOptimizationAPIGetInstallScript2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIGetInstallScript2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetInstallScript2Response(rsp)
}

// ParseAutoscalerAPIGetAgentScriptResponse parses an HTTP response from a AutoscalerAPIGetAgentScriptWithResponse call
func ParseAutoscalerAPIGetAgentScriptResponse(rsp *http.Response) (*AutoscalerAPIGetAgentScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetAgentScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAuditAPIListAuditEntriesResponse parses an HTTP response from a AuditAPIListAuditEntriesWithResponse call
func ParseAuditAPIListAuditEntriesResponse(rsp *http.Response) (*AuditAPIListAuditEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuditAPIListAuditEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuditV1beta1ListAuditEntriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginCallbackResponse parses an HTTP response from a LoginCallbackWithResponse call
func ParseLoginCallbackResponse(rsp *http.Response) (*LoginCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSamlAcsResponse parses an HTTP response from a SamlAcsWithResponse call
func ParseSamlAcsResponse(rsp *http.Response) (*SamlAcsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SamlAcsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSessionResponse parses an HTTP response from a GetSessionWithResponse call
func ParseGetSessionResponse(rsp *http.Response) (*GetSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIListAuthTokensResponse parses an HTTP response from a AuthTokenAPIListAuthTokensWithResponse call
func ParseAuthTokenAPIListAuthTokensResponse(rsp *http.Response) (*AuthTokenAPIListAuthTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIListAuthTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1ListAuthTokensResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPICreateAuthTokenResponse parses an HTTP response from a AuthTokenAPICreateAuthTokenWithResponse call
func ParseAuthTokenAPICreateAuthTokenResponse(rsp *http.Response) (*AuthTokenAPICreateAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPICreateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIDeleteAuthTokenResponse parses an HTTP response from a AuthTokenAPIDeleteAuthTokenWithResponse call
func ParseAuthTokenAPIDeleteAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIDeleteAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIDeleteAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1DeleteAuthTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIGetAuthTokenResponse parses an HTTP response from a AuthTokenAPIGetAuthTokenWithResponse call
func ParseAuthTokenAPIGetAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIGetAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIGetAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIUpdateAuthTokenResponse parses an HTTP response from a AuthTokenAPIUpdateAuthTokenWithResponse call
func ParseAuthTokenAPIUpdateAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIUpdateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBillingSsoResponse parses an HTTP response from a BillingSsoWithResponse call
func ParseBillingSsoResponse(rsp *http.Response) (*BillingSsoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingSsoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortalSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubscriptionResponse parses an HTTP response from a SubscriptionWithResponse call
func ParseSubscriptionResponse(rsp *http.Response) (*SubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubscriptionCheckoutResponse parses an HTTP response from a SubscriptionCheckoutWithResponse call
func ParseSubscriptionCheckoutResponse(rsp *http.Response) (*SubscriptionCheckoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscriptionCheckoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostedPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBillingAPIGetUsageReportResponse parses an HTTP response from a BillingAPIGetUsageReportWithResponse call
func ParseBillingAPIGetUsageReportResponse(rsp *http.Response) (*BillingAPIGetUsageReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingAPIGetUsageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingV1GetUsageReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetAgentStatusResponse parses an HTTP response from a WorkloadOptimizationAPIGetAgentStatusWithResponse call
func ParseWorkloadOptimizationAPIGetAgentStatusResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetAgentStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetAgentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetAgentStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseComponentsAPIIngestLogsResponse parses an HTTP response from a ComponentsAPIIngestLogsWithResponse call
func ParseComponentsAPIIngestLogsResponse(rsp *http.Response) (*ComponentsAPIIngestLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComponentsAPIIngestLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComponentsV1IngestLogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloadEventsResponse parses an HTTP response from a WorkloadOptimizationAPIListWorkloadEventsWithResponse call
func ParseWorkloadOptimizationAPIListWorkloadEventsResponse(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloadEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloadEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloadsResponse parses an HTTP response from a WorkloadOptimizationAPIListWorkloadsWithResponse call
func ParseWorkloadOptimizationAPIListWorkloadsResponse(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetWorkloadResponse parses an HTTP response from a WorkloadOptimizationAPIGetWorkloadWithResponse call
func ParseWorkloadOptimizationAPIGetWorkloadResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetWorkloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetWorkloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIUpdateWorkloadResponse parses an HTTP response from a WorkloadOptimizationAPIUpdateWorkloadWithResponse call
func ParseWorkloadOptimizationAPIUpdateWorkloadResponse(rsp *http.Response) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIUpdateWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1UpdateWorkloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse parses an HTTP response from a AllocationGroupAPIGetAllocationGroupCostTimedSummariesWithResponse call
func ParseAllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse(rsp *http.Response) (*AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetAllocationGroupCostTimedSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetAllocationGroupCostTimedSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetAllocationGroupCostSummariesResponse parses an HTTP response from a AllocationGroupAPIGetAllocationGroupCostSummariesWithResponse call
func ParseAllocationGroupAPIGetAllocationGroupCostSummariesResponse(rsp *http.Response) (*AllocationGroupAPIGetAllocationGroupCostSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetAllocationGroupCostSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetAllocationGroupCostSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIListAllocationGroupsResponse parses an HTTP response from a AllocationGroupAPIListAllocationGroupsWithResponse call
func ParseAllocationGroupAPIListAllocationGroupsResponse(rsp *http.Response) (*AllocationGroupAPIListAllocationGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIListAllocationGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1ListAllocationGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPICreateAllocationGroupResponse parses an HTTP response from a AllocationGroupAPICreateAllocationGroupWithResponse call
func ParseAllocationGroupAPICreateAllocationGroupResponse(rsp *http.Response) (*AllocationGroupAPICreateAllocationGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPICreateAllocationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1AllocationGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetAllocationGroupTotalCostTimedResponse parses an HTTP response from a AllocationGroupAPIGetAllocationGroupTotalCostTimedWithResponse call
func ParseAllocationGroupAPIGetAllocationGroupTotalCostTimedResponse(rsp *http.Response) (*AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetAllocationGroupTotalCostTimedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetAllocationGroupTotalCostTimedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse parses an HTTP response from a AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryWithResponse call
func ParseAllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse(rsp *http.Response) (*AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetCostAllocationGroupDataTransferSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetCostAllocationGroupDataTransferSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse parses an HTTP response from a AllocationGroupAPIGetAllocationGroupEfficiencySummaryWithResponse call
func ParseAllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse(rsp *http.Response) (*AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetAllocationGroupEfficiencySummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetAllocationGroupEfficiencySummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetCostAllocationGroupSummaryResponse parses an HTTP response from a AllocationGroupAPIGetCostAllocationGroupSummaryWithResponse call
func ParseAllocationGroupAPIGetCostAllocationGroupSummaryResponse(rsp *http.Response) (*AllocationGroupAPIGetCostAllocationGroupSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetCostAllocationGroupSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetCostAllocationGroupSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse parses an HTTP response from a AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsWithResponse call
func ParseAllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse(rsp *http.Response) (*AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetCostAllocationGroupDataTransferWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetCostAllocationGroupDataTransferWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIGetCostAllocationGroupWorkloadsResponse parses an HTTP response from a AllocationGroupAPIGetCostAllocationGroupWorkloadsWithResponse call
func ParseAllocationGroupAPIGetCostAllocationGroupWorkloadsResponse(rsp *http.Response) (*AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIGetCostAllocationGroupWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetCostAllocationGroupWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIDeleteAllocationGroupResponse parses an HTTP response from a AllocationGroupAPIDeleteAllocationGroupWithResponse call
func ParseAllocationGroupAPIDeleteAllocationGroupResponse(rsp *http.Response) (*AllocationGroupAPIDeleteAllocationGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIDeleteAllocationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1DeleteAllocationGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocationGroupAPIUpdateAllocationGroupResponse parses an HTTP response from a AllocationGroupAPIUpdateAllocationGroupWithResponse call
func ParseAllocationGroupAPIUpdateAllocationGroupResponse(rsp *http.Response) (*AllocationGroupAPIUpdateAllocationGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllocationGroupAPIUpdateAllocationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1AllocationGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClusterCostReportResponse parses an HTTP response from a ClusterReportAPIGetClusterCostReportWithResponse call
func ParseClusterReportAPIGetClusterCostReportResponse(rsp *http.Response) (*ClusterReportAPIGetClusterCostReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClusterCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadDataTransferCostResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadDataTransferCostWithResponse call
func ParseWorkloadReportAPIGetWorkloadDataTransferCostResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadDataTransferCostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadDataTransferCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadDataTransferCostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadDataTransferCost2Response parses an HTTP response from a WorkloadReportAPIGetWorkloadDataTransferCost2WithResponse call
func ParseWorkloadReportAPIGetWorkloadDataTransferCost2Response(rsp *http.Response) (*WorkloadReportAPIGetWorkloadDataTransferCost2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadDataTransferCost2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadDataTransferCostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClusterEfficiencyReportResponse parses an HTTP response from a ClusterReportAPIGetClusterEfficiencyReportWithResponse call
func ParseClusterReportAPIGetClusterEfficiencyReportResponse(rsp *http.Response) (*ClusterReportAPIGetClusterEfficiencyReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClusterEfficiencyReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterEfficiencyReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetSavingsRecommendationResponse parses an HTTP response from a ClusterReportAPIGetSavingsRecommendationWithResponse call
func ParseClusterReportAPIGetSavingsRecommendationResponse(rsp *http.Response) (*ClusterReportAPIGetSavingsRecommendationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetSavingsRecommendationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetSavingsRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClusterCostHistoryResponse parses an HTTP response from a ClusterReportAPIGetClusterCostHistoryWithResponse call
func ParseClusterReportAPIGetClusterCostHistoryResponse(rsp *http.Response) (*ClusterReportAPIGetClusterCostHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClusterCostHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterCostHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportConfigurationAPIGetGroupingConfigResponse parses an HTTP response from a ReportConfigurationAPIGetGroupingConfigWithResponse call
func ParseReportConfigurationAPIGetGroupingConfigResponse(rsp *http.Response) (*ReportConfigurationAPIGetGroupingConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportConfigurationAPIGetGroupingConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetGroupingConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportConfigurationAPIUpsertGroupingConfigResponse parses an HTTP response from a ReportConfigurationAPIUpsertGroupingConfigWithResponse call
func ParseReportConfigurationAPIUpsertGroupingConfigResponse(rsp *http.Response) (*ReportConfigurationAPIUpsertGroupingConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportConfigurationAPIUpsertGroupingConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1UpsertGroupingConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse parses an HTTP response from a NamespaceReportAPIGetClusterNamespaceCostReportSummariesWithResponse call
func ParseNamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse(rsp *http.Response) (*NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamespaceReportAPIGetClusterNamespaceCostReportSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterNamespaceCostReportSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNamespaceReportAPIGetClusterNamespaceDataTransferCostResponse parses an HTTP response from a NamespaceReportAPIGetClusterNamespaceDataTransferCostWithResponse call
func ParseNamespaceReportAPIGetClusterNamespaceDataTransferCostResponse(rsp *http.Response) (*NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamespaceReportAPIGetClusterNamespaceDataTransferCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterNamespaceDataTransferCostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse parses an HTTP response from a NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostWithResponse call
func ParseNamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse(rsp *http.Response) (*NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamespaceReportAPIGetClusterNamespaceDataTransferTimedTotalCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterNamespaceDataTransferTimedTotalCostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNamespaceReportAPIGetClusterNamespaceCostReportResponse parses an HTTP response from a NamespaceReportAPIGetClusterNamespaceCostReportWithResponse call
func ParseNamespaceReportAPIGetClusterNamespaceCostReportResponse(rsp *http.Response) (*NamespaceReportAPIGetClusterNamespaceCostReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamespaceReportAPIGetClusterNamespaceCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterNamespaceCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNamespaceReportAPIGetSingleNamespaceCostReportResponse parses an HTTP response from a NamespaceReportAPIGetSingleNamespaceCostReportWithResponse call
func ParseNamespaceReportAPIGetSingleNamespaceCostReportResponse(rsp *http.Response) (*NamespaceReportAPIGetSingleNamespaceCostReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamespaceReportAPIGetSingleNamespaceCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetSingleNamespaceCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetSingleWorkloadCostReportResponse parses an HTTP response from a WorkloadReportAPIGetSingleWorkloadCostReportWithResponse call
func ParseWorkloadReportAPIGetSingleWorkloadCostReportResponse(rsp *http.Response) (*WorkloadReportAPIGetSingleWorkloadCostReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetSingleWorkloadCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetSingleWorkloadCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetSingleWorkloadDataTransferCostResponse parses an HTTP response from a WorkloadReportAPIGetSingleWorkloadDataTransferCostWithResponse call
func ParseWorkloadReportAPIGetSingleWorkloadDataTransferCostResponse(rsp *http.Response) (*WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetSingleWorkloadDataTransferCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetSingleWorkloadDataTransferCostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse parses an HTTP response from a WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameWithResponse call
func ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse(rsp *http.Response) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetClusterWorkloadEfficiencyReportByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadEfficiencyReportByNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryWithResponse call
func ParseWorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadTrafficDestinationsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadTrafficDestinationsHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadTrafficDestinationsResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadTrafficDestinationsWithResponse call
func ParseWorkloadReportAPIGetWorkloadTrafficDestinationsResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadTrafficDestinationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadTrafficDestinationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadTrafficDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportConfigurationAPIGetReportingCapabilitiesResponse parses an HTTP response from a ReportConfigurationAPIGetReportingCapabilitiesWithResponse call
func ParseReportConfigurationAPIGetReportingCapabilitiesResponse(rsp *http.Response) (*ReportConfigurationAPIGetReportingCapabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportConfigurationAPIGetReportingCapabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetReportingCapabilitiesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClusterResourceUsageResponse parses an HTTP response from a ClusterReportAPIGetClusterResourceUsageWithResponse call
func ParseClusterReportAPIGetClusterResourceUsageResponse(rsp *http.Response) (*ClusterReportAPIGetClusterResourceUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClusterResourceUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterResourceUsageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse parses an HTTP response from a WorkloadReportAPIGetClusterWorkloadRightsizingPatchWithResponse call
func ParseWorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse(rsp *http.Response) (*WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetClusterWorkloadRightsizingPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClusterReportAPIGetRightsizingSummaryResponse parses an HTTP response from a ClusterReportAPIGetRightsizingSummaryWithResponse call
func ParseClusterReportAPIGetRightsizingSummaryResponse(rsp *http.Response) (*ClusterReportAPIGetRightsizingSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetRightsizingSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetRightsizingSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClusterSavingsReportResponse parses an HTTP response from a ClusterReportAPIGetClusterSavingsReportWithResponse call
func ParseClusterReportAPIGetClusterSavingsReportResponse(rsp *http.Response) (*ClusterReportAPIGetClusterSavingsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClusterSavingsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterSavingsReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClusterSummaryResponse parses an HTTP response from a ClusterReportAPIGetClusterSummaryWithResponse call
func ParseClusterReportAPIGetClusterSummaryResponse(rsp *http.Response) (*ClusterReportAPIGetClusterSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClusterSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadCostSummariesResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadCostSummariesWithResponse call
func ParseWorkloadReportAPIGetWorkloadCostSummariesResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadCostSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadCostSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadCostSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetClusterWorkloadReportResponse parses an HTTP response from a WorkloadReportAPIGetClusterWorkloadReportWithResponse call
func ParseWorkloadReportAPIGetClusterWorkloadReportResponse(rsp *http.Response) (*WorkloadReportAPIGetClusterWorkloadReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetClusterWorkloadReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetClusterWorkloadReport2Response parses an HTTP response from a WorkloadReportAPIGetClusterWorkloadReport2WithResponse call
func ParseWorkloadReportAPIGetClusterWorkloadReport2Response(rsp *http.Response) (*WorkloadReportAPIGetClusterWorkloadReport2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetClusterWorkloadReport2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse parses an HTTP response from a WorkloadReportAPIGetClusterWorkloadEfficiencyReportWithResponse call
func ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse(rsp *http.Response) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetClusterWorkloadEfficiencyReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadEfficiencyReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response parses an HTTP response from a WorkloadReportAPIGetClusterWorkloadEfficiencyReport2WithResponse call
func ParseWorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response(rsp *http.Response) (*WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetClusterWorkloadEfficiencyReport2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadEfficiencyReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetClusterWorkloadLabelsResponse parses an HTTP response from a WorkloadReportAPIGetClusterWorkloadLabelsWithResponse call
func ParseWorkloadReportAPIGetClusterWorkloadLabelsResponse(rsp *http.Response) (*WorkloadReportAPIGetClusterWorkloadLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetClusterWorkloadLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetNamespacesForClustersResponse parses an HTTP response from a WorkloadReportAPIGetNamespacesForClustersWithResponse call
func ParseWorkloadReportAPIGetNamespacesForClustersResponse(rsp *http.Response) (*WorkloadReportAPIGetNamespacesForClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetNamespacesForClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetNamespacesForClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeReportAPIGetNodeLabelNamesResponse parses an HTTP response from a NodeReportAPIGetNodeLabelNamesWithResponse call
func ParseNodeReportAPIGetNodeLabelNamesResponse(rsp *http.Response) (*NodeReportAPIGetNodeLabelNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeReportAPIGetNodeLabelNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetNodeLabelNamesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeReportAPIGetNodeLabelValuesResponse parses an HTTP response from a NodeReportAPIGetNodeLabelValuesWithResponse call
func ParseNodeReportAPIGetNodeLabelValuesResponse(rsp *http.Response) (*NodeReportAPIGetNodeLabelValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeReportAPIGetNodeLabelValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetNodeLabelValuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetOrganizationClustersCostReportResponse parses an HTTP response from a ClusterReportAPIGetOrganizationClustersCostReportWithResponse call
func ParseClusterReportAPIGetOrganizationClustersCostReportResponse(rsp *http.Response) (*ClusterReportAPIGetOrganizationClustersCostReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetOrganizationClustersCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetOrganizationClustersCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClustersSummaryResponse parses an HTTP response from a ClusterReportAPIGetClustersSummaryWithResponse call
func ParseClusterReportAPIGetClustersSummaryResponse(rsp *http.Response) (*ClusterReportAPIGetClustersSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClustersSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClustersSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClustersCostReportResponse parses an HTTP response from a ClusterReportAPIGetClustersCostReportWithResponse call
func ParseClusterReportAPIGetClustersCostReportResponse(rsp *http.Response) (*ClusterReportAPIGetClustersCostReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClustersCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClustersCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadLabelNamesResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadLabelNamesWithResponse call
func ParseWorkloadReportAPIGetWorkloadLabelNamesResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadLabelNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadLabelNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadLabelNamesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadLabelValuesResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadLabelValuesWithResponse call
func ParseWorkloadReportAPIGetWorkloadLabelValuesResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadLabelValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadLabelValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadLabelValuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadLabelValuesDeprecatedWithResponse call
func ParseWorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadLabelValuesDeprecatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadLabelValuesDeprecatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadReportAPIGetWorkloadsMetadataResponse parses an HTTP response from a WorkloadReportAPIGetWorkloadsMetadataWithResponse call
func ParseWorkloadReportAPIGetWorkloadsMetadataResponse(rsp *http.Response) (*WorkloadReportAPIGetWorkloadsMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadReportAPIGetWorkloadsMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetWorkloadsMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDedicatedInstanceAPIListDedicatedInstancesResponse parses an HTTP response from a DedicatedInstanceAPIListDedicatedInstancesWithResponse call
func ParseDedicatedInstanceAPIListDedicatedInstancesResponse(rsp *http.Response) (*DedicatedInstanceAPIListDedicatedInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DedicatedInstanceAPIListDedicatedInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DedicatedinstanceV1beta1ListDedicatedInstancesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFeaturesAPIListResponse parses an HTTP response from a FeaturesAPIListWithResponse call
func ParseFeaturesAPIListResponse(rsp *http.Response) (*FeaturesAPIListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FeaturesAPIListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiFeaturesV1ListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFeaturesAPIResolveResponse parses an HTTP response from a FeaturesAPIResolveWithResponse call
func ParseFeaturesAPIResolveResponse(rsp *http.Response) (*FeaturesAPIResolveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FeaturesAPIResolveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiFeaturesV1ResolveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryBlacklistAPIListBlacklistsResponse parses an HTTP response from a InventoryBlacklistAPIListBlacklistsWithResponse call
func ParseInventoryBlacklistAPIListBlacklistsResponse(rsp *http.Response) (*InventoryBlacklistAPIListBlacklistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryBlacklistAPIListBlacklistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryblacklistV1ListBlacklistsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryBlacklistAPIAddBlacklistResponse parses an HTTP response from a InventoryBlacklistAPIAddBlacklistWithResponse call
func ParseInventoryBlacklistAPIAddBlacklistResponse(rsp *http.Response) (*InventoryBlacklistAPIAddBlacklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryBlacklistAPIAddBlacklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryblacklistV1AddBlacklistResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryBlacklistAPIRemoveBlacklistResponse parses an HTTP response from a InventoryBlacklistAPIRemoveBlacklistWithResponse call
func ParseInventoryBlacklistAPIRemoveBlacklistResponse(rsp *http.Response) (*InventoryBlacklistAPIRemoveBlacklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryBlacklistAPIRemoveBlacklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryblacklistV1RemoveBlacklistResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIListInvitationsResponse parses an HTTP response from a UsersAPIListInvitationsWithResponse call
func ParseUsersAPIListInvitationsResponse(rsp *http.Response) (*UsersAPIListInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIListInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ListInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPICreateInvitationsResponse parses an HTTP response from a UsersAPICreateInvitationsWithResponse call
func ParseUsersAPICreateInvitationsResponse(rsp *http.Response) (*UsersAPICreateInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPICreateInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1CreateInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIDeleteInvitationResponse parses an HTTP response from a UsersAPIDeleteInvitationWithResponse call
func ParseUsersAPIDeleteInvitationResponse(rsp *http.Response) (*UsersAPIDeleteInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIDeleteInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1DeleteInvitationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIClaimInvitationResponse parses an HTTP response from a UsersAPIClaimInvitationWithResponse call
func ParseUsersAPIClaimInvitationResponse(rsp *http.Response) (*UsersAPIClaimInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIClaimInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ClaimInvitationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIPollClusterActionsResponse parses an HTTP response from a ClusterActionsAPIPollClusterActionsWithResponse call
func ParseClusterActionsAPIPollClusterActionsResponse(rsp *http.Response) (*ClusterActionsAPIPollClusterActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIPollClusterActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1PollClusterActionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIIngestLogsResponse parses an HTTP response from a ClusterActionsAPIIngestLogsWithResponse call
func ParseClusterActionsAPIIngestLogsResponse(rsp *http.Response) (*ClusterActionsAPIIngestLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIIngestLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1IngestLogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIAckClusterActionResponse parses an HTTP response from a ClusterActionsAPIAckClusterActionWithResponse call
func ParseClusterActionsAPIAckClusterActionResponse(rsp *http.Response) (*ClusterActionsAPIAckClusterActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIAckClusterActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1AckClusterActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlgorithmStatsAPISubmitResponse parses an HTTP response from a AlgorithmStatsAPISubmitWithResponse call
func ParseAlgorithmStatsAPISubmitResponse(rsp *http.Response) (*AlgorithmStatsAPISubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlgorithmStatsAPISubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAlgorithmstatsV1beta1SubmitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportConfigurationAPIGetEgressdScriptResponse parses an HTTP response from a ReportConfigurationAPIGetEgressdScriptWithResponse call
func ParseReportConfigurationAPIGetEgressdScriptResponse(rsp *http.Response) (*ReportConfigurationAPIGetEgressdScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportConfigurationAPIGetEgressdScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetEgressdScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvictorAPIGetAdvancedConfigResponse parses an HTTP response from a EvictorAPIGetAdvancedConfigWithResponse call
func ParseEvictorAPIGetAdvancedConfigResponse(rsp *http.Response) (*EvictorAPIGetAdvancedConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvictorAPIGetAdvancedConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiEvictorV1AdvancedConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvictorAPIUpsertAdvancedConfigResponse parses an HTTP response from a EvictorAPIUpsertAdvancedConfigWithResponse call
func ParseEvictorAPIUpsertAdvancedConfigResponse(rsp *http.Response) (*EvictorAPIUpsertAdvancedConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvictorAPIUpsertAdvancedConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiEvictorV1AdvancedConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIFilterInstanceTypesResponse parses an HTTP response from a NodeTemplatesAPIFilterInstanceTypesWithResponse call
func ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp *http.Response) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIFilterInstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1FilterInstanceTypesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIGenerateNodeTemplatesResponse parses an HTTP response from a NodeTemplatesAPIGenerateNodeTemplatesWithResponse call
func ParseNodeTemplatesAPIGenerateNodeTemplatesResponse(rsp *http.Response) (*NodeTemplatesAPIGenerateNodeTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIGenerateNodeTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1GenerateNodeTemplatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse parses an HTTP response from a AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse call
func ParseAutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse(rsp *http.Response) (*AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetKarpenterMigrationIntentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse parses an HTTP response from a AutoscalerAPIMigrateKarpenterDefinitionsWithResponse call
func ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse(rsp *http.Response) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIMigrateKarpenterDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1MigrateKarpenterDefinitionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIListConfigurationsResponse parses an HTTP response from a NodeConfigurationAPIListConfigurationsWithResponse call
func ParseNodeConfigurationAPIListConfigurationsResponse(rsp *http.Response) (*NodeConfigurationAPIListConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIListConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1ListConfigurationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPICreateConfigurationResponse parses an HTTP response from a NodeConfigurationAPICreateConfigurationWithResponse call
func ParseNodeConfigurationAPICreateConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPICreateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIGetSuggestedConfigurationResponse parses an HTTP response from a NodeConfigurationAPIGetSuggestedConfigurationWithResponse call
func ParseNodeConfigurationAPIGetSuggestedConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIGetSuggestedConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIGetSuggestedConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1GetSuggestedConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIDeleteConfigurationResponse parses an HTTP response from a NodeConfigurationAPIDeleteConfigurationWithResponse call
func ParseNodeConfigurationAPIDeleteConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIDeleteConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIDeleteConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1DeleteConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIGetConfigurationResponse parses an HTTP response from a NodeConfigurationAPIGetConfigurationWithResponse call
func ParseNodeConfigurationAPIGetConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIGetConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIGetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIUpdateConfigurationResponse parses an HTTP response from a NodeConfigurationAPIUpdateConfigurationWithResponse call
func ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIUpdateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPISetDefaultResponse parses an HTTP response from a NodeConfigurationAPISetDefaultWithResponse call
func ParseNodeConfigurationAPISetDefaultResponse(rsp *http.Response) (*NodeConfigurationAPISetDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPISetDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIGetClusterNodeConstraintsResponse parses an HTTP response from a PoliciesAPIGetClusterNodeConstraintsWithResponse call
func ParsePoliciesAPIGetClusterNodeConstraintsResponse(rsp *http.Response) (*PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIGetClusterNodeConstraintsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1GetClusterNodeConstraintsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIListNodeTemplatesResponse parses an HTTP response from a NodeTemplatesAPIListNodeTemplatesWithResponse call
func ParseNodeTemplatesAPIListNodeTemplatesResponse(rsp *http.Response) (*NodeTemplatesAPIListNodeTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIListNodeTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1ListNodeTemplatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPICreateNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPICreateNodeTemplateWithResponse call
func ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPICreateNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1NodeTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIDeleteNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPIDeleteNodeTemplateWithResponse call
func ParseNodeTemplatesAPIDeleteNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIDeleteNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1DeleteNodeTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIUpdateNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPIUpdateNodeTemplateWithResponse call
func ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIUpdateNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1NodeTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIGetClusterPoliciesResponse parses an HTTP response from a PoliciesAPIGetClusterPoliciesWithResponse call
func ParsePoliciesAPIGetClusterPoliciesResponse(rsp *http.Response) (*PoliciesAPIGetClusterPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIGetClusterPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1Policies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIUpsertClusterPoliciesResponse parses an HTTP response from a PoliciesAPIUpsertClusterPoliciesWithResponse call
func ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp *http.Response) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIUpsertClusterPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1Policies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetProblematicNodesResponse parses an HTTP response from a AutoscalerAPIGetProblematicNodesWithResponse call
func ParseAutoscalerAPIGetProblematicNodesResponse(rsp *http.Response) (*AutoscalerAPIGetProblematicNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetProblematicNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetProblematicNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetProblematicWorkloadsResponse parses an HTTP response from a AutoscalerAPIGetProblematicWorkloadsWithResponse call
func ParseAutoscalerAPIGetProblematicWorkloadsResponse(rsp *http.Response) (*AutoscalerAPIGetProblematicWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetProblematicWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetProblematicWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetRebalancedWorkloadsResponse parses an HTTP response from a AutoscalerAPIGetRebalancedWorkloadsWithResponse call
func ParseAutoscalerAPIGetRebalancedWorkloadsResponse(rsp *http.Response) (*AutoscalerAPIGetRebalancedWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetRebalancedWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIListRebalancingJobsResponse parses an HTTP response from a ScheduledRebalancingAPIListRebalancingJobsWithResponse call
func ParseScheduledRebalancingAPIListRebalancingJobsResponse(rsp *http.Response) (*ScheduledRebalancingAPIListRebalancingJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIListRebalancingJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1ListRebalancingJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPICreateRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPICreateRebalancingJobWithResponse call
func ParseScheduledRebalancingAPICreateRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPICreateRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIDeleteRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPIDeleteRebalancingJobWithResponse call
func ParseScheduledRebalancingAPIDeleteRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPIDeleteRebalancingJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIDeleteRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1DeleteRebalancingJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIGetRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPIGetRebalancingJobWithResponse call
func ParseScheduledRebalancingAPIGetRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPIGetRebalancingJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIGetRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIUpdateRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPIUpdateRebalancingJobWithResponse call
func ParseScheduledRebalancingAPIUpdateRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIUpdateRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIListRebalancingPlansResponse parses an HTTP response from a AutoscalerAPIListRebalancingPlansWithResponse call
func ParseAutoscalerAPIListRebalancingPlansResponse(rsp *http.Response) (*AutoscalerAPIListRebalancingPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIListRebalancingPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1ListRebalancingPlansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGenerateRebalancingPlanResponse parses an HTTP response from a AutoscalerAPIGenerateRebalancingPlanWithResponse call
func ParseAutoscalerAPIGenerateRebalancingPlanResponse(rsp *http.Response) (*AutoscalerAPIGenerateRebalancingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGenerateRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CastaiAutoscalerV1beta1GenerateRebalancingPlanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetRebalancingPlanResponse parses an HTTP response from a AutoscalerAPIGetRebalancingPlanWithResponse call
func ParseAutoscalerAPIGetRebalancingPlanResponse(rsp *http.Response) (*AutoscalerAPIGetRebalancingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1RebalancingPlanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIExecuteRebalancingPlanResponse parses an HTTP response from a AutoscalerAPIExecuteRebalancingPlanWithResponse call
func ParseAutoscalerAPIExecuteRebalancingPlanResponse(rsp *http.Response) (*AutoscalerAPIExecuteRebalancingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIExecuteRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CastaiAutoscalerV1beta1RebalancingPlanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIPreviewRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1PreviewRebalancingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetClusterSettingsResponse parses an HTTP response from a AutoscalerAPIGetClusterSettingsWithResponse call
func ParseAutoscalerAPIGetClusterSettingsResponse(rsp *http.Response) (*AutoscalerAPIGetClusterSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetClusterSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetClusterSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterReportAPIGetClusterUnscheduledPodsResponse parses an HTTP response from a ClusterReportAPIGetClusterUnscheduledPodsWithResponse call
func ParseClusterReportAPIGetClusterUnscheduledPodsResponse(rsp *http.Response) (*ClusterReportAPIGetClusterUnscheduledPodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterReportAPIGetClusterUnscheduledPodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterUnscheduledPodsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetClusterWorkloadsResponse parses an HTTP response from a AutoscalerAPIGetClusterWorkloadsWithResponse call
func ParseAutoscalerAPIGetClusterWorkloadsResponse(rsp *http.Response) (*AutoscalerAPIGetClusterWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetClusterWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetClusterWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListClustersResponse parses an HTTP response from a ExternalClusterAPIListClustersWithResponse call
func ParseExternalClusterAPIListClustersResponse(rsp *http.Response) (*ExternalClusterAPIListClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIRegisterClusterResponse parses an HTTP response from a ExternalClusterAPIRegisterClusterWithResponse call
func ParseExternalClusterAPIRegisterClusterResponse(rsp *http.Response) (*ExternalClusterAPIRegisterClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIRegisterClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOperationsAPIGetOperationResponse parses an HTTP response from a OperationsAPIGetOperationWithResponse call
func ParseOperationsAPIGetOperationResponse(rsp *http.Response) (*OperationsAPIGetOperationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsAPIGetOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiOperationsV1beta1Operation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteClusterResponse parses an HTTP response from a ExternalClusterAPIDeleteClusterWithResponse call
func ParseExternalClusterAPIDeleteClusterResponse(rsp *http.Response) (*ExternalClusterAPIDeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetClusterResponse parses an HTTP response from a ExternalClusterAPIGetClusterWithResponse call
func ParseExternalClusterAPIGetClusterResponse(rsp *http.Response) (*ExternalClusterAPIGetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterWithResponse call
func ParseExternalClusterAPIUpdateClusterResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPIGetAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPIGetAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPICreateAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPICreateAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetAssumeRoleUserResponse parses an HTTP response from a ExternalClusterAPIGetAssumeRoleUserWithResponse call
func ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp *http.Response) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetAssumeRoleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetAssumeRoleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCleanupScriptResponse parses an HTTP response from a ExternalClusterAPIGetCleanupScriptWithResponse call
func ParseExternalClusterAPIGetCleanupScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCleanupScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCleanupScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCleanupScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCredentialsScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDisconnectClusterResponse parses an HTTP response from a ExternalClusterAPIDisconnectClusterWithResponse call
func ParseExternalClusterAPIDisconnectClusterResponse(rsp *http.Response) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDisconnectClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIHandleCloudEventResponse parses an HTTP response from a ExternalClusterAPIHandleCloudEventWithResponse call
func ParseExternalClusterAPIHandleCloudEventResponse(rsp *http.Response) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIHandleCloudEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1HandleCloudEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListNodesResponse parses an HTTP response from a ExternalClusterAPIListNodesWithResponse call
func ParseExternalClusterAPIListNodesResponse(rsp *http.Response) (*ExternalClusterAPIListNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIAddNodeResponse parses an HTTP response from a ExternalClusterAPIAddNodeWithResponse call
func ParseExternalClusterAPIAddNodeResponse(rsp *http.Response) (*ExternalClusterAPIAddNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIAddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1AddNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteNodeResponse parses an HTTP response from a ExternalClusterAPIDeleteNodeWithResponse call
func ParseExternalClusterAPIDeleteNodeResponse(rsp *http.Response) (*ExternalClusterAPIDeleteNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetNodeResponse parses an HTTP response from a ExternalClusterAPIGetNodeWithResponse call
func ParseExternalClusterAPIGetNodeResponse(rsp *http.Response) (*ExternalClusterAPIGetNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDrainNodeResponse parses an HTTP response from a ExternalClusterAPIDrainNodeWithResponse call
func ParseExternalClusterAPIDrainNodeResponse(rsp *http.Response) (*ExternalClusterAPIDrainNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDrainNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DrainNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIReconcileClusterResponse parses an HTTP response from a ExternalClusterAPIReconcileClusterWithResponse call
func ParseExternalClusterAPIReconcileClusterResponse(rsp *http.Response) (*ExternalClusterAPIReconcileClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIReconcileClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ReconcileClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterTagsResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterTagsWithResponse call
func ParseExternalClusterAPIUpdateClusterTagsResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1UpdateClusterTagsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateClusterTokenResponse parses an HTTP response from a ExternalClusterAPICreateClusterTokenWithResponse call
func ParseExternalClusterAPICreateClusterTokenResponse(rsp *http.Response) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateClusterTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateClusterTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse parses an HTTP response from a OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportWithResponse call
func ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse(rsp *http.Response) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysSavingsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetChatCompletionsAPIKeysSavingsReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse parses an HTTP response from a OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportWithResponse call
func ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse(rsp *http.Response) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenAILLMOptimizationAPIGetChatCompletionsAPIKeysRecommendationsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetChatCompletionsRecommendationsReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse parses an HTTP response from a OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportWithResponse call
func ParseOpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse(rsp *http.Response) (*OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenAILLMOptimizationAPIGetChatCompletionsAPIKeyUsageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetChatCompletionsAPIKeyUsageReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse parses an HTTP response from a OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportWithResponse call
func ParseOpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse(rsp *http.Response) (*OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenAILLMOptimizationAPIGetChatCompletionsCategoryRecommendationsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetChatCompletionsCategoryRecommendationsReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse parses an HTTP response from a OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportWithResponse call
func ParseOpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse(rsp *http.Response) (*OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenAILLMOptimizationAPIGetChatCompletionsCategoryUsageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetChatCompletionsCategoryUsageReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse parses an HTTP response from a OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportWithResponse call
func ParseOpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse(rsp *http.Response) (*OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenAILLMOptimizationAPIGetChatCompletionsRecommendationsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetChatCompletionsRecommendationsReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse parses an HTTP response from a OpenAILLMOptimizationAPIGetChatCompletionsUsageReportWithResponse call
func ParseOpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse(rsp *http.Response) (*OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenAILLMOptimizationAPIGetChatCompletionsUsageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetChatCompletionsUsageReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLLMSettingsAPIGetSettingsResponse parses an HTTP response from a LLMSettingsAPIGetSettingsWithResponse call
func ParseLLMSettingsAPIGetSettingsResponse(rsp *http.Response) (*LLMSettingsAPIGetSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LLMSettingsAPIGetSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1GetSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLLMSettingsAPIUpsertSettingsResponse parses an HTTP response from a LLMSettingsAPIUpsertSettingsWithResponse call
func ParseLLMSettingsAPIUpsertSettingsResponse(rsp *http.Response) (*LLMSettingsAPIUpsertSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LLMSettingsAPIUpsertSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LlmoptimizationV1UpsertSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPICurrentUserProfileResponse parses an HTTP response from a UsersAPICurrentUserProfileWithResponse call
func ParseUsersAPICurrentUserProfileResponse(rsp *http.Response) (*UsersAPICurrentUserProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPICurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1CurrentUserProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIUpdateCurrentUserProfileResponse parses an HTTP response from a UsersAPIUpdateCurrentUserProfileWithResponse call
func ParseUsersAPIUpdateCurrentUserProfileResponse(rsp *http.Response) (*UsersAPIUpdateCurrentUserProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIUpdateCurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportMetricsAPIGetNodeTemplatePromMetricsResponse parses an HTTP response from a ReportMetricsAPIGetNodeTemplatePromMetricsWithResponse call
func ParseReportMetricsAPIGetNodeTemplatePromMetricsResponse(rsp *http.Response) (*ReportMetricsAPIGetNodeTemplatePromMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportMetricsAPIGetNodeTemplatePromMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportMetricsAPIGetWorkloadPromMetricsResponse parses an HTTP response from a ReportMetricsAPIGetWorkloadPromMetricsWithResponse call
func ParseReportMetricsAPIGetWorkloadPromMetricsResponse(rsp *http.Response) (*ReportMetricsAPIGetWorkloadPromMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportMetricsAPIGetWorkloadPromMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportMetricsAPIGetPromMetricsResponse parses an HTTP response from a ReportMetricsAPIGetPromMetricsWithResponse call
func ParseReportMetricsAPIGetPromMetricsResponse(rsp *http.Response) (*ReportMetricsAPIGetPromMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportMetricsAPIGetPromMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNotificationAPIListNotificationsResponse parses an HTTP response from a NotificationAPIListNotificationsWithResponse call
func ParseNotificationAPIListNotificationsResponse(rsp *http.Response) (*NotificationAPIListNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIListNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1ListNotificationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIAckNotificationsResponse parses an HTTP response from a NotificationAPIAckNotificationsWithResponse call
func ParseNotificationAPIAckNotificationsResponse(rsp *http.Response) (*NotificationAPIAckNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIAckNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1AckNotificationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIListWebhookCategoriesResponse parses an HTTP response from a NotificationAPIListWebhookCategoriesWithResponse call
func ParseNotificationAPIListWebhookCategoriesResponse(rsp *http.Response) (*NotificationAPIListWebhookCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIListWebhookCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1ListWebhookCategoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIListWebhookConfigsResponse parses an HTTP response from a NotificationAPIListWebhookConfigsWithResponse call
func ParseNotificationAPIListWebhookConfigsResponse(rsp *http.Response) (*NotificationAPIListWebhookConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIListWebhookConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1ListWebhookConfigsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPICreateWebhookConfigResponse parses an HTTP response from a NotificationAPICreateWebhookConfigWithResponse call
func ParseNotificationAPICreateWebhookConfigResponse(rsp *http.Response) (*NotificationAPICreateWebhookConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPICreateWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1WebhookConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIDeleteWebhookConfigResponse parses an HTTP response from a NotificationAPIDeleteWebhookConfigWithResponse call
func ParseNotificationAPIDeleteWebhookConfigResponse(rsp *http.Response) (*NotificationAPIDeleteWebhookConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIDeleteWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1DeleteWebhookConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIGetWebhookConfigResponse parses an HTTP response from a NotificationAPIGetWebhookConfigWithResponse call
func ParseNotificationAPIGetWebhookConfigResponse(rsp *http.Response) (*NotificationAPIGetWebhookConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIGetWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1WebhookConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIUpdateWebhookConfigResponse parses an HTTP response from a NotificationAPIUpdateWebhookConfigWithResponse call
func ParseNotificationAPIUpdateWebhookConfigResponse(rsp *http.Response) (*NotificationAPIUpdateWebhookConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIUpdateWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1WebhookConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIGetNotificationResponse parses an HTTP response from a NotificationAPIGetNotificationWithResponse call
func ParseNotificationAPIGetNotificationResponse(rsp *http.Response) (*NotificationAPIGetNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIGetNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1Notification
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIListOrganizationsResponse parses an HTTP response from a UsersAPIListOrganizationsWithResponse call
func ParseUsersAPIListOrganizationsResponse(rsp *http.Response) (*UsersAPIListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ListOrganizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPICreateOrganizationResponse parses an HTTP response from a UsersAPICreateOrganizationWithResponse call
func ParseUsersAPICreateOrganizationResponse(rsp *http.Response) (*UsersAPICreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPICreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetOrganizationReservationsBalanceResponse parses an HTTP response from a InventoryAPIGetOrganizationReservationsBalanceWithResponse call
func ParseInventoryAPIGetOrganizationReservationsBalanceResponse(rsp *http.Response) (*InventoryAPIGetOrganizationReservationsBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetOrganizationReservationsBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetOrganizationReservationsBalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetOrganizationResourceUsageResponse parses an HTTP response from a InventoryAPIGetOrganizationResourceUsageWithResponse call
func ParseInventoryAPIGetOrganizationResourceUsageResponse(rsp *http.Response) (*InventoryAPIGetOrganizationResourceUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetOrganizationResourceUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetOrganizationResourceUsageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIDeleteOrganizationResponse parses an HTTP response from a UsersAPIDeleteOrganizationWithResponse call
func ParseUsersAPIDeleteOrganizationResponse(rsp *http.Response) (*UsersAPIDeleteOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIDeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1DeleteOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIGetOrganizationResponse parses an HTTP response from a UsersAPIGetOrganizationWithResponse call
func ParseUsersAPIGetOrganizationResponse(rsp *http.Response) (*UsersAPIGetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIGetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIEditOrganizationResponse parses an HTTP response from a UsersAPIEditOrganizationWithResponse call
func ParseUsersAPIEditOrganizationResponse(rsp *http.Response) (*UsersAPIEditOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIEditOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPISyncClusterResourcesResponse parses an HTTP response from a InventoryAPISyncClusterResourcesWithResponse call
func ParseInventoryAPISyncClusterResourcesResponse(rsp *http.Response) (*InventoryAPISyncClusterResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPISyncClusterResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetReservationsResponse parses an HTTP response from a InventoryAPIGetReservationsWithResponse call
func ParseInventoryAPIGetReservationsResponse(rsp *http.Response) (*InventoryAPIGetReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetReservationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIAddReservationResponse parses an HTTP response from a InventoryAPIAddReservationWithResponse call
func ParseInventoryAPIAddReservationResponse(rsp *http.Response) (*InventoryAPIAddReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIAddReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1AddReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetReservationsBalanceResponse parses an HTTP response from a InventoryAPIGetReservationsBalanceWithResponse call
func ParseInventoryAPIGetReservationsBalanceResponse(rsp *http.Response) (*InventoryAPIGetReservationsBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetReservationsBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetReservationsBalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIOverwriteReservationsResponse parses an HTTP response from a InventoryAPIOverwriteReservationsWithResponse call
func ParseInventoryAPIOverwriteReservationsResponse(rsp *http.Response) (*InventoryAPIOverwriteReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIOverwriteReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1OverwriteReservationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIDeleteReservationResponse parses an HTTP response from a InventoryAPIDeleteReservationWithResponse call
func ParseInventoryAPIDeleteReservationResponse(rsp *http.Response) (*InventoryAPIDeleteReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIDeleteReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIListOrganizationUsersResponse parses an HTTP response from a UsersAPIListOrganizationUsersWithResponse call
func ParseUsersAPIListOrganizationUsersResponse(rsp *http.Response) (*UsersAPIListOrganizationUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIListOrganizationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ListOrganizationUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIAddUserToOrganizationResponse parses an HTTP response from a UsersAPIAddUserToOrganizationWithResponse call
func ParseUsersAPIAddUserToOrganizationResponse(rsp *http.Response) (*UsersAPIAddUserToOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIAddUserToOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1AddUserToOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIRemoveUserFromOrganizationResponse parses an HTTP response from a UsersAPIRemoveUserFromOrganizationWithResponse call
func ParseUsersAPIRemoveUserFromOrganizationResponse(rsp *http.Response) (*UsersAPIRemoveUserFromOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIRemoveUserFromOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1RemoveUserFromOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIUpdateOrganizationUserResponse parses an HTTP response from a UsersAPIUpdateOrganizationUserWithResponse call
func ParseUsersAPIUpdateOrganizationUserResponse(rsp *http.Response) (*UsersAPIUpdateOrganizationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIUpdateOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Membership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartnersAPIListOrganizationsResponse parses an HTTP response from a PartnersAPIListOrganizationsWithResponse call
func ParsePartnersAPIListOrganizationsResponse(rsp *http.Response) (*PartnersAPIListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnersAPIListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiPartnersV1beta1ListOrganizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartnersAPICreateOrganizationResponse parses an HTTP response from a PartnersAPICreateOrganizationWithResponse call
func ParsePartnersAPICreateOrganizationResponse(rsp *http.Response) (*PartnersAPICreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnersAPICreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartnersAPICreateTokenResponse parses an HTTP response from a PartnersAPICreateTokenWithResponse call
func ParsePartnersAPICreateTokenResponse(rsp *http.Response) (*PartnersAPICreateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnersAPICreateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartnersAPIDeleteTokenResponse parses an HTTP response from a PartnersAPIDeleteTokenWithResponse call
func ParsePartnersAPIDeleteTokenResponse(rsp *http.Response) (*PartnersAPIDeleteTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnersAPIDeleteTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiPartnersV1beta1DeleteTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePricingAPIGetPricingForClusterNodesResponse parses an HTTP response from a PricingAPIGetPricingForClusterNodesWithResponse call
func ParsePricingAPIGetPricingForClusterNodesResponse(rsp *http.Response) (*PricingAPIGetPricingForClusterNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PricingAPIGetPricingForClusterNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetPricingForClusterNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePricingAPIGetPricingForClusterNodeResponse parses an HTTP response from a PricingAPIGetPricingForClusterNodeWithResponse call
func ParsePricingAPIGetPricingForClusterNodeResponse(rsp *http.Response) (*PricingAPIGetPricingForClusterNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PricingAPIGetPricingForClusterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetPricingForClusterNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePricingAPIGetPricingForOrganizationNodesResponse parses an HTTP response from a PricingAPIGetPricingForOrganizationNodesWithResponse call
func ParsePricingAPIGetPricingForOrganizationNodesResponse(rsp *http.Response) (*PricingAPIGetPricingForOrganizationNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PricingAPIGetPricingForOrganizationNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetPricingForOrganizationNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePricingAPISyncGCPBillingAPIDataResponse parses an HTTP response from a PricingAPISyncGCPBillingAPIDataWithResponse call
func ParsePricingAPISyncGCPBillingAPIDataResponse(rsp *http.Response) (*PricingAPISyncGCPBillingAPIDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PricingAPISyncGCPBillingAPIDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1SyncGCPBillingAPIDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIListRebalancingSchedulesResponse parses an HTTP response from a ScheduledRebalancingAPIListRebalancingSchedulesWithResponse call
func ParseScheduledRebalancingAPIListRebalancingSchedulesResponse(rsp *http.Response) (*ScheduledRebalancingAPIListRebalancingSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIListRebalancingSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1ListRebalancingSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPICreateRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPICreateRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPICreateRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPICreateRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIUpdateRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIDeleteRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIDeleteRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIDeleteRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1DeleteRebalancingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIGetRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIGetRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIGetRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIGetRebalancingScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIGetRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsageAPIGetUsageReportResponse parses an HTTP response from a UsageAPIGetUsageReportWithResponse call
func ParseUsageAPIGetUsageReportResponse(rsp *http.Response) (*UsageAPIGetUsageReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsageAPIGetUsageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsageV1beta1GetUsageReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsageAPIGetUsageSummaryResponse parses an HTTP response from a UsageAPIGetUsageSummaryWithResponse call
func ParseUsageAPIGetUsageSummaryResponse(rsp *http.Response) (*UsageAPIGetUsageSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsageAPIGetUsageSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsageV1beta1GetUsageSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetCommitmentsAssignmentsResponse parses an HTTP response from a CommitmentsAPIGetCommitmentsAssignmentsWithResponse call
func ParseCommitmentsAPIGetCommitmentsAssignmentsResponse(rsp *http.Response) (*CommitmentsAPIGetCommitmentsAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetCommitmentsAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetCommitmentsAssignmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPICreateCommitmentAssignmentResponse parses an HTTP response from a CommitmentsAPICreateCommitmentAssignmentWithResponse call
func ParseCommitmentsAPICreateCommitmentAssignmentResponse(rsp *http.Response) (*CommitmentsAPICreateCommitmentAssignmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPICreateCommitmentAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIDeleteCommitmentAssignmentResponse parses an HTTP response from a CommitmentsAPIDeleteCommitmentAssignmentWithResponse call
func ParseCommitmentsAPIDeleteCommitmentAssignmentResponse(rsp *http.Response) (*CommitmentsAPIDeleteCommitmentAssignmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIDeleteCommitmentAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetCommitmentsResponse parses an HTTP response from a CommitmentsAPIGetCommitmentsWithResponse call
func ParseCommitmentsAPIGetCommitmentsResponse(rsp *http.Response) (*CommitmentsAPIGetCommitmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetCommitmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetCommitmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIImportAzureReservationsResponse parses an HTTP response from a CommitmentsAPIImportAzureReservationsWithResponse call
func ParseCommitmentsAPIImportAzureReservationsResponse(rsp *http.Response) (*CommitmentsAPIImportAzureReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIImportAzureReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIImportGCPCommitmentsResponse parses an HTTP response from a CommitmentsAPIImportGCPCommitmentsWithResponse call
func ParseCommitmentsAPIImportGCPCommitmentsResponse(rsp *http.Response) (*CommitmentsAPIImportGCPCommitmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIImportGCPCommitmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetGCPCommitmentsImportScriptResponse parses an HTTP response from a CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse call
func ParseCommitmentsAPIGetGCPCommitmentsImportScriptResponse(rsp *http.Response) (*CommitmentsAPIGetGCPCommitmentsImportScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetGCPCommitmentsImportScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetGCPCommitmentsImportScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIDeleteCommitmentResponse parses an HTTP response from a CommitmentsAPIDeleteCommitmentWithResponse call
func ParseCommitmentsAPIDeleteCommitmentResponse(rsp *http.Response) (*CommitmentsAPIDeleteCommitmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIDeleteCommitmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIUpdateCommitmentResponse parses an HTTP response from a CommitmentsAPIUpdateCommitmentWithResponse call
func ParseCommitmentsAPIUpdateCommitmentResponse(rsp *http.Response) (*CommitmentsAPIUpdateCommitmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIUpdateCommitmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1UpdateCommitmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetCommitmentAssignmentsResponse parses an HTTP response from a CommitmentsAPIGetCommitmentAssignmentsWithResponse call
func ParseCommitmentsAPIGetCommitmentAssignmentsResponse(rsp *http.Response) (*CommitmentsAPIGetCommitmentAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetCommitmentAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetCommitmentAssignmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse parses an HTTP response from a CommitmentsAPIReplaceCommitmentAssignmentsWithResponse call
func ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse(rsp *http.Response) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIReplaceCommitmentAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1ReplaceCommitmentAssignmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetGCPCommitmentsScriptTemplateResponse parses an HTTP response from a CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse call
func ParseCommitmentsAPIGetGCPCommitmentsScriptTemplateResponse(rsp *http.Response) (*CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportConfigurationAPIGetEgressdScriptTemplateResponse parses an HTTP response from a ReportConfigurationAPIGetEgressdScriptTemplateWithResponse call
func ParseReportConfigurationAPIGetEgressdScriptTemplateResponse(rsp *http.Response) (*ReportConfigurationAPIGetEgressdScriptTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportConfigurationAPIGetEgressdScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRuntimeSecurityAPIGetKvisordScriptTemplateResponse parses an HTTP response from a RuntimeSecurityAPIGetKvisordScriptTemplateWithResponse call
func ParseRuntimeSecurityAPIGetKvisordScriptTemplateResponse(rsp *http.Response) (*RuntimeSecurityAPIGetKvisordScriptTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuntimeSecurityAPIGetKvisordScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetInstallCmdResponse parses an HTTP response from a WorkloadOptimizationAPIGetInstallCmdWithResponse call
func ParseWorkloadOptimizationAPIGetInstallCmdResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetInstallCmdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetInstallCmdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetInstallCmdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetInstallScriptResponse parses an HTTP response from a WorkloadOptimizationAPIGetInstallScriptWithResponse call
func ParseWorkloadOptimizationAPIGetInstallScriptResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetInstallScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetInstallScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetCleanupScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCleanupScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCleanupScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCleanupScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInsightsAPIGetAgentsStatusResponse parses an HTTP response from a InsightsAPIGetAgentsStatusWithResponse call
func ParseInsightsAPIGetAgentsStatusResponse(rsp *http.Response) (*InsightsAPIGetAgentsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAgentsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetAgentsStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetAttackPathsResponse parses an HTTP response from a InsightsAPIGetAttackPathsWithResponse call
func ParseInsightsAPIGetAttackPathsResponse(rsp *http.Response) (*InsightsAPIGetAttackPathsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAttackPathsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetAttackPathsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetAttackPathDetailsResponse parses an HTTP response from a InsightsAPIGetAttackPathDetailsWithResponse call
func ParseInsightsAPIGetAttackPathDetailsResponse(rsp *http.Response) (*InsightsAPIGetAttackPathDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAttackPathDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetAttackPathDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesReportResponse parses an HTTP response from a InsightsAPIGetBestPracticesReportWithResponse call
func ParseInsightsAPIGetBestPracticesReportResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetChecksResourcesResponse parses an HTTP response from a InsightsAPIGetChecksResourcesWithResponse call
func ParseInsightsAPIGetChecksResourcesResponse(rsp *http.Response) (*InsightsAPIGetChecksResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetChecksResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetChecksResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesCheckDetailsResponse parses an HTTP response from a InsightsAPIGetBestPracticesCheckDetailsWithResponse call
func ParseInsightsAPIGetBestPracticesCheckDetailsResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesCheckDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesCheckDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesCheckDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIEnforceCheckPolicyResponse parses an HTTP response from a InsightsAPIEnforceCheckPolicyWithResponse call
func ParseInsightsAPIEnforceCheckPolicyResponse(rsp *http.Response) (*InsightsAPIEnforceCheckPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIEnforceCheckPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1EnforceCheckPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetCheckExceptionsResponse parses an HTTP response from a InsightsAPIGetCheckExceptionsWithResponse call
func ParseInsightsAPIGetCheckExceptionsResponse(rsp *http.Response) (*InsightsAPIGetCheckExceptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetCheckExceptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetCheckExceptionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPISaveCheckExceptionsResponse parses an HTTP response from a InsightsAPISaveCheckExceptionsWithResponse call
func ParseInsightsAPISaveCheckExceptionsResponse(rsp *http.Response) (*InsightsAPISaveCheckExceptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPISaveCheckExceptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1SaveCheckExceptionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIPreviewExceptionGroupsResourcesResponse parses an HTTP response from a InsightsAPIPreviewExceptionGroupsResourcesWithResponse call
func ParseInsightsAPIPreviewExceptionGroupsResourcesResponse(rsp *http.Response) (*InsightsAPIPreviewExceptionGroupsResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIPreviewExceptionGroupsResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1PreviewExceptionGroupsResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetCheckResourcesResponse parses an HTTP response from a InsightsAPIGetCheckResourcesWithResponse call
func ParseInsightsAPIGetCheckResourcesResponse(rsp *http.Response) (*InsightsAPIGetCheckResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetCheckResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetCheckResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIDeletePolicyEnforcementResponse parses an HTTP response from a InsightsAPIDeletePolicyEnforcementWithResponse call
func ParseInsightsAPIDeletePolicyEnforcementResponse(rsp *http.Response) (*InsightsAPIDeletePolicyEnforcementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIDeletePolicyEnforcementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1DeletePolicyEnforcementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesReportFiltersResponse parses an HTTP response from a InsightsAPIGetBestPracticesReportFiltersWithResponse call
func ParseInsightsAPIGetBestPracticesReportFiltersResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesReportFiltersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesReportFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesReportFiltersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIScheduleBestPracticesScanResponse parses an HTTP response from a InsightsAPIScheduleBestPracticesScanWithResponse call
func ParseInsightsAPIScheduleBestPracticesScanResponse(rsp *http.Response) (*InsightsAPIScheduleBestPracticesScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIScheduleBestPracticesScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1ScheduleBestPracticesScanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesReportSummaryResponse parses an HTTP response from a InsightsAPIGetBestPracticesReportSummaryWithResponse call
func ParseInsightsAPIGetBestPracticesReportSummaryResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesReportSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesReportSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesReportSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetDailySummaryResponse parses an HTTP response from a InsightsAPIGetDailySummaryWithResponse call
func ParseInsightsAPIGetDailySummaryResponse(rsp *http.Response) (*InsightsAPIGetDailySummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetDailySummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetDailySummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetExceptedChecksResponse parses an HTTP response from a InsightsAPIGetExceptedChecksWithResponse call
func ParseInsightsAPIGetExceptedChecksResponse(rsp *http.Response) (*InsightsAPIGetExceptedChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetExceptedChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetExceptedChecksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImagesResponse parses an HTTP response from a InsightsAPIGetContainerImagesWithResponse call
func ParseInsightsAPIGetContainerImagesResponse(rsp *http.Response) (*InsightsAPIGetContainerImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIDeleteImagesResponse parses an HTTP response from a InsightsAPIDeleteImagesWithResponse call
func ParseInsightsAPIDeleteImagesResponse(rsp *http.Response) (*InsightsAPIDeleteImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIDeleteImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1DeleteImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIImageExceptionChangesResponse parses an HTTP response from a InsightsAPIImageExceptionChangesWithResponse call
func ParseInsightsAPIImageExceptionChangesResponse(rsp *http.Response) (*InsightsAPIImageExceptionChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIImageExceptionChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1ImageExceptionChangesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImagesFiltersResponse parses an HTTP response from a InsightsAPIGetContainerImagesFiltersWithResponse call
func ParseInsightsAPIGetContainerImagesFiltersResponse(rsp *http.Response) (*InsightsAPIGetContainerImagesFiltersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImagesFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImagesFiltersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImagesSummaryResponse parses an HTTP response from a InsightsAPIGetContainerImagesSummaryWithResponse call
func ParseInsightsAPIGetContainerImagesSummaryResponse(rsp *http.Response) (*InsightsAPIGetContainerImagesSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImagesSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImagesSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetPublicImageAlternativesResponse parses an HTTP response from a InsightsAPIGetPublicImageAlternativesWithResponse call
func ParseInsightsAPIGetPublicImageAlternativesResponse(rsp *http.Response) (*InsightsAPIGetPublicImageAlternativesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetPublicImageAlternativesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetPublicImageAlternativesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImageDetailsResponse parses an HTTP response from a InsightsAPIGetContainerImageDetailsWithResponse call
func ParseInsightsAPIGetContainerImageDetailsResponse(rsp *http.Response) (*InsightsAPIGetContainerImageDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImageDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImageDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImageDigestsResponse parses an HTTP response from a InsightsAPIGetContainerImageDigestsWithResponse call
func ParseInsightsAPIGetContainerImageDigestsResponse(rsp *http.Response) (*InsightsAPIGetContainerImageDigestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImageDigestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImageDigestsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImagePackagesResponse parses an HTTP response from a InsightsAPIGetContainerImagePackagesWithResponse call
func ParseInsightsAPIGetContainerImagePackagesResponse(rsp *http.Response) (*InsightsAPIGetContainerImagePackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImagePackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImagePackagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImageResourcesResponse parses an HTTP response from a InsightsAPIGetContainerImageResourcesWithResponse call
func ParseInsightsAPIGetContainerImageResourcesResponse(rsp *http.Response) (*InsightsAPIGetContainerImageResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImageResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImageResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImageVulnerabilitiesResponse parses an HTTP response from a InsightsAPIGetContainerImageVulnerabilitiesWithResponse call
func ParseInsightsAPIGetContainerImageVulnerabilitiesResponse(rsp *http.Response) (*InsightsAPIGetContainerImageVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImageVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImageVulnerabilitiesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse parses an HTTP response from a InsightsAPIGetContainerImagePackageVulnerabilityDetailsWithResponse call
func ParseInsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse(rsp *http.Response) (*InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetContainerImagePackageVulnerabilityDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetContainerImagePackageVulnerabilityDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetAttackPathsOverviewResponse parses an HTTP response from a InsightsAPIGetAttackPathsOverviewWithResponse call
func ParseInsightsAPIGetAttackPathsOverviewResponse(rsp *http.Response) (*InsightsAPIGetAttackPathsOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAttackPathsOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetAttackPathsOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesOverviewResponse parses an HTTP response from a InsightsAPIGetBestPracticesOverviewWithResponse call
func ParseInsightsAPIGetBestPracticesOverviewResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetImageSecurityOverviewResponse parses an HTTP response from a InsightsAPIGetImageSecurityOverviewWithResponse call
func ParseInsightsAPIGetImageSecurityOverviewResponse(rsp *http.Response) (*InsightsAPIGetImageSecurityOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetImageSecurityOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetImageSecurityOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetNodesOverviewResponse parses an HTTP response from a InsightsAPIGetNodesOverviewWithResponse call
func ParseInsightsAPIGetNodesOverviewResponse(rsp *http.Response) (*InsightsAPIGetNodesOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetNodesOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetNodesOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetResourceDetailsResponse parses an HTTP response from a InsightsAPIGetResourceDetailsWithResponse call
func ParseInsightsAPIGetResourceDetailsResponse(rsp *http.Response) (*InsightsAPIGetResourceDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetResourceDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetResourceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetAgentStatusResponse parses an HTTP response from a InsightsAPIGetAgentStatusWithResponse call
func ParseInsightsAPIGetAgentStatusResponse(rsp *http.Response) (*InsightsAPIGetAgentStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAgentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetAgentStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIIngestAgentLogResponse parses an HTTP response from a InsightsAPIIngestAgentLogWithResponse call
func ParseInsightsAPIIngestAgentLogResponse(rsp *http.Response) (*InsightsAPIIngestAgentLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIIngestAgentLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1IngestAgentLogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetAgentSyncStateResponse parses an HTTP response from a InsightsAPIGetAgentSyncStateWithResponse call
func ParseInsightsAPIGetAgentSyncStateResponse(rsp *http.Response) (*InsightsAPIGetAgentSyncStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAgentSyncStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetAgentSyncStateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIPostAgentTelemetryResponse parses an HTTP response from a InsightsAPIPostAgentTelemetryWithResponse call
func ParseInsightsAPIPostAgentTelemetryResponse(rsp *http.Response) (*InsightsAPIPostAgentTelemetryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIPostAgentTelemetryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1PostAgentTelemetryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIListIntegrationsResponse parses an HTTP response from a InsightsAPIListIntegrationsWithResponse call
func ParseInsightsAPIListIntegrationsResponse(rsp *http.Response) (*InsightsAPIListIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIListIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1ListIntegrationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPICreateIntegrationResponse parses an HTTP response from a InsightsAPICreateIntegrationWithResponse call
func ParseInsightsAPICreateIntegrationResponse(rsp *http.Response) (*InsightsAPICreateIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPICreateIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1CreateIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIDeleteIntegrationResponse parses an HTTP response from a InsightsAPIDeleteIntegrationWithResponse call
func ParseInsightsAPIDeleteIntegrationResponse(rsp *http.Response) (*InsightsAPIDeleteIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIDeleteIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1DeleteIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetIntegrationResponse parses an HTTP response from a InsightsAPIGetIntegrationWithResponse call
func ParseInsightsAPIGetIntegrationResponse(rsp *http.Response) (*InsightsAPIGetIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIUpdateIntegrationResponse parses an HTTP response from a InsightsAPIUpdateIntegrationWithResponse call
func ParseInsightsAPIUpdateIntegrationResponse(rsp *http.Response) (*InsightsAPIUpdateIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIUpdateIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1UpdateIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPICreateTicketResponse parses an HTTP response from a InsightsAPICreateTicketWithResponse call
func ParseInsightsAPICreateTicketResponse(rsp *http.Response) (*InsightsAPICreateTicketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPICreateTicketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1CreateTicketResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRuntimeSecurityAPIGetAnomaliesResponse parses an HTTP response from a RuntimeSecurityAPIGetAnomaliesWithResponse call
func ParseRuntimeSecurityAPIGetAnomaliesResponse(rsp *http.Response) (*RuntimeSecurityAPIGetAnomaliesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuntimeSecurityAPIGetAnomaliesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeV1GetAnomaliesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRuntimeSecurityAPIAckAnomaliesResponse parses an HTTP response from a RuntimeSecurityAPIAckAnomaliesWithResponse call
func ParseRuntimeSecurityAPIAckAnomaliesResponse(rsp *http.Response) (*RuntimeSecurityAPIAckAnomaliesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuntimeSecurityAPIAckAnomaliesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeV1AckAnomaliesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRuntimeSecurityAPICloseAnomaliesResponse parses an HTTP response from a RuntimeSecurityAPICloseAnomaliesWithResponse call
func ParseRuntimeSecurityAPICloseAnomaliesResponse(rsp *http.Response) (*RuntimeSecurityAPICloseAnomaliesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuntimeSecurityAPICloseAnomaliesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeV1CloseAnomaliesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRuntimeSecurityAPIGetAnomalyResponse parses an HTTP response from a RuntimeSecurityAPIGetAnomalyWithResponse call
func ParseRuntimeSecurityAPIGetAnomalyResponse(rsp *http.Response) (*RuntimeSecurityAPIGetAnomalyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuntimeSecurityAPIGetAnomalyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeV1GetAnomalyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRuntimeSecurityAPIGetAnomaliesOverviewResponse parses an HTTP response from a RuntimeSecurityAPIGetAnomaliesOverviewWithResponse call
func ParseRuntimeSecurityAPIGetAnomaliesOverviewResponse(rsp *http.Response) (*RuntimeSecurityAPIGetAnomaliesOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuntimeSecurityAPIGetAnomaliesOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeV1GetAnomaliesOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRuntimeSecurityAPIGetKvisordScriptResponse parses an HTTP response from a RuntimeSecurityAPIGetKvisordScriptWithResponse call
func ParseRuntimeSecurityAPIGetKvisordScriptResponse(rsp *http.Response) (*RuntimeSecurityAPIGetKvisordScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuntimeSecurityAPIGetKvisordScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeV1GetKvisordScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIConfigureClusterSecuritySettingsResponse parses an HTTP response from a InsightsAPIConfigureClusterSecuritySettingsWithResponse call
func ParseInsightsAPIConfigureClusterSecuritySettingsResponse(rsp *http.Response) (*InsightsAPIConfigureClusterSecuritySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIConfigureClusterSecuritySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1ConfigureClusterSecuritySettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPIListSSOConnectionsResponse parses an HTTP response from a SSOAPIListSSOConnectionsWithResponse call
func ParseSSOAPIListSSOConnectionsResponse(rsp *http.Response) (*SSOAPIListSSOConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIListSSOConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1ListSSOConnectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPICreateSSOConnectionResponse parses an HTTP response from a SSOAPICreateSSOConnectionWithResponse call
func ParseSSOAPICreateSSOConnectionResponse(rsp *http.Response) (*SSOAPICreateSSOConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SSOAPICreateSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1SSOConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPIDeleteSSOConnectionResponse parses an HTTP response from a SSOAPIDeleteSSOConnectionWithResponse call
func ParseSSOAPIDeleteSSOConnectionResponse(rsp *http.Response) (*SSOAPIDeleteSSOConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIDeleteSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1DeleteSSOConnectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPIGetSSOConnectionResponse parses an HTTP response from a SSOAPIGetSSOConnectionWithResponse call
func ParseSSOAPIGetSSOConnectionResponse(rsp *http.Response) (*SSOAPIGetSSOConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIGetSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1SSOConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPIUpdateSSOConnectionResponse parses an HTTP response from a SSOAPIUpdateSSOConnectionWithResponse call
func ParseSSOAPIUpdateSSOConnectionResponse(rsp *http.Response) (*SSOAPIUpdateSSOConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIUpdateSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1SSOConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIListAvailableRebalancingTZResponse parses an HTTP response from a ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse call
func ParseScheduledRebalancingAPIListAvailableRebalancingTZResponse(rsp *http.Response) (*ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIListAvailableRebalancingTZResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1ListAvailableRebalancingTZResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetAgentStatus2Response parses an HTTP response from a WorkloadOptimizationAPIGetAgentStatus2WithResponse call
func ParseWorkloadOptimizationAPIGetAgentStatus2Response(rsp *http.Response) (*WorkloadOptimizationAPIGetAgentStatus2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetAgentStatus2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetAgentStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloadScalingPoliciesResponse parses an HTTP response from a WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse call
func ParseWorkloadOptimizationAPIListWorkloadScalingPoliciesResponse(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadScalingPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse parses an HTTP response from a WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse call
func ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse(rsp *http.Response) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1WorkloadScalingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse parses an HTTP response from a WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse call
func ParseWorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse(rsp *http.Response) (*WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1DeleteWorkloadScalingPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse parses an HTTP response from a WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse call
func ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse(rsp *http.Response) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1WorkloadScalingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse parses an HTTP response from a WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse call
func ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse(rsp *http.Response) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1AssignScalingPolicyWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloadEvents2Response parses an HTTP response from a WorkloadOptimizationAPIListWorkloadEvents2WithResponse call
func ParseWorkloadOptimizationAPIListWorkloadEvents2Response(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloadEvents2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloadEvents2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloads2Response parses an HTTP response from a WorkloadOptimizationAPIListWorkloads2WithResponse call
func ParseWorkloadOptimizationAPIListWorkloads2Response(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloads2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloads2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetWorkload2Response parses an HTTP response from a WorkloadOptimizationAPIGetWorkload2WithResponse call
func ParseWorkloadOptimizationAPIGetWorkload2Response(rsp *http.Response) (*WorkloadOptimizationAPIGetWorkload2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetWorkload2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetWorkloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIUpdateWorkload2Response parses an HTTP response from a WorkloadOptimizationAPIUpdateWorkload2WithResponse call
func ParseWorkloadOptimizationAPIUpdateWorkload2Response(rsp *http.Response) (*WorkloadOptimizationAPIUpdateWorkload2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIUpdateWorkload2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1UpdateWorkloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetInstallCmd2Response parses an HTTP response from a WorkloadOptimizationAPIGetInstallCmd2WithResponse call
func ParseWorkloadOptimizationAPIGetInstallCmd2Response(rsp *http.Response) (*WorkloadOptimizationAPIGetInstallCmd2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetInstallCmd2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetInstallCmdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetInstallScript2Response parses an HTTP response from a WorkloadOptimizationAPIGetInstallScript2WithResponse call
func ParseWorkloadOptimizationAPIGetInstallScript2Response(rsp *http.Response) (*WorkloadOptimizationAPIGetInstallScript2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetInstallScript2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
